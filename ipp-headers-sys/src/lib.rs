/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals,non_snake_case,non_camel_case_types)]
extern crate ipp_ctypes;

pub const IPP_VERSION_MAJOR: ipp_ctypes::c_uint = 2017;
pub const IPP_VERSION_MINOR: ipp_ctypes::c_uint = 0;
pub const IPP_VERSION_UPDATE: ipp_ctypes::c_uint = 3;
pub const IPP_VERSION_STR: &'static [u8; 9usize] = b"2017.0.3\x00";
pub const IPP_PI: f64 = 3.141592653589793;
pub const IPP_2PI: f64 = 6.283185307179586;
pub const IPP_PI2: f64 = 1.5707963267948966;
pub const IPP_PI4: f64 = 0.7853981633974483;
pub const IPP_PI180: f64 = 0.017453292519943295;
pub const IPP_RPI: f64 = 0.3183098861837907;
pub const IPP_SQRT2: f64 = 1.4142135623730951;
pub const IPP_SQRT3: f64 = 1.7320508075688772;
pub const IPP_LN2: f64 = 0.6931471805599453;
pub const IPP_LN3: f64 = 1.0986122886681098;
pub const IPP_E: f64 = 2.718281828459045;
pub const IPP_RE: f64 = 0.36787944117144233;
pub const IPP_MAX_8U: ipp_ctypes::c_uint = 255;
pub const IPP_MAX_16U: ipp_ctypes::c_uint = 65535;
pub const IPP_MAX_32U: ipp_ctypes::c_uint = 4294967295;
pub const IPP_MIN_8U: ipp_ctypes::c_uint = 0;
pub const IPP_MIN_16U: ipp_ctypes::c_uint = 0;
pub const IPP_MIN_32U: ipp_ctypes::c_uint = 0;
pub const IPP_MIN_8S: ipp_ctypes::c_int = -128;
pub const IPP_MAX_8S: ipp_ctypes::c_uint = 127;
pub const IPP_MIN_16S: ipp_ctypes::c_int = -32768;
pub const IPP_MAX_16S: ipp_ctypes::c_uint = 32767;
pub const IPP_MIN_32S: ipp_ctypes::c_int = -2147483648;
pub const IPP_MAX_32S: ipp_ctypes::c_uint = 2147483647;
pub const IPP_MIN_64U: ipp_ctypes::c_uint = 0;
pub const IPP_MAX_64S: ipp_ctypes::c_ulonglong = 9223372036854775807;
pub const IPP_MIN_64S: ipp_ctypes::c_longlong = -9223372036854775808;
pub const IPP_MAX_64U: ipp_ctypes::c_int = -1;
pub const ippCPUID_MMX: ipp_ctypes::c_uint = 1;
pub const ippCPUID_SSE: ipp_ctypes::c_uint = 2;
pub const ippCPUID_SSE2: ipp_ctypes::c_uint = 4;
pub const ippCPUID_SSE3: ipp_ctypes::c_uint = 8;
pub const ippCPUID_SSSE3: ipp_ctypes::c_uint = 16;
pub const ippCPUID_MOVBE: ipp_ctypes::c_uint = 32;
pub const ippCPUID_SSE41: ipp_ctypes::c_uint = 64;
pub const ippCPUID_SSE42: ipp_ctypes::c_uint = 128;
pub const ippCPUID_AVX: ipp_ctypes::c_uint = 256;
pub const ippAVX_ENABLEDBYOS: ipp_ctypes::c_uint = 512;
pub const ippCPUID_AES: ipp_ctypes::c_uint = 1024;
pub const ippCPUID_CLMUL: ipp_ctypes::c_uint = 2048;
pub const ippCPUID_ABR: ipp_ctypes::c_uint = 4096;
pub const ippCPUID_RDRAND: ipp_ctypes::c_uint = 8192;
pub const ippCPUID_F16C: ipp_ctypes::c_uint = 16384;
pub const ippCPUID_AVX2: ipp_ctypes::c_uint = 32768;
pub const ippCPUID_ADCOX: ipp_ctypes::c_uint = 65536;
pub const ippCPUID_RDSEED: ipp_ctypes::c_uint = 131072;
pub const ippCPUID_PREFETCHW: ipp_ctypes::c_uint = 262144;
pub const ippCPUID_SHA: ipp_ctypes::c_uint = 524288;
pub const ippCPUID_AVX512F: ipp_ctypes::c_uint = 1048576;
pub const ippCPUID_AVX512CD: ipp_ctypes::c_uint = 2097152;
pub const ippCPUID_AVX512ER: ipp_ctypes::c_uint = 4194304;
pub const ippCPUID_AVX512PF: ipp_ctypes::c_uint = 8388608;
pub const ippCPUID_AVX512BW: ipp_ctypes::c_uint = 16777216;
pub const ippCPUID_AVX512DQ: ipp_ctypes::c_uint = 33554432;
pub const ippCPUID_AVX512VL: ipp_ctypes::c_uint = 67108864;
pub const ippCPUID_AVX512VBMI: ipp_ctypes::c_uint = 134217728;
pub const ippCPUID_MPX: ipp_ctypes::c_uint = 268435456;
pub const ippCPUID_AVX512_4FMADDPS: ipp_ctypes::c_uint = 536870912;
pub const ippCPUID_AVX512_4VNNIW: ipp_ctypes::c_uint = 1073741824;
pub const ippCPUID_KNC: ipp_ctypes::c_uint = 2147483648;
pub const ippCPUID_NOCHECK: ipp_ctypes::c_longlong = -9223372036854775808;
pub const ippCPUID_GETINFO_A: ipp_ctypes::c_ulonglong = 7020942968495564135;
pub const IPP_TEMPORAL_COPY: ipp_ctypes::c_uint = 0;
pub const IPP_NONTEMPORAL_STORE: ipp_ctypes::c_uint = 1;
pub const IPP_NONTEMPORAL_LOAD: ipp_ctypes::c_uint = 2;
pub const IPP_HOG_MAX_CELL: ipp_ctypes::c_uint = 16;
pub const IPP_HOG_MAX_BLOCK: ipp_ctypes::c_uint = 64;
pub const IPP_HOG_MAX_BINS: ipp_ctypes::c_uint = 16;
pub const IPP_SEGMENT_QUEUE: ipp_ctypes::c_uint = 1;
pub const IPP_SEGMENT_DISTANCE: ipp_ctypes::c_uint = 2;
pub const IPP_SEGMENT_BORDER_4: ipp_ctypes::c_uint = 64;
pub const IPP_SEGMENT_BORDER_8: ipp_ctypes::c_uint = 128;
pub const khdtv0f: f64 = 0.2126;
pub const khdtv1f: f64 = 0.7152;
pub const khdtv2f: f64 = 0.0722;
pub const khdtv3f: f64 = 0.1146;
pub const khdtv4f: f64 = 0.3854;
pub const khdtv5f: f64 = 0.5;
pub const khdtv6f: f64 = 0.4542;
pub const khdtv7f: f64 = 0.0458;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppLibraryVersion {
    pub major: ipp_ctypes::c_int,
    pub minor: ipp_ctypes::c_int,
    pub majorBuild: ipp_ctypes::c_int,
    pub build: ipp_ctypes::c_int,
    pub targetCpu: [ipp_ctypes::c_char; 4usize],
    pub Name: *const ipp_ctypes::c_char,
    pub Version: *const ipp_ctypes::c_char,
    pub BuildDate: *const ipp_ctypes::c_char,
}
#[test]
fn bindgen_test_layout_IppLibraryVersion() {
    assert_eq!(::std::mem::size_of::<IppLibraryVersion>() , 48usize , concat !
               ( "Size of: " , stringify ! ( IppLibraryVersion ) ));
    assert_eq! (::std::mem::align_of::<IppLibraryVersion>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( IppLibraryVersion ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . major as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( major ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . minor as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( minor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . majorBuild as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( majorBuild ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . build as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( build ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . targetCpu as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( targetCpu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . Name as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( Name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . Version as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( Version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLibraryVersion ) ) . BuildDate as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLibraryVersion ) ,
                "::" , stringify ! ( BuildDate ) ));
}
impl Clone for IppLibraryVersion {
    fn clone(&self) -> Self { *self }
}
pub type Ipp8u = ipp_ctypes::c_uchar;
pub type Ipp16u = ipp_ctypes::c_ushort;
pub type Ipp32u = ipp_ctypes::c_uint;
pub type Ipp8s = ipp_ctypes::c_schar;
pub type Ipp16s = ipp_ctypes::c_short;
pub type Ipp32s = ipp_ctypes::c_int;
pub type Ipp32f = f32;
pub type Ipp64s = ipp_ctypes::c_longlong;
pub type Ipp64u = ipp_ctypes::c_ulonglong;
pub type Ipp64f = f64;
pub type Ipp16f = Ipp16s;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp8sc {
    pub re: Ipp8s,
    pub im: Ipp8s,
}
#[test]
fn bindgen_test_layout_Ipp8sc() {
    assert_eq!(::std::mem::size_of::<Ipp8sc>() , 2usize , concat ! (
               "Size of: " , stringify ! ( Ipp8sc ) ));
    assert_eq! (::std::mem::align_of::<Ipp8sc>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( Ipp8sc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp8sc ) ) . re as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp8sc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp8sc ) ) . im as * const _ as usize } ,
                1usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp8sc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp8sc {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp16sc {
    pub re: Ipp16s,
    pub im: Ipp16s,
}
#[test]
fn bindgen_test_layout_Ipp16sc() {
    assert_eq!(::std::mem::size_of::<Ipp16sc>() , 4usize , concat ! (
               "Size of: " , stringify ! ( Ipp16sc ) ));
    assert_eq! (::std::mem::align_of::<Ipp16sc>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( Ipp16sc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp16sc ) ) . re as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp16sc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp16sc ) ) . im as * const _ as usize }
                , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp16sc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp16sc {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp16uc {
    pub re: Ipp16u,
    pub im: Ipp16u,
}
#[test]
fn bindgen_test_layout_Ipp16uc() {
    assert_eq!(::std::mem::size_of::<Ipp16uc>() , 4usize , concat ! (
               "Size of: " , stringify ! ( Ipp16uc ) ));
    assert_eq! (::std::mem::align_of::<Ipp16uc>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( Ipp16uc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp16uc ) ) . re as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp16uc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp16uc ) ) . im as * const _ as usize }
                , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp16uc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp16uc {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp32sc {
    pub re: Ipp32s,
    pub im: Ipp32s,
}
#[test]
fn bindgen_test_layout_Ipp32sc() {
    assert_eq!(::std::mem::size_of::<Ipp32sc>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Ipp32sc ) ));
    assert_eq! (::std::mem::align_of::<Ipp32sc>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Ipp32sc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp32sc ) ) . re as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp32sc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp32sc ) ) . im as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp32sc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp32sc {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp32fc {
    pub re: Ipp32f,
    pub im: Ipp32f,
}
#[test]
fn bindgen_test_layout_Ipp32fc() {
    assert_eq!(::std::mem::size_of::<Ipp32fc>() , 8usize , concat ! (
               "Size of: " , stringify ! ( Ipp32fc ) ));
    assert_eq! (::std::mem::align_of::<Ipp32fc>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( Ipp32fc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp32fc ) ) . re as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp32fc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp32fc ) ) . im as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp32fc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp32fc {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp64sc {
    pub re: Ipp64s,
    pub im: Ipp64s,
}
#[test]
fn bindgen_test_layout_Ipp64sc() {
    assert_eq!(::std::mem::size_of::<Ipp64sc>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Ipp64sc ) ));
    assert_eq! (::std::mem::align_of::<Ipp64sc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Ipp64sc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp64sc ) ) . re as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp64sc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp64sc ) ) . im as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp64sc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp64sc {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct Ipp64fc {
    pub re: Ipp64f,
    pub im: Ipp64f,
}
#[test]
fn bindgen_test_layout_Ipp64fc() {
    assert_eq!(::std::mem::size_of::<Ipp64fc>() , 16usize , concat ! (
               "Size of: " , stringify ! ( Ipp64fc ) ));
    assert_eq! (::std::mem::align_of::<Ipp64fc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( Ipp64fc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp64fc ) ) . re as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp64fc ) , "::" ,
                stringify ! ( re ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Ipp64fc ) ) . im as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Ipp64fc ) , "::" ,
                stringify ! ( im ) ));
}
impl Clone for Ipp64fc {
    fn clone(&self) -> Self { *self }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppDataType {
    ippUndef = -1,
    ipp1u = 0,
    ipp8u = 1,
    ipp8uc = 2,
    ipp8s = 3,
    ipp8sc = 4,
    ipp16u = 5,
    ipp16uc = 6,
    ipp16s = 7,
    ipp16sc = 8,
    ipp32u = 9,
    ipp32uc = 10,
    ipp32s = 11,
    ipp32sc = 12,
    ipp32f = 13,
    ipp32fc = 14,
    ipp64u = 15,
    ipp64uc = 16,
    ipp64s = 17,
    ipp64sc = 18,
    ipp64f = 19,
    ipp64fc = 20,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppBool { ippFalse = 0, ippTrue = 1, }
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppCache {
    pub type_: ipp_ctypes::c_int,
    pub level: ipp_ctypes::c_int,
    pub size: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IppCache() {
    assert_eq!(::std::mem::size_of::<IppCache>() , 12usize , concat ! (
               "Size of: " , stringify ! ( IppCache ) ));
    assert_eq! (::std::mem::align_of::<IppCache>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppCache ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppCache ) ) . type_ as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppCache ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppCache ) ) . level as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppCache ) , "::" ,
                stringify ! ( level ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppCache ) ) . size as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppCache ) , "::" ,
                stringify ! ( size ) ));
}
impl Clone for IppCache {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppRoundMode {
    ippRndZero = 0,
    ippRndNear = 1,
    ippRndFinancial = 2,
    ippRndHintAccurate = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppHintAlgorithm {
    ippAlgHintNone = 0,
    ippAlgHintFast = 1,
    ippAlgHintAccurate = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppCmpOp {
    ippCmpLess = 0,
    ippCmpLessEq = 1,
    ippCmpEq = 2,
    ippCmpGreaterEq = 3,
    ippCmpGreater = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppAlgType {
    ippAlgAuto = 0,
    ippAlgDirect = 1,
    ippAlgFFT = 2,
    ippAlgMask = 255,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppsNormOp {
    ippsNormNone = 0,
    ippsNormA = 256,
    ippsNormB = 512,
    ippsNormMask = 65280,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppNormType { ippNormInf = 1, ippNormL1 = 2, ippNormL2 = 4, }
pub const IPP_FFT_DIV_FWD_BY_N: _bindgen_ty_1 =
    _bindgen_ty_1::IPP_FFT_DIV_FWD_BY_N;
pub const IPP_FFT_DIV_INV_BY_N: _bindgen_ty_1 =
    _bindgen_ty_1::IPP_FFT_DIV_INV_BY_N;
pub const IPP_FFT_DIV_BY_SQRTN: _bindgen_ty_1 =
    _bindgen_ty_1::IPP_FFT_DIV_BY_SQRTN;
pub const IPP_FFT_NODIV_BY_ANY: _bindgen_ty_1 =
    _bindgen_ty_1::IPP_FFT_NODIV_BY_ANY;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    IPP_FFT_DIV_FWD_BY_N = 1,
    IPP_FFT_DIV_INV_BY_N = 2,
    IPP_FFT_DIV_BY_SQRTN = 4,
    IPP_FFT_NODIV_BY_ANY = 8,
}
pub const IPP_DIV_FWD_BY_N: _bindgen_ty_2 = _bindgen_ty_2::IPP_DIV_FWD_BY_N;
pub const IPP_DIV_INV_BY_N: _bindgen_ty_2 = _bindgen_ty_2::IPP_DIV_INV_BY_N;
pub const IPP_DIV_BY_SQRTN: _bindgen_ty_2 = _bindgen_ty_2::IPP_DIV_BY_SQRTN;
pub const IPP_NODIV_BY_ANY: _bindgen_ty_2 = _bindgen_ty_2::IPP_NODIV_BY_ANY;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    IPP_DIV_FWD_BY_N = 1,
    IPP_DIV_INV_BY_N = 2,
    IPP_DIV_BY_SQRTN = 4,
    IPP_NODIV_BY_ANY = 8,
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppPointPolar {
    pub rho: Ipp32f,
    pub theta: Ipp32f,
}
#[test]
fn bindgen_test_layout_IppPointPolar() {
    assert_eq!(::std::mem::size_of::<IppPointPolar>() , 8usize , concat ! (
               "Size of: " , stringify ! ( IppPointPolar ) ));
    assert_eq! (::std::mem::align_of::<IppPointPolar>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppPointPolar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppPointPolar ) ) . rho as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppPointPolar ) , "::"
                , stringify ! ( rho ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppPointPolar ) ) . theta as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppPointPolar ) , "::"
                , stringify ! ( theta ) ));
}
impl Clone for IppPointPolar {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppWinType {
    ippWinBartlett = 0,
    ippWinBlackman = 1,
    ippWinHamming = 2,
    ippWinHann = 3,
    ippWinRect = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppsIIRFilterType { ippButterworth = 0, ippChebyshev1 = 1, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppsZCType { ippZCR = 0, ippZCXor = 1, ippZCC = 2, }
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppsROI {
    pub left: ipp_ctypes::c_int,
    pub right: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IppsROI() {
    assert_eq!(::std::mem::size_of::<IppsROI>() , 8usize , concat ! (
               "Size of: " , stringify ! ( IppsROI ) ));
    assert_eq! (::std::mem::align_of::<IppsROI>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppsROI ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppsROI ) ) . left as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppsROI ) , "::" ,
                stringify ! ( left ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppsROI ) ) . right as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppsROI ) , "::" ,
                stringify ! ( right ) ));
}
impl Clone for IppsROI {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandUniState_8u {
    _unused: [u8; 0],
}
pub type IppsRandUniState_8u = RandUniState_8u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandUniState_16s {
    _unused: [u8; 0],
}
pub type IppsRandUniState_16s = RandUniState_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandUniState_32f {
    _unused: [u8; 0],
}
pub type IppsRandUniState_32f = RandUniState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandUniState_64f {
    _unused: [u8; 0],
}
pub type IppsRandUniState_64f = RandUniState_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandGaussState_8u {
    _unused: [u8; 0],
}
pub type IppsRandGaussState_8u = RandGaussState_8u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandGaussState_16s {
    _unused: [u8; 0],
}
pub type IppsRandGaussState_16s = RandGaussState_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandGaussState_32f {
    _unused: [u8; 0],
}
pub type IppsRandGaussState_32f = RandGaussState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RandGaussState_64f {
    _unused: [u8; 0],
}
pub type IppsRandGaussState_64f = RandGaussState_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFTSpec_C_32fc {
    _unused: [u8; 0],
}
pub type IppsFFTSpec_C_32fc = FFTSpec_C_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFTSpec_C_32f {
    _unused: [u8; 0],
}
pub type IppsFFTSpec_C_32f = FFTSpec_C_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFTSpec_R_32f {
    _unused: [u8; 0],
}
pub type IppsFFTSpec_R_32f = FFTSpec_R_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFTSpec_C_64fc {
    _unused: [u8; 0],
}
pub type IppsFFTSpec_C_64fc = FFTSpec_C_64fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFTSpec_C_64f {
    _unused: [u8; 0],
}
pub type IppsFFTSpec_C_64f = FFTSpec_C_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFTSpec_R_64f {
    _unused: [u8; 0],
}
pub type IppsFFTSpec_R_64f = FFTSpec_R_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFTSpec_C_32fc {
    _unused: [u8; 0],
}
pub type IppsDFTSpec_C_32fc = DFTSpec_C_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFTSpec_C_32f {
    _unused: [u8; 0],
}
pub type IppsDFTSpec_C_32f = DFTSpec_C_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFTSpec_R_32f {
    _unused: [u8; 0],
}
pub type IppsDFTSpec_R_32f = DFTSpec_R_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFTSpec_C_64fc {
    _unused: [u8; 0],
}
pub type IppsDFTSpec_C_64fc = DFTSpec_C_64fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFTSpec_C_64f {
    _unused: [u8; 0],
}
pub type IppsDFTSpec_C_64f = DFTSpec_C_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFTSpec_R_64f {
    _unused: [u8; 0],
}
pub type IppsDFTSpec_R_64f = DFTSpec_R_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCTFwdSpec_32f {
    _unused: [u8; 0],
}
pub type IppsDCTFwdSpec_32f = DCTFwdSpec_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCTInvSpec_32f {
    _unused: [u8; 0],
}
pub type IppsDCTInvSpec_32f = DCTInvSpec_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCTFwdSpec_64f {
    _unused: [u8; 0],
}
pub type IppsDCTFwdSpec_64f = DCTFwdSpec_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCTInvSpec_64f {
    _unused: [u8; 0],
}
pub type IppsDCTInvSpec_64f = DCTInvSpec_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTFwdState_32f {
    _unused: [u8; 0],
}
pub type IppsWTFwdState_32f = sWTFwdState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTFwdState_8u32f {
    _unused: [u8; 0],
}
pub type IppsWTFwdState_8u32f = sWTFwdState_8u32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTFwdState_16s32f {
    _unused: [u8; 0],
}
pub type IppsWTFwdState_16s32f = sWTFwdState_16s32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTFwdState_16u32f {
    _unused: [u8; 0],
}
pub type IppsWTFwdState_16u32f = sWTFwdState_16u32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTInvState_32f {
    _unused: [u8; 0],
}
pub type IppsWTInvState_32f = sWTInvState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTInvState_32f8u {
    _unused: [u8; 0],
}
pub type IppsWTInvState_32f8u = sWTInvState_32f8u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTInvState_32f16s {
    _unused: [u8; 0],
}
pub type IppsWTInvState_32f16s = sWTInvState_32f16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sWTInvState_32f16u {
    _unused: [u8; 0],
}
pub type IppsWTInvState_32f16u = sWTInvState_32f16u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState_32f {
    _unused: [u8; 0],
}
pub type IppsIIRState_32f = IIRState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState_32fc {
    _unused: [u8; 0],
}
pub type IppsIIRState_32fc = IIRState_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState32f_16s {
    _unused: [u8; 0],
}
pub type IppsIIRState32f_16s = IIRState32f_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState32fc_16sc {
    _unused: [u8; 0],
}
pub type IppsIIRState32fc_16sc = IIRState32fc_16sc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState_64f {
    _unused: [u8; 0],
}
pub type IppsIIRState_64f = IIRState_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState_64fc {
    _unused: [u8; 0],
}
pub type IppsIIRState_64fc = IIRState_64fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState64f_32f {
    _unused: [u8; 0],
}
pub type IppsIIRState64f_32f = IIRState64f_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState64fc_32fc {
    _unused: [u8; 0],
}
pub type IppsIIRState64fc_32fc = IIRState64fc_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState64f_32s {
    _unused: [u8; 0],
}
pub type IppsIIRState64f_32s = IIRState64f_32s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState64fc_32sc {
    _unused: [u8; 0],
}
pub type IppsIIRState64fc_32sc = IIRState64fc_32sc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState64f_16s {
    _unused: [u8; 0],
}
pub type IppsIIRState64f_16s = IIRState64f_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRState64fc_16sc {
    _unused: [u8; 0],
}
pub type IppsIIRState64fc_16sc = IIRState64fc_16sc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRSpec_32f {
    _unused: [u8; 0],
}
pub type IppsFIRSpec_32f = FIRSpec_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRSpec_64f {
    _unused: [u8; 0],
}
pub type IppsFIRSpec_64f = FIRSpec_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRSpec_32fc {
    _unused: [u8; 0],
}
pub type IppsFIRSpec_32fc = FIRSpec_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRSpec_64fc {
    _unused: [u8; 0],
}
pub type IppsFIRSpec_64fc = FIRSpec_64fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRLMSState_32f {
    _unused: [u8; 0],
}
pub type IppsFIRLMSState_32f = FIRLMSState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRLMSState32f_16s {
    _unused: [u8; 0],
}
pub type IppsFIRLMSState32f_16s = FIRLMSState32f_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HilbertSpec {
    _unused: [u8; 0],
}
pub type IppsHilbertSpec = HilbertSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIRSparseState_32f {
    _unused: [u8; 0],
}
pub type IppsFIRSparseState_32f = FIRSparseState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IIRSparseState_32f {
    _unused: [u8; 0],
}
pub type IppsIIRSparseState_32f = IIRSparseState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResamplingPolyphase_16s {
    _unused: [u8; 0],
}
pub type IppsResamplingPolyphase_16s = ResamplingPolyphase_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResamplingPolyphaseFixed_16s {
    _unused: [u8; 0],
}
pub type IppsResamplingPolyphaseFixed_16s = ResamplingPolyphaseFixed_16s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResamplingPolyphase_32f {
    _unused: [u8; 0],
}
pub type IppsResamplingPolyphase_32f = ResamplingPolyphase_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResamplingPolyphaseFixed_32f {
    _unused: [u8; 0],
}
pub type IppsResamplingPolyphaseFixed_32f = ResamplingPolyphaseFixed_32f;
pub type IppEnum = ipp_ctypes::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiNormOp {
    ippiNormNone = 0,
    ippiNorm = 256,
    ippiNormCoefficient = 512,
    ippiNormMask = 65280,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiROIShape {
    ippiROIFull = 0,
    ippiROIValid = 65536,
    ippiROISame = 131072,
    ippiROIMask = 16711680,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppChannels {
    ippC0 = 0,
    ippC1 = 1,
    ippC2 = 2,
    ippC3 = 3,
    ippC4 = 4,
    ippP2 = 5,
    ippP3 = 6,
    ippP4 = 7,
    ippAC1 = 8,
    ippAC4 = 9,
    ippA0C4 = 10,
    ippAP4 = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _IppiBorderType {
    ippBorderRepl = 1,
    ippBorderWrap = 2,
    ippBorderMirror = 3,
    ippBorderMirrorR = 4,
    ippBorderDefault = 5,
    ippBorderConst = 6,
    ippBorderTransp = 7,
    ippBorderInMemTop = 16,
    ippBorderInMemBottom = 32,
    ippBorderInMemLeft = 64,
    ippBorderInMemRight = 128,
    ippBorderInMem = 240,
    ippBorderFirstStageInMem = 3840,
}
pub use self::_IppiBorderType as IppiBorderType;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiAxis {
    ippAxsHorizontal = 0,
    ippAxsVertical = 1,
    ippAxsBoth = 2,
    ippAxs45 = 3,
    ippAxs135 = 4,
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiRect {
    pub x: ipp_ctypes::c_int,
    pub y: ipp_ctypes::c_int,
    pub width: ipp_ctypes::c_int,
    pub height: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IppiRect() {
    assert_eq!(::std::mem::size_of::<IppiRect>() , 16usize , concat ! (
               "Size of: " , stringify ! ( IppiRect ) ));
    assert_eq! (::std::mem::align_of::<IppiRect>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppiRect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRect ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRect ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRect ) ) . y as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRect ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRect ) ) . width as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRect ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRect ) ) . height as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRect ) , "::" ,
                stringify ! ( height ) ));
}
impl Clone for IppiRect {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiPoint {
    pub x: ipp_ctypes::c_int,
    pub y: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IppiPoint() {
    assert_eq!(::std::mem::size_of::<IppiPoint>() , 8usize , concat ! (
               "Size of: " , stringify ! ( IppiPoint ) ));
    assert_eq! (::std::mem::align_of::<IppiPoint>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppiPoint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiPoint ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiPoint ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiPoint ) ) . y as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiPoint ) , "::" ,
                stringify ! ( y ) ));
}
impl Clone for IppiPoint {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiSize {
    pub width: ipp_ctypes::c_int,
    pub height: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IppiSize() {
    assert_eq!(::std::mem::size_of::<IppiSize>() , 8usize , concat ! (
               "Size of: " , stringify ! ( IppiSize ) ));
    assert_eq! (::std::mem::align_of::<IppiSize>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppiSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiSize ) ) . width as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiSize ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiSize ) ) . height as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiSize ) , "::" ,
                stringify ! ( height ) ));
}
impl Clone for IppiSize {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiPoint_32f {
    pub x: Ipp32f,
    pub y: Ipp32f,
}
#[test]
fn bindgen_test_layout_IppiPoint_32f() {
    assert_eq!(::std::mem::size_of::<IppiPoint_32f>() , 8usize , concat ! (
               "Size of: " , stringify ! ( IppiPoint_32f ) ));
    assert_eq! (::std::mem::align_of::<IppiPoint_32f>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppiPoint_32f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiPoint_32f ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiPoint_32f ) , "::"
                , stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiPoint_32f ) ) . y as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiPoint_32f ) , "::"
                , stringify ! ( y ) ));
}
impl Clone for IppiPoint_32f {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _IppiMaskSize {
    ippMskSize1x3 = 13,
    ippMskSize1x5 = 15,
    ippMskSize3x1 = 31,
    ippMskSize3x3 = 33,
    ippMskSize5x1 = 51,
    ippMskSize5x5 = 55,
}
pub use self::_IppiMaskSize as IppiMaskSize;
pub const IPPI_INTER_NN: _bindgen_ty_3 = _bindgen_ty_3::IPPI_INTER_NN;
pub const IPPI_INTER_LINEAR: _bindgen_ty_3 = _bindgen_ty_3::IPPI_INTER_LINEAR;
pub const IPPI_INTER_CUBIC: _bindgen_ty_3 = _bindgen_ty_3::IPPI_INTER_CUBIC;
pub const IPPI_INTER_CUBIC2P_BSPLINE: _bindgen_ty_3 =
    _bindgen_ty_3::IPPI_INTER_CUBIC2P_BSPLINE;
pub const IPPI_INTER_CUBIC2P_CATMULLROM: _bindgen_ty_3 =
    _bindgen_ty_3::IPPI_INTER_CUBIC2P_CATMULLROM;
pub const IPPI_INTER_CUBIC2P_B05C03: _bindgen_ty_3 =
    _bindgen_ty_3::IPPI_INTER_CUBIC2P_B05C03;
pub const IPPI_INTER_SUPER: _bindgen_ty_3 = _bindgen_ty_3::IPPI_INTER_SUPER;
pub const IPPI_INTER_LANCZOS: _bindgen_ty_3 =
    _bindgen_ty_3::IPPI_INTER_LANCZOS;
pub const IPPI_ANTIALIASING: _bindgen_ty_3 = _bindgen_ty_3::IPPI_ANTIALIASING;
pub const IPPI_SUBPIXEL_EDGE: _bindgen_ty_3 =
    _bindgen_ty_3::IPPI_SUBPIXEL_EDGE;
pub const IPPI_SMOOTH_EDGE: _bindgen_ty_3 = _bindgen_ty_3::IPPI_SMOOTH_EDGE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    IPPI_INTER_NN = 1,
    IPPI_INTER_LINEAR = 2,
    IPPI_INTER_CUBIC = 4,
    IPPI_INTER_CUBIC2P_BSPLINE = 5,
    IPPI_INTER_CUBIC2P_CATMULLROM = 6,
    IPPI_INTER_CUBIC2P_B05C03 = 7,
    IPPI_INTER_SUPER = 8,
    IPPI_INTER_LANCZOS = 16,
    IPPI_ANTIALIASING = 536870912,
    IPPI_SUBPIXEL_EDGE = 1073741824,
    IPPI_SMOOTH_EDGE = -2147483648,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiInterpolationType {
    ippNearest = 1,
    ippLinear = 2,
    ippCubic = 6,
    ippLanczos = 16,
    ippHahn = 0,
    ippSuper = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiFraction {
    ippPolyphase_1_2 = 0,
    ippPolyphase_3_5 = 1,
    ippPolyphase_2_3 = 2,
    ippPolyphase_7_10 = 3,
    ippPolyphase_3_4 = 4,
}
pub const IPP_FASTN_ORIENTATION: _bindgen_ty_4 =
    _bindgen_ty_4::IPP_FASTN_ORIENTATION;
pub const IPP_FASTN_NMS: _bindgen_ty_4 = _bindgen_ty_4::IPP_FASTN_NMS;
pub const IPP_FASTN_CIRCLE: _bindgen_ty_4 = _bindgen_ty_4::IPP_FASTN_CIRCLE;
pub const IPP_FASTN_SCORE_MODE0: _bindgen_ty_4 =
    _bindgen_ty_4::IPP_FASTN_SCORE_MODE0;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    IPP_FASTN_ORIENTATION = 1,
    IPP_FASTN_NMS = 2,
    IPP_FASTN_CIRCLE = 4,
    IPP_FASTN_SCORE_MODE0 = 32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiAlphaType {
    ippAlphaOver = 0,
    ippAlphaIn = 1,
    ippAlphaOut = 2,
    ippAlphaATop = 3,
    ippAlphaXor = 4,
    ippAlphaPlus = 5,
    ippAlphaOverPremul = 6,
    ippAlphaInPremul = 7,
    ippAlphaOutPremul = 8,
    ippAlphaATopPremul = 9,
    ippAlphaXorPremul = 10,
    ippAlphaPlusPremul = 11,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeconvFFTState_32f_C1R {
    _unused: [u8; 0],
}
pub type IppiDeconvFFTState_32f_C1R = DeconvFFTState_32f_C1R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeconvFFTState_32f_C3R {
    _unused: [u8; 0],
}
pub type IppiDeconvFFTState_32f_C3R = DeconvFFTState_32f_C3R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeconvLR_32f_C1R {
    _unused: [u8; 0],
}
pub type IppiDeconvLR_32f_C1R = DeconvLR_32f_C1R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeconvLR_32f_C3R {
    _unused: [u8; 0],
}
pub type IppiDeconvLR_32f_C3R = DeconvLR_32f_C3R;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiFilterBilateralType {
    ippiFilterBilateralGauss = 100,
    ippiFilterBilateralGaussFast = 101,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterBilateralSpec {
    _unused: [u8; 0],
}
pub type IppiFilterBilateralSpec = FilterBilateralSpec;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiDistanceMethodType { ippDistNormL1 = 2, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiResizeFilterType {
    ippResizeFilterHann = 0,
    ippResizeFilterLanczos = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeFilterState {
    _unused: [u8; 0],
}
pub type IppiResizeFilterState = ResizeFilterState;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiBorderSize {
    pub borderLeft: Ipp32u,
    pub borderTop: Ipp32u,
    pub borderRight: Ipp32u,
    pub borderBottom: Ipp32u,
}
#[test]
fn bindgen_test_layout_IppiBorderSize() {
    assert_eq!(::std::mem::size_of::<IppiBorderSize>() , 16usize , concat ! (
               "Size of: " , stringify ! ( IppiBorderSize ) ));
    assert_eq! (::std::mem::align_of::<IppiBorderSize>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppiBorderSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiBorderSize ) ) . borderLeft as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiBorderSize ) , "::"
                , stringify ! ( borderLeft ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiBorderSize ) ) . borderTop as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiBorderSize ) , "::"
                , stringify ! ( borderTop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiBorderSize ) ) . borderRight as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiBorderSize ) , "::"
                , stringify ! ( borderRight ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiBorderSize ) ) . borderBottom as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiBorderSize ) , "::"
                , stringify ! ( borderBottom ) ));
}
impl Clone for IppiBorderSize {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiWarpDirection { ippWarpForward = 0, ippWarpBackward = 1, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiWarpTransformType {
    ippWarpAffine = 0,
    ippWarpPerspective = 1,
    ippWarpBilinear = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeSpec_32f {
    _unused: [u8; 0],
}
pub type IppiResizeSpec_32f = ResizeSpec_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeYUV422Spec {
    _unused: [u8; 0],
}
pub type IppiResizeYUV422Spec = ResizeYUV422Spec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeYUV420Spec {
    _unused: [u8; 0],
}
pub type IppiResizeYUV420Spec = ResizeYUV420Spec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeSpec_64f {
    _unused: [u8; 0],
}
pub type IppiResizeSpec_64f = ResizeSpec_64f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IppiWarpSpec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterBorderSpec {
    _unused: [u8; 0],
}
pub type IppiFilterBorderSpec = FilterBorderSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ThresholdAdaptiveSpec {
    _unused: [u8; 0],
}
pub type IppiThresholdAdaptiveSpec = ThresholdAdaptiveSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HistogramSpec {
    _unused: [u8; 0],
}
pub type IppiHistogramSpec = HistogramSpec;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiHOGConfig {
    pub cvCompatible: ipp_ctypes::c_int,
    pub cellSize: ipp_ctypes::c_int,
    pub blockSize: ipp_ctypes::c_int,
    pub blockStride: ipp_ctypes::c_int,
    pub nbins: ipp_ctypes::c_int,
    pub sigma: Ipp32f,
    pub l2thresh: Ipp32f,
    pub winSize: IppiSize,
}
#[test]
fn bindgen_test_layout_IppiHOGConfig() {
    assert_eq!(::std::mem::size_of::<IppiHOGConfig>() , 36usize , concat ! (
               "Size of: " , stringify ! ( IppiHOGConfig ) ));
    assert_eq! (::std::mem::align_of::<IppiHOGConfig>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppiHOGConfig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . cvCompatible as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( cvCompatible ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . cellSize as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( cellSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . blockSize as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( blockSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . blockStride as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( blockStride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . nbins as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( nbins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . sigma as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( sigma ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . l2thresh as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( l2thresh ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiHOGConfig ) ) . winSize as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiHOGConfig ) , "::"
                , stringify ! ( winSize ) ));
}
impl Clone for IppiHOGConfig {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFT2DSpec_C_32fc {
    _unused: [u8; 0],
}
pub type IppiFFTSpec_C_32fc = FFT2DSpec_C_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFT2DSpec_R_32f {
    _unused: [u8; 0],
}
pub type IppiFFTSpec_R_32f = FFT2DSpec_R_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFT2DSpec_C_32fc {
    _unused: [u8; 0],
}
pub type IppiDFTSpec_C_32fc = DFT2DSpec_C_32fc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFT2DSpec_R_32f {
    _unused: [u8; 0],
}
pub type IppiDFTSpec_R_32f = DFT2DSpec_R_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCT2DFwdSpec_32f {
    _unused: [u8; 0],
}
pub type IppiDCTFwdSpec_32f = DCT2DFwdSpec_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCT2DInvSpec_32f {
    _unused: [u8; 0],
}
pub type IppiDCTInvSpec_32f = DCT2DInvSpec_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iWTFwdSpec_32f_C1R {
    _unused: [u8; 0],
}
pub type IppiWTFwdSpec_32f_C1R = iWTFwdSpec_32f_C1R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iWTInvSpec_32f_C1R {
    _unused: [u8; 0],
}
pub type IppiWTInvSpec_32f_C1R = iWTInvSpec_32f_C1R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iWTFwdSpec_32f_C3R {
    _unused: [u8; 0],
}
pub type IppiWTFwdSpec_32f_C3R = iWTFwdSpec_32f_C3R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iWTInvSpec_32f_C3R {
    _unused: [u8; 0],
}
pub type IppiWTInvSpec_32f_C3R = iWTInvSpec_32f_C3R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MomentState64f {
    _unused: [u8; 0],
}
pub type IppiMomentState_64f = MomentState64f;
pub type IppiHuMoment_64f = [Ipp64f; 7usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LUT_Spec {
    _unused: [u8; 0],
}
pub type IppiLUT_Spec = LUT_Spec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ipHOG {
    _unused: [u8; 0],
}
pub type IppiHOGSpec = _ipHOG;
/// Below are 3D Image (Volume) Processing specific definitions
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IpprVolume {
    pub width: ipp_ctypes::c_int,
    pub height: ipp_ctypes::c_int,
    pub depth: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IpprVolume() {
    assert_eq!(::std::mem::size_of::<IpprVolume>() , 12usize , concat ! (
               "Size of: " , stringify ! ( IpprVolume ) ));
    assert_eq! (::std::mem::align_of::<IpprVolume>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IpprVolume ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprVolume ) ) . width as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprVolume ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprVolume ) ) . height as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprVolume ) , "::" ,
                stringify ! ( height ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprVolume ) ) . depth as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprVolume ) , "::" ,
                stringify ! ( depth ) ));
}
impl Clone for IpprVolume {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IpprCuboid {
    pub x: ipp_ctypes::c_int,
    pub y: ipp_ctypes::c_int,
    pub z: ipp_ctypes::c_int,
    pub width: ipp_ctypes::c_int,
    pub height: ipp_ctypes::c_int,
    pub depth: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IpprCuboid() {
    assert_eq!(::std::mem::size_of::<IpprCuboid>() , 24usize , concat ! (
               "Size of: " , stringify ! ( IpprCuboid ) ));
    assert_eq! (::std::mem::align_of::<IpprCuboid>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IpprCuboid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprCuboid ) ) . x as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprCuboid ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprCuboid ) ) . y as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprCuboid ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprCuboid ) ) . z as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprCuboid ) , "::" ,
                stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprCuboid ) ) . width as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprCuboid ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprCuboid ) ) . height as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprCuboid ) , "::" ,
                stringify ! ( height ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprCuboid ) ) . depth as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprCuboid ) , "::" ,
                stringify ! ( depth ) ));
}
impl Clone for IpprCuboid {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IpprPoint {
    pub x: ipp_ctypes::c_int,
    pub y: ipp_ctypes::c_int,
    pub z: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IpprPoint() {
    assert_eq!(::std::mem::size_of::<IpprPoint>() , 12usize , concat ! (
               "Size of: " , stringify ! ( IpprPoint ) ));
    assert_eq! (::std::mem::align_of::<IpprPoint>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IpprPoint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprPoint ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprPoint ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprPoint ) ) . y as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprPoint ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IpprPoint ) ) . z as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IpprPoint ) , "::" ,
                stringify ! ( z ) ));
}
impl Clone for IpprPoint {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _IppiDifferentialKernel {
    ippFilterSobelVert = 0,
    ippFilterSobelHoriz = 1,
    ippFilterSobel = 2,
    ippFilterScharrVert = 3,
    ippFilterScharrHoriz = 4,
    ippFilterScharr = 5,
    ippFilterCentralDiffVert = 6,
    ippFilterCentralDiffHoriz = 7,
    ippFilterCentralDiff = 8,
}
pub use self::_IppiDifferentialKernel as IppiDifferentialKernel;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _IppiKernelType {
    ippKernelSobel = 0,
    ippKernelScharr = 1,
    ippKernelSobelNeg = 2,
}
pub use self::_IppiKernelType as IppiKernelType;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _IppiNorm {
    ippiNormInf = 0,
    ippiNormL1 = 1,
    ippiNormL2 = 2,
    ippiNormFM = 3,
}
pub use self::_IppiNorm as IppiNorm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphState {
    _unused: [u8; 0],
}
pub type IppiMorphState = ipcvMorphState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphStateL {
    _unused: [u8; 0],
}
pub type IppiMorphStateL = ipcvMorphStateL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphAdvState {
    _unused: [u8; 0],
}
pub type IppiMorphAdvState = ipcvMorphAdvState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphAdvStateL {
    _unused: [u8; 0],
}
pub type IppiMorphAdvStateL = ipcvMorphAdvStateL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphGrayState_8u {
    _unused: [u8; 0],
}
pub type IppiMorphGrayState_8u = ipcvMorphGrayState_8u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphGrayState_8uL {
    _unused: [u8; 0],
}
pub type IppiMorphGrayState_8uL = ipcvMorphGrayState_8uL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphGrayState_32f {
    _unused: [u8; 0],
}
pub type IppiMorphGrayState_32f = ipcvMorphGrayState_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvMorphGrayState_32fL {
    _unused: [u8; 0],
}
pub type IppiMorphGrayState_32fL = ipcvMorphGrayState_32fL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvConvState {
    _unused: [u8; 0],
}
pub type IppiConvState = ipcvConvState;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct _IppiConnectedComp {
    pub area: Ipp64f,
    pub value: [Ipp64f; 3usize],
    pub rect: IppiRect,
}
#[test]
fn bindgen_test_layout__IppiConnectedComp() {
    assert_eq!(::std::mem::size_of::<_IppiConnectedComp>() , 48usize , concat
               ! ( "Size of: " , stringify ! ( _IppiConnectedComp ) ));
    assert_eq! (::std::mem::align_of::<_IppiConnectedComp>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _IppiConnectedComp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiConnectedComp ) ) . area as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiConnectedComp ) ,
                "::" , stringify ! ( area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiConnectedComp ) ) . value as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiConnectedComp ) ,
                "::" , stringify ! ( value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiConnectedComp ) ) . rect as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiConnectedComp ) ,
                "::" , stringify ! ( rect ) ));
}
impl Clone for _IppiConnectedComp {
    fn clone(&self) -> Self { *self }
}
pub type IppiConnectedComp = _IppiConnectedComp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyramidState {
    _unused: [u8; 0],
}
pub type IppiPyramidState = PyramidState;
pub type IppiPyramidDownState_8u_C1R = IppiPyramidState;
pub type IppiPyramidDownState_16u_C1R = IppiPyramidState;
pub type IppiPyramidDownState_32f_C1R = IppiPyramidState;
pub type IppiPyramidDownState_8u_C3R = IppiPyramidState;
pub type IppiPyramidDownState_16u_C3R = IppiPyramidState;
pub type IppiPyramidDownState_32f_C3R = IppiPyramidState;
pub type IppiPyramidUpState_8u_C1R = IppiPyramidState;
pub type IppiPyramidUpState_16u_C1R = IppiPyramidState;
pub type IppiPyramidUpState_32f_C1R = IppiPyramidState;
pub type IppiPyramidUpState_8u_C3R = IppiPyramidState;
pub type IppiPyramidUpState_16u_C3R = IppiPyramidState;
pub type IppiPyramidUpState_32f_C3R = IppiPyramidState;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct _IppiPyramid {
    pub pImage: *mut *mut Ipp8u,
    pub pRoi: *mut IppiSize,
    pub pRate: *mut Ipp64f,
    pub pStep: *mut ipp_ctypes::c_int,
    pub pState: *mut Ipp8u,
    pub level: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout__IppiPyramid() {
    assert_eq!(::std::mem::size_of::<_IppiPyramid>() , 48usize , concat ! (
               "Size of: " , stringify ! ( _IppiPyramid ) ));
    assert_eq! (::std::mem::align_of::<_IppiPyramid>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IppiPyramid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiPyramid ) ) . pImage as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiPyramid ) , "::" ,
                stringify ! ( pImage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiPyramid ) ) . pRoi as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiPyramid ) , "::" ,
                stringify ! ( pRoi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiPyramid ) ) . pRate as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiPyramid ) , "::" ,
                stringify ! ( pRate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiPyramid ) ) . pStep as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiPyramid ) , "::" ,
                stringify ! ( pStep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiPyramid ) ) . pState as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiPyramid ) , "::" ,
                stringify ! ( pState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiPyramid ) ) . level as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiPyramid ) , "::" ,
                stringify ! ( level ) ));
}
impl Clone for _IppiPyramid {
    fn clone(&self) -> Self { *self }
}
pub type IppiPyramid = _IppiPyramid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptFlowPyrLK {
    _unused: [u8; 0],
}
pub type IppiOptFlowPyrLK = OptFlowPyrLK;
pub type IppiOptFlowPyrLK_8u_C1R = IppiOptFlowPyrLK;
pub type IppiOptFlowPyrLK_16u_C1R = IppiOptFlowPyrLK;
pub type IppiOptFlowPyrLK_32f_C1R = IppiOptFlowPyrLK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvHaarClassifier_32f {
    _unused: [u8; 0],
}
pub type IppiHaarClassifier_32f = ipcvHaarClassifier_32f;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvHaarClassifier_32s {
    _unused: [u8; 0],
}
pub type IppiHaarClassifier_32s = ipcvHaarClassifier_32s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvFGHistogramState_8u_C1R {
    _unused: [u8; 0],
}
pub type IppFGHistogramState_8u_C1R = ipcvFGHistogramState_8u_C1R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvFGHistogramState_8u_C3R {
    _unused: [u8; 0],
}
pub type IppFGHistogramState_8u_C3R = ipcvFGHistogramState_8u_C3R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvFGGaussianState_8u_C1R {
    _unused: [u8; 0],
}
pub type IppFGGaussianState_8u_C1R = ipcvFGGaussianState_8u_C1R;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvFGGaussianState_8u_C3R {
    _unused: [u8; 0],
}
pub type IppFGGaussianState_8u_C3R = ipcvFGGaussianState_8u_C3R;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _IppiInpaintFlag { IPP_INPAINT_TELEA = 0, IPP_INPAINT_NS = 1, }
pub use self::_IppiInpaintFlag as IppiInpaintFlag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ippcvFilterGaussianSpec {
    _unused: [u8; 0],
}
pub type IppFilterGaussianSpec = ippcvFilterGaussianSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcvInpaintState_8u {
    _unused: [u8; 0],
}
pub type IppiInpaintState_8u_C1R = ipcvInpaintState_8u;
pub type IppiInpaintState_8u_C3R = ipcvInpaintState_8u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HoughProbSpec {
    _unused: [u8; 0],
}
pub type IppiHoughProbSpec = HoughProbSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FastNSpec {
    _unused: [u8; 0],
}
pub type IppiFastNSpec = FastNSpec;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct _IppiCornerFastN {
    pub x: ipp_ctypes::c_int,
    pub y: ipp_ctypes::c_int,
    pub cornerType: ipp_ctypes::c_int,
    pub orientation: ipp_ctypes::c_int,
    pub angle: f32,
    pub score: f32,
}
#[test]
fn bindgen_test_layout__IppiCornerFastN() {
    assert_eq!(::std::mem::size_of::<_IppiCornerFastN>() , 24usize , concat !
               ( "Size of: " , stringify ! ( _IppiCornerFastN ) ));
    assert_eq! (::std::mem::align_of::<_IppiCornerFastN>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( _IppiCornerFastN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiCornerFastN ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiCornerFastN ) ,
                "::" , stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiCornerFastN ) ) . y as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiCornerFastN ) ,
                "::" , stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiCornerFastN ) ) . cornerType as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiCornerFastN ) ,
                "::" , stringify ! ( cornerType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiCornerFastN ) ) . orientation as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiCornerFastN ) ,
                "::" , stringify ! ( orientation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiCornerFastN ) ) . angle as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiCornerFastN ) ,
                "::" , stringify ! ( angle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IppiCornerFastN ) ) . score as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _IppiCornerFastN ) ,
                "::" , stringify ! ( score ) ));
}
impl Clone for _IppiCornerFastN {
    fn clone(&self) -> Self { *self }
}
pub type IppiCornerFastN = _IppiCornerFastN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FGMMState_8u_C3R {
    _unused: [u8; 0],
}
pub type IppFGMMState_8u_C3R = FGMMState_8u_C3R;
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppFGMModel {
    pub numFrames: ipp_ctypes::c_uint,
    pub maxNGauss: ipp_ctypes::c_uint,
    pub varInit: Ipp32f,
    pub varMin: Ipp32f,
    pub varMax: Ipp32f,
    pub varWBRatio: Ipp32f,
    pub bckgThr: Ipp32f,
    pub varNGRatio: Ipp32f,
    pub reduction: Ipp32f,
    pub shadowValue: Ipp8u,
    pub shadowFlag: ipp_ctypes::c_char,
    pub shadowRatio: Ipp32f,
}
#[test]
fn bindgen_test_layout_IppFGMModel() {
    assert_eq!(::std::mem::size_of::<IppFGMModel>() , 44usize , concat ! (
               "Size of: " , stringify ! ( IppFGMModel ) ));
    assert_eq! (::std::mem::align_of::<IppFGMModel>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IppFGMModel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . numFrames as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( numFrames ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . maxNGauss as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( maxNGauss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . varInit as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( varInit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . varMin as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( varMin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . varMax as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( varMax ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . varWBRatio as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( varWBRatio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . bckgThr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( bckgThr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . varNGRatio as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( varNGRatio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . reduction as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( reduction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . shadowValue as * const
                _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( shadowValue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . shadowFlag as * const _
                as usize } , 37usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( shadowFlag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppFGMModel ) ) . shadowRatio as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( IppFGMModel ) , "::" ,
                stringify ! ( shadowRatio ) ));
}
impl Clone for IppFGMModel {
    fn clone(&self) -> Self { *self }
}
pub const IPP_UPPER: _bindgen_ty_5 = _bindgen_ty_5::IPP_UPPER;
pub const IPP_LEFT: _bindgen_ty_5 = _bindgen_ty_5::IPP_LEFT;
pub const IPP_CENTER: _bindgen_ty_5 = _bindgen_ty_5::IPP_CENTER;
pub const IPP_RIGHT: _bindgen_ty_5 = _bindgen_ty_5::IPP_RIGHT;
pub const IPP_LOWER: _bindgen_ty_5 = _bindgen_ty_5::IPP_LOWER;
pub const IPP_UPPER_LEFT: _bindgen_ty_5 = _bindgen_ty_5::IPP_UPPER_LEFT;
pub const IPP_UPPER_RIGHT: _bindgen_ty_5 = _bindgen_ty_5::IPP_UPPER_RIGHT;
pub const IPP_LOWER_LEFT: _bindgen_ty_5 = _bindgen_ty_5::IPP_LOWER_LEFT;
pub const IPP_LOWER_RIGHT: _bindgen_ty_5 = _bindgen_ty_5::IPP_LOWER_RIGHT;
#[repr(u32)]

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    IPP_UPPER = 1,
    IPP_LEFT = 2,
    IPP_CENTER = 4,
    IPP_RIGHT = 8,
    IPP_LOWER = 16,
    IPP_UPPER_LEFT = 32,
    IPP_UPPER_RIGHT = 64,
    IPP_LOWER_LEFT = 128,
    IPP_LOWER_RIGHT = 256,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiDitherType {
    ippDitherNone = 0,
    ippDitherFS = 1,
    ippDitherJJN = 2,
    ippDitherStucki = 3,
    ippDitherBayer = 4,
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppRegExpFind {
    pub pFind: *mut ipp_ctypes::c_void,
    pub lenFind: ipp_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_IppRegExpFind() {
    assert_eq!(::std::mem::size_of::<IppRegExpFind>() , 16usize , concat ! (
               "Size of: " , stringify ! ( IppRegExpFind ) ));
    assert_eq! (::std::mem::align_of::<IppRegExpFind>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( IppRegExpFind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppRegExpFind ) ) . pFind as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppRegExpFind ) , "::"
                , stringify ! ( pFind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppRegExpFind ) ) . lenFind as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppRegExpFind ) , "::"
                , stringify ! ( lenFind ) ));
}
impl Clone for IppRegExpFind {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RegExpState {
    _unused: [u8; 0],
}
pub type IppRegExpState = RegExpState;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppRegExpFormat { ippFmtASCII = 0, ippFmtUTF8 = 1, }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RegExpReplaceState {
    _unused: [u8; 0],
}
pub type IppRegExpReplaceState = RegExpReplaceState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MTFState_8u {
    _unused: [u8; 0],
}
pub type IppMTFState_8u = MTFState_8u;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppBWTSortAlgorithmHint {
    ippBWTItohTanakaLimSort = 0,
    ippBWTItohTanakaUnlimSort = 1,
    ippBWTSuffixSort = 2,
    ippBWTAutoSort = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZSSState_8u {
    _unused: [u8; 0],
}
pub type IppLZSSState_8u = LZSSState_8u;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ77State_8u {
    _unused: [u8; 0],
}
pub type IppLZ77State_8u = LZ77State_8u;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZ77ComprLevel {
    IppLZ77FastCompr = 0,
    IppLZ77AverageCompr = 1,
    IppLZ77BestCompr = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZ77Chcksm {
    IppLZ77NoChcksm = 0,
    IppLZ77Adler32 = 1,
    IppLZ77CRC32 = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZ77Flush {
    IppLZ77NoFlush = 0,
    IppLZ77SyncFlush = 1,
    IppLZ77FullFlush = 2,
    IppLZ77FinishFlush = 3,
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppLZ77Pairs_16u {
    pub length: Ipp16u,
    pub offset: Ipp16u,
}
#[test]
fn bindgen_test_layout_IppLZ77Pairs_16u() {
    assert_eq!(::std::mem::size_of::<IppLZ77Pairs_16u>() , 4usize , concat ! (
               "Size of: " , stringify ! ( IppLZ77Pairs_16u ) ));
    assert_eq! (::std::mem::align_of::<IppLZ77Pairs_16u>() , 2usize , concat !
                ( "Alignment of " , stringify ! ( IppLZ77Pairs_16u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLZ77Pairs_16u ) ) . length as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLZ77Pairs_16u ) ,
                "::" , stringify ! ( length ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppLZ77Pairs_16u ) ) . offset as * const
                _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( IppLZ77Pairs_16u ) ,
                "::" , stringify ! ( offset ) ));
}
impl Clone for IppLZ77Pairs_16u {
    fn clone(&self) -> Self { *self }
}
pub type IppLZ77Pair = IppLZ77Pairs_16u;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZ77DeflateStatus {
    IppLZ77StatusInit = 0,
    IppLZ77StatusLZ77Process = 1,
    IppLZ77StatusHuffProcess = 2,
    IppLZ77StatusFinal = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZ77HuffMode {
    IppLZ77UseFixed = 0,
    IppLZ77UseDynamic = 1,
    IppLZ77UseStored = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZ77InflateStatus {
    IppLZ77InflateStatusInit = 0,
    IppLZ77InflateStatusHuffProcess = 1,
    IppLZ77InflateStatusLZ77Process = 2,
    IppLZ77InflateStatusFinal = 3,
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppInflateState {
    pub pWindow: *const Ipp8u,
    pub winSize: ipp_ctypes::c_uint,
    pub tableType: ipp_ctypes::c_uint,
    pub tableBufferSize: ipp_ctypes::c_uint,
}
#[test]
fn bindgen_test_layout_IppInflateState() {
    assert_eq!(::std::mem::size_of::<IppInflateState>() , 24usize , concat ! (
               "Size of: " , stringify ! ( IppInflateState ) ));
    assert_eq! (::std::mem::align_of::<IppInflateState>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( IppInflateState ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppInflateState ) ) . pWindow as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppInflateState ) ,
                "::" , stringify ! ( pWindow ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppInflateState ) ) . winSize as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppInflateState ) ,
                "::" , stringify ! ( winSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppInflateState ) ) . tableType as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( IppInflateState ) ,
                "::" , stringify ! ( tableType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppInflateState ) ) . tableBufferSize as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( IppInflateState ) ,
                "::" , stringify ! ( tableBufferSize ) ));
}
impl Clone for IppInflateState {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppInflateMode { ippTYPE = 0, ippLEN = 1, ippLENEXT = 2, }
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppDeflateFreqTable {
    pub freq: Ipp16u,
    pub code: Ipp16u,
}
#[test]
fn bindgen_test_layout_IppDeflateFreqTable() {
    assert_eq!(::std::mem::size_of::<IppDeflateFreqTable>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( IppDeflateFreqTable ) ));
    assert_eq! (::std::mem::align_of::<IppDeflateFreqTable>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( IppDeflateFreqTable ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppDeflateFreqTable ) ) . freq as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppDeflateFreqTable ) ,
                "::" , stringify ! ( freq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppDeflateFreqTable ) ) . code as * const
                _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( IppDeflateFreqTable ) ,
                "::" , stringify ! ( code ) ));
}
impl Clone for IppDeflateFreqTable {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppDeflateHuffCode {
    pub code: Ipp16u,
    pub len: Ipp16u,
}
#[test]
fn bindgen_test_layout_IppDeflateHuffCode() {
    assert_eq!(::std::mem::size_of::<IppDeflateHuffCode>() , 4usize , concat !
               ( "Size of: " , stringify ! ( IppDeflateHuffCode ) ));
    assert_eq! (::std::mem::align_of::<IppDeflateHuffCode>() , 2usize , concat
                ! ( "Alignment of " , stringify ! ( IppDeflateHuffCode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppDeflateHuffCode ) ) . code as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppDeflateHuffCode ) ,
                "::" , stringify ! ( code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppDeflateHuffCode ) ) . len as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( IppDeflateHuffCode ) ,
                "::" , stringify ! ( len ) ));
}
impl Clone for IppDeflateHuffCode {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RLEState_BZ2 {
    _unused: [u8; 0],
}
pub type IppRLEState_BZ2 = RLEState_BZ2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EncodeHuffState_BZ2 {
    _unused: [u8; 0],
}
pub type IppEncodeHuffState_BZ2 = EncodeHuffState_BZ2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodeHuffState_BZ2 {
    _unused: [u8; 0],
}
pub type IppDecodeHuffState_BZ2 = DecodeHuffState_BZ2;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppLZOMethod { IppLZO1XST = 0, IppLZO1XMT = 1, }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZOState_8u {
    _unused: [u8; 0],
}
pub type IppLZOState_8u = LZOState_8u;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppStatus {
    ippStsNotSupportedModeErr = -9999,
    ippStsCpuNotSupportedErr = -9998,
    ippStsInplaceModeNotSupportedErr = -9997,
    ippStsIIRIIRLengthErr = -234,
    ippStsWarpTransformTypeErr = -233,
    ippStsExceededSizeErr = -232,
    ippStsWarpDirectionErr = -231,
    ippStsFilterTypeErr = -230,
    ippStsNormErr = -229,
    ippStsAlgTypeErr = -228,
    ippStsMisalignedOffsetErr = -227,
    ippStsQuadraticNonResidueErr = -226,
    ippStsBorderErr = -225,
    ippStsDitherTypeErr = -224,
    ippStsH264BufferFullErr = -223,
    ippStsWrongAffinitySettingErr = -222,
    ippStsLoadDynErr = -221,
    ippStsPointAtInfinity = -220,
    ippStsUnknownStatusCodeErr = -216,
    ippStsOFBSizeErr = -215,
    ippStsLzoBrokenStreamErr = -214,
    ippStsRoundModeNotSupportedErr = -213,
    ippStsDecimateFractionErr = -212,
    ippStsWeightErr = -211,
    ippStsQualityIndexErr = -210,
    ippStsIIRPassbandRippleErr = -209,
    ippStsFilterFrequencyErr = -208,
    ippStsFIRGenOrderErr = -207,
    ippStsIIRGenOrderErr = -206,
    ippStsConvergeErr = -205,
    ippStsSizeMatchMatrixErr = -204,
    ippStsCountMatrixErr = -203,
    ippStsRoiShiftMatrixErr = -202,
    ippStsResizeNoOperationErr = -201,
    ippStsSrcDataErr = -200,
    ippStsMaxLenHuffCodeErr = -199,
    ippStsCodeLenTableErr = -198,
    ippStsFreqTableErr = -197,
    ippStsIncompleteContextErr = -196,
    ippStsSingularErr = -195,
    ippStsSparseErr = -194,
    ippStsBitOffsetErr = -193,
    ippStsQPErr = -192,
    ippStsVLCErr = -191,
    ippStsRegExpOptionsErr = -190,
    ippStsRegExpErr = -189,
    ippStsRegExpMatchLimitErr = -188,
    ippStsRegExpQuantifierErr = -187,
    ippStsRegExpGroupingErr = -186,
    ippStsRegExpBackRefErr = -185,
    ippStsRegExpChClassErr = -184,
    ippStsRegExpMetaChErr = -183,
    ippStsStrideMatrixErr = -182,
    ippStsCTRSizeErr = -181,
    ippStsJPEG2KCodeBlockIsNotAttached = -180,
    ippStsNotPosDefErr = -179,
    ippStsEphemeralKeyErr = -178,
    ippStsMessageErr = -177,
    ippStsShareKeyErr = -176,
    ippStsIvalidPublicKey = -175,
    ippStsIvalidPrivateKey = -174,
    ippStsOutOfECErr = -173,
    ippStsECCInvalidFlagErr = -172,
    ippStsMP3FrameHeaderErr = -171,
    ippStsMP3SideInfoErr = -170,
    ippStsBlockStepErr = -169,
    ippStsMBStepErr = -168,
    ippStsAacPrgNumErr = -167,
    ippStsAacSectCbErr = -166,
    ippStsAacSfValErr = -164,
    ippStsAacCoefValErr = -163,
    ippStsAacMaxSfbErr = -162,
    ippStsAacPredSfbErr = -161,
    ippStsAacPlsDataErr = -160,
    ippStsAacGainCtrErr = -159,
    ippStsAacSectErr = -158,
    ippStsAacTnsNumFiltErr = -157,
    ippStsAacTnsLenErr = -156,
    ippStsAacTnsOrderErr = -155,
    ippStsAacTnsCoefResErr = -154,
    ippStsAacTnsCoefErr = -153,
    ippStsAacTnsDirectErr = -152,
    ippStsAacTnsProfileErr = -151,
    ippStsAacErr = -150,
    ippStsAacBitOffsetErr = -149,
    ippStsAacAdtsSyncWordErr = -148,
    ippStsAacSmplRateIdxErr = -147,
    ippStsAacWinLenErr = -146,
    ippStsAacWinGrpErr = -145,
    ippStsAacWinSeqErr = -144,
    ippStsAacComWinErr = -143,
    ippStsAacStereoMaskErr = -142,
    ippStsAacChanErr = -141,
    ippStsAacMonoStereoErr = -140,
    ippStsAacStereoLayerErr = -139,
    ippStsAacMonoLayerErr = -138,
    ippStsAacScalableErr = -137,
    ippStsAacObjTypeErr = -136,
    ippStsAacWinShapeErr = -135,
    ippStsAacPcmModeErr = -134,
    ippStsVLCUsrTblHeaderErr = -133,
    ippStsVLCUsrTblUnsupportedFmtErr = -132,
    ippStsVLCUsrTblEscAlgTypeErr = -131,
    ippStsVLCUsrTblEscCodeLengthErr = -130,
    ippStsVLCUsrTblCodeLengthErr = -129,
    ippStsVLCInternalTblErr = -128,
    ippStsVLCInputDataErr = -127,
    ippStsVLCAACEscCodeLengthErr = -126,
    ippStsNoiseRangeErr = -125,
    ippStsUnderRunErr = -124,
    ippStsPaddingErr = -123,
    ippStsCFBSizeErr = -122,
    ippStsPaddingSchemeErr = -121,
    ippStsInvalidCryptoKeyErr = -120,
    ippStsLengthErr = -119,
    ippStsBadModulusErr = -118,
    ippStsLPCCalcErr = -117,
    ippStsRCCalcErr = -116,
    ippStsIncorrectLSPErr = -115,
    ippStsNoRootFoundErr = -114,
    ippStsJPEG2KBadPassNumber = -113,
    ippStsJPEG2KDamagedCodeBlock = -112,
    ippStsH263CBPYCodeErr = -111,
    ippStsH263MCBPCInterCodeErr = -110,
    ippStsH263MCBPCIntraCodeErr = -109,
    ippStsNotEvenStepErr = -108,
    ippStsHistoNofLevelsErr = -107,
    ippStsLUTNofLevelsErr = -106,
    ippStsMP4BitOffsetErr = -105,
    ippStsMP4QPErr = -104,
    ippStsMP4BlockIdxErr = -103,
    ippStsMP4BlockTypeErr = -102,
    ippStsMP4MVCodeErr = -101,
    ippStsMP4VLCCodeErr = -100,
    ippStsMP4DCCodeErr = -99,
    ippStsMP4FcodeErr = -98,
    ippStsMP4AlignErr = -97,
    ippStsMP4TempDiffErr = -96,
    ippStsMP4BlockSizeErr = -95,
    ippStsMP4ZeroBABErr = -94,
    ippStsMP4PredDirErr = -93,
    ippStsMP4BitsPerPixelErr = -92,
    ippStsMP4VideoCompModeErr = -91,
    ippStsMP4LinearModeErr = -90,
    ippStsH263PredModeErr = -83,
    ippStsH263BlockStepErr = -82,
    ippStsH263MBStepErr = -81,
    ippStsH263FrameWidthErr = -80,
    ippStsH263FrameHeightErr = -79,
    ippStsH263ExpandPelsErr = -78,
    ippStsH263PlaneStepErr = -77,
    ippStsH263QuantErr = -76,
    ippStsH263MVCodeErr = -75,
    ippStsH263VLCCodeErr = -74,
    ippStsH263DCCodeErr = -73,
    ippStsH263ZigzagLenErr = -72,
    ippStsFBankFreqErr = -71,
    ippStsFBankFlagErr = -70,
    ippStsFBankErr = -69,
    ippStsNegOccErr = -67,
    ippStsCdbkFlagErr = -66,
    ippStsSVDCnvgErr = -65,
    ippStsJPEGHuffTableErr = -64,
    ippStsJPEGDCTRangeErr = -63,
    ippStsJPEGOutOfBufErr = -62,
    ippStsDrawTextErr = -61,
    ippStsChannelOrderErr = -60,
    ippStsZeroMaskValuesErr = -59,
    ippStsQuadErr = -58,
    ippStsRectErr = -57,
    ippStsCoeffErr = -56,
    ippStsNoiseValErr = -55,
    ippStsDitherLevelsErr = -54,
    ippStsNumChannelsErr = -53,
    ippStsCOIErr = -52,
    ippStsDivisorErr = -51,
    ippStsAlphaTypeErr = -50,
    ippStsGammaRangeErr = -49,
    ippStsGrayCoefSumErr = -48,
    ippStsChannelErr = -47,
    ippStsToneMagnErr = -46,
    ippStsToneFreqErr = -45,
    ippStsTonePhaseErr = -44,
    ippStsTrnglMagnErr = -43,
    ippStsTrnglFreqErr = -42,
    ippStsTrnglPhaseErr = -41,
    ippStsTrnglAsymErr = -40,
    ippStsHugeWinErr = -39,
    ippStsJaehneErr = -38,
    ippStsStrideErr = -37,
    ippStsEpsValErr = -36,
    ippStsWtOffsetErr = -35,
    ippStsAnchorErr = -34,
    ippStsMaskSizeErr = -33,
    ippStsShiftErr = -32,
    ippStsSampleFactorErr = -31,
    ippStsSamplePhaseErr = -30,
    ippStsFIRMRFactorErr = -29,
    ippStsFIRMRPhaseErr = -28,
    ippStsRelFreqErr = -27,
    ippStsFIRLenErr = -26,
    ippStsIIROrderErr = -25,
    ippStsDlyLineIndexErr = -24,
    ippStsResizeFactorErr = -23,
    ippStsInterpolationErr = -22,
    ippStsMirrorFlipErr = -21,
    ippStsMoment00ZeroErr = -20,
    ippStsThreshNegLevelErr = -19,
    ippStsThresholdErr = -18,
    ippStsContextMatchErr = -17,
    ippStsFftFlagErr = -16,
    ippStsFftOrderErr = -15,
    ippStsStepErr = -14,
    ippStsScaleRangeErr = -13,
    ippStsDataTypeErr = -12,
    ippStsOutOfRangeErr = -11,
    ippStsDivByZeroErr = -10,
    ippStsMemAllocErr = -9,
    ippStsNullPtrErr = -8,
    ippStsRangeErr = -7,
    ippStsSizeErr = -6,
    ippStsBadArgErr = -5,
    ippStsNoMemErr = -4,
    ippStsSAReservedErr3 = -3,
    ippStsErr = -2,
    ippStsSAReservedErr1 = -1,
    ippStsNoErr = 0,
    ippStsNoOperation = 1,
    ippStsMisalignedBuf = 2,
    ippStsSqrtNegArg = 3,
    ippStsInvZero = 4,
    ippStsEvenMedianMaskSize = 5,
    ippStsDivByZero = 6,
    ippStsLnZeroArg = 7,
    ippStsLnNegArg = 8,
    ippStsNanArg = 9,
    ippStsJPEGMarker = 10,
    ippStsResFloor = 11,
    ippStsOverflow = 12,
    ippStsLSFLow = 13,
    ippStsLSFHigh = 14,
    ippStsLSFLowAndHigh = 15,
    ippStsZeroOcc = 16,
    ippStsUnderflow = 17,
    ippStsSingularity = 18,
    ippStsDomain = 19,
    ippStsNonIntelCpu = 20,
    ippStsCpuMismatch = 21,
    ippStsNoIppFunctionFound = 22,
    ippStsDllNotFoundBestUsed = 23,
    ippStsNoOperationInDll = 24,
    ippStsInsufficientEntropy = 25,
    ippStsOvermuchStrings = 26,
    ippStsOverlongString = 27,
    ippStsAffineQuadChanged = 28,
    ippStsWrongIntersectROI = 29,
    ippStsWrongIntersectQuad = 30,
    ippStsSmallerCodebook = 31,
    ippStsSrcSizeLessExpected = 32,
    ippStsDstSizeLessExpected = 33,
    ippStsStreamEnd = 34,
    ippStsDoubleSize = 35,
    ippStsNotSupportedCpu = 36,
    ippStsUnknownCacheSize = 37,
    ippStsSymKernelExpected = 38,
    ippStsEvenMedianWeight = 39,
    ippStsWrongIntersectVOI = 40,
    ippStsI18nMsgCatalogInvalid = 41,
    ippStsI18nGetMessageFail = 42,
    ippStsWaterfall = 43,
    ippStsPrevLibraryUsed = 44,
    ippStsLLADisabled = 45,
    ippStsNoAntialiasing = 46,
    ippStsRepetitiveSrcData = 47,
    ippStsSizeWrn = 48,
    ippStsFeatureNotSupported = 49,
    ippStsUnknownFeature = 50,
    ippStsFeaturesCombination = 51,
    ippStsAccurateModeNotSupported = 52,
}
pub type IppSizeL = Ipp64s;

#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiRectL {
    pub x: IppSizeL,
    pub y: IppSizeL,
    pub width: IppSizeL,
    pub height: IppSizeL,
}
#[test]
fn bindgen_test_layout_IppiRectL() {
    assert_eq!(::std::mem::size_of::<IppiRectL>() , 32usize , concat ! (
               "Size of: " , stringify ! ( IppiRectL ) ));
    assert_eq! (::std::mem::align_of::<IppiRectL>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( IppiRectL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRectL ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRectL ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRectL ) ) . y as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRectL ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRectL ) ) . width as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRectL ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiRectL ) ) . height as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiRectL ) , "::" ,
                stringify ! ( height ) ));
}
impl Clone for IppiRectL {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiPointL {
    pub x: IppSizeL,
    pub y: IppSizeL,
}
#[test]
fn bindgen_test_layout_IppiPointL() {
    assert_eq!(::std::mem::size_of::<IppiPointL>() , 16usize , concat ! (
               "Size of: " , stringify ! ( IppiPointL ) ));
    assert_eq! (::std::mem::align_of::<IppiPointL>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( IppiPointL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiPointL ) ) . x as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiPointL ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiPointL ) ) . y as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiPointL ) , "::" ,
                stringify ! ( y ) ));
}
impl Clone for IppiPointL {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, PartialEq)]
pub struct IppiSizeL {
    pub width: IppSizeL,
    pub height: IppSizeL,
}
#[test]
fn bindgen_test_layout_IppiSizeL() {
    assert_eq!(::std::mem::size_of::<IppiSizeL>() , 16usize , concat ! (
               "Size of: " , stringify ! ( IppiSizeL ) ));
    assert_eq! (::std::mem::align_of::<IppiSizeL>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( IppiSizeL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiSizeL ) ) . width as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiSizeL ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IppiSizeL ) ) . height as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( IppiSizeL ) , "::" ,
                stringify ! ( height ) ));
}
impl Clone for IppiSizeL {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiMorphMode { IPP_MORPH_DEFAULT = 0, IPP_MORPH_MASK_NO_FLIP = 1, }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeSpec {
    _unused: [u8; 0],
}
pub type IppiResizeSpec = ResizeSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterBilateralType_LT {
    _unused: [u8; 0],
}
pub type IppiFilterBilateralSpec_LT = FilterBilateralType_LT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResizeSpec_LT {
    _unused: [u8; 0],
}
pub type IppiResizeSpec_LT = ResizeSpec_LT;
extern "C" {
    pub fn ippMalloc_L(length: IppSizeL) -> *mut ipp_ctypes::c_void;
}
extern "C" {
    pub fn ippGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippGetStatusString(StsCode: IppStatus)
     -> *const ipp_ctypes::c_char;
}
extern "C" {
    pub fn ippGetCpuClocks() -> Ipp64u;
}
extern "C" {
    pub fn ippSetFlushToZero(value: ipp_ctypes::c_int,
                             pUMask: *mut ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippSetDenormAreZeros(value: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippAlignPtr(ptr: *mut ipp_ctypes::c_void,
                       alignBytes: ipp_ctypes::c_int)
     -> *mut ipp_ctypes::c_void;
}
extern "C" {
    pub fn ippMalloc(length: ipp_ctypes::c_int) -> *mut ipp_ctypes::c_void;
}
extern "C" {
    pub fn ippFree(ptr: *mut ipp_ctypes::c_void);
}
extern "C" {
    pub fn ippInit() -> IppStatus;
}
extern "C" {
    pub fn ippGetCpuFreqMhz(pMhz: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippSetNumThreads(numThr: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippGetNumThreads(pNumThr: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippGetMaxCacheSizeB(pSizeByte: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippGetCpuFeatures(pFeaturesMask: *mut Ipp64u,
                             pCpuidInfoRegs: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippGetEnabledCpuFeatures() -> Ipp64u;
}
extern "C" {
    pub fn ippSetCpuFeatures(cpuFeatures: Ipp64u) -> IppStatus;
}
extern "C" {
    pub fn ippGetCacheParams(ppCacheInfo: *mut *mut IppCache) -> IppStatus;
}
extern "C" {
    pub fn ippGetL2CacheSize(pSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr420_HDTV709r6_8u_C3P2R_L(pSrc: *const Ipp8u,
                                                  srcStep: IppSizeL,
                                                  pDstY: *mut Ipp8u,
                                                  dstYStep: IppSizeL,
                                                  pDstCbCr: *mut Ipp8u,
                                                  dstCbCrStep: IppSizeL,
                                                  roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippccGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippiCbYCr422ToBGR_709HDTV_8u_C2C3R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp8u,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToBGR_709HDTV_8u_C2C4R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp8u,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToCbYCr422_709HDTV_8u_C3C2R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp8u,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToCbYCr422_709HDTV_8u_AC4C2R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp8u,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToBGR_709HDTV_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                              srcStep: *mut ipp_ctypes::c_int,
                                              pDst: *mut Ipp8u,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_709HDTV_8u_AC4P3R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut *mut Ipp8u,
                                               dstStep:
                                                   *mut ipp_ctypes::c_int,
                                               roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_709CSC_8u_AC4P3R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut *mut Ipp8u,
                                              dstStep: *mut ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCrCb420_709CSC_8u_AC4P3R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut *mut Ipp8u,
                                              dstStep: *mut ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_709CSC_8u_C3P3R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut *mut Ipp8u,
                                             dstStep: *mut ipp_ctypes::c_int,
                                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCrCb420_709CSC_8u_C3P3R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut *mut Ipp8u,
                                             dstStep: *mut ipp_ctypes::c_int,
                                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_709CSC_8u_C3P2R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDstY: *mut Ipp8u,
                                             dstYStep: ipp_ctypes::c_int,
                                             pDstCbCr: *mut Ipp8u,
                                             dstCbCrStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_709CSC_8u_AC4P2R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDstY: *mut Ipp8u,
                                              dstYStep: ipp_ctypes::c_int,
                                              pDstCbCr: *mut Ipp8u,
                                              dstCbCrStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToBGR_709CSC_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                             srcStep: *mut ipp_ctypes::c_int,
                                             pDst: *mut Ipp8u,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToBGR_709CSC_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToBGR_709CSC_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr420_8u_C3P2R(pRGB: *const Ipp8u,
                                      rgbStep: ipp_ctypes::c_int,
                                      pY: *mut Ipp8u,
                                      YStep: ipp_ctypes::c_int,
                                      pCbCr: *mut Ipp8u,
                                      CbCrStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr420_8u_C4P2R(pRGB: *const Ipp8u,
                                      rgbStep: ipp_ctypes::c_int,
                                      pY: *mut Ipp8u,
                                      YStep: ipp_ctypes::c_int,
                                      pCbCr: *mut Ipp8u,
                                      CbCrStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_8u_C3P2R(pRGB: *const Ipp8u,
                                      rgbStep: ipp_ctypes::c_int,
                                      pY: *mut Ipp8u,
                                      YStep: ipp_ctypes::c_int,
                                      pCbCr: *mut Ipp8u,
                                      CbCrStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_8u_AC4P2R(pRGB: *const Ipp8u,
                                       rgbStep: ipp_ctypes::c_int,
                                       pY: *mut Ipp8u,
                                       YStep: ipp_ctypes::c_int,
                                       pCbCr: *mut Ipp8u,
                                       CbCrStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToRGB_8u_P2C3R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCbCr: *const Ipp8u,
                                      srcCbCrStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToRGB_8u_P2C4R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCbCr: *const Ipp8u,
                                      srcCbCrStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToBGR_8u_P2C3R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCbCr: *const Ipp8u,
                                      srcCbCrStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToBGR_8u_P2C4R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCbCr: *const Ipp8u,
                                      srcCbCrStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToCbYCr422_8u_AC4C2R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToBGR_8u_C2C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToBGR_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToBGR_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToRGB_8u_C2C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToCbYCr422Gamma_8u_C3C2R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToCbYCr422_8u_C3C2R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr422_8u_C3C2R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToRGB_8u_C2C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToRGB_8u_C2C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToRGB_8u_C2P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToBGR_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr420_8u_C3P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: *mut ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCrCb422_8u_C3C2R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToRGB_8u_C2C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToBGR_8u_C2C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToRGB_8u_C2C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToBGR_8u_C2C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCrCb422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToRGB_8u_C2P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToBGR_8u_C2C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToBGR_8u_C2C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToBGR_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToBGR_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr411_8u_C3P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: *mut ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr411_8u_AC4P3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut *mut Ipp8u,
                                       dstStep: *mut ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr422_8u_C3P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: *mut ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr422_8u_AC4P3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut *mut Ipp8u,
                                       dstStep: *mut ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_8u_C3P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: *mut ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr420_8u_AC4P3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut *mut Ipp8u,
                                       dstStep: *mut ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr422_8u_C3C2R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCbCr422_8u_AC4C2R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCrCb420_8u_C3P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: *mut ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCrCb420_8u_AC4P3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut *mut Ipp8u,
                                       dstStep: *mut ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCrCb420_8u_AC4P3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut *mut Ipp8u,
                                       dstStep: *mut ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToBGR_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToRGB_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToRGB_8u_P2C4R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCrCb: *const Ipp8u,
                                      srcCrCbStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToBGR_8u_P2C4R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCrCb: *const Ipp8u,
                                      srcCrCbStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToRGB_8u_P2C3R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCrCb: *const Ipp8u,
                                      srcCrCbStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToBGR_8u_P2C3R(pSrcY: *const Ipp8u,
                                      srcYStep: ipp_ctypes::c_int,
                                      pSrcCrCb: *const Ipp8u,
                                      srcCrCbStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr_8u_AC4P3R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr_8u_C3P3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToRGB_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                 srcStep: *mut ipp_ctypes::c_int,
                                 pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToCbYCr422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToBGR_Filter_8u_P3C4R(pSrc: *mut *const Ipp8u,
                                             srcStep: *mut ipp_ctypes::c_int,
                                             pDst: *mut Ipp8u,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr422_8u_P2C2R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr422_Filter_8u_P2C2R(pSrcY: *const Ipp8u,
                                                  srcYStep: ipp_ctypes::c_int,
                                                  pSrcCbCr: *const Ipp8u,
                                                  srcCbCrStep:
                                                      ipp_ctypes::c_int,
                                                  pDst: *mut Ipp8u,
                                                  dstStep: ipp_ctypes::c_int,
                                                  roiSize: IppiSize,
                                                  layout: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCrCb420_Filter_8u_P2P3R(pSrcY: *const Ipp8u,
                                                  srcYStep: ipp_ctypes::c_int,
                                                  pSrcCbCr: *const Ipp8u,
                                                  srcCbCrStep:
                                                      ipp_ctypes::c_int,
                                                  pDst: *mut *mut Ipp8u,
                                                  dstStep:
                                                      *mut ipp_ctypes::c_int,
                                                  roiSize: IppiSize,
                                                  layout: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCrCb420_8u_P2P3R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr420_8u_C2P2R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCrCb420_8u_C2P2R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCrCb: *mut Ipp8u,
                                           dstUVStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCbCr420_8u_C2P2R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCrCb420_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCrCb420_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToCbYCr422_8u_C2R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCbCr422_8u_C2R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToCbYCr422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToYCbCr422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr422_8u_C3P3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut *mut Ipp8u,
                                      dstStep: *mut ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToBGR_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                      srcStep: *mut ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToYCbCr420_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToCbYCr422_8u_P2C2R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422_8u_C2P3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: *mut ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToYCbCr422_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCbCr422_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr420_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCbCr420_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToYCbCr420_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr411_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCbCr411_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb422ToYCbCr411_8u_C2P3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr420_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                 srcStep: *mut ipp_ctypes::c_int,
                                 pDstY: *mut Ipp8u,
                                 dstYStep: ipp_ctypes::c_int,
                                 pDstCbCr: *mut Ipp8u,
                                 dstCbCrStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr411_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr411_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToYCbCr411_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr420_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr422_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToYCbCr422_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr422_Filter_8u_P3R(pSrc: *mut *const Ipp8u,
                                                srcStep:
                                                    *mut ipp_ctypes::c_int,
                                                pDst: *mut *mut Ipp8u,
                                                dstStep:
                                                    *mut ipp_ctypes::c_int,
                                                roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCrCb420ToYCbCr422_Filter_8u_P3R(pSrc: *mut *const Ipp8u,
                                                srcStep:
                                                    *mut ipp_ctypes::c_int,
                                                pDst: *mut *mut Ipp8u,
                                                dstStep:
                                                    *mut ipp_ctypes::c_int,
                                                roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr422_Filter_8u_P2P3R(pSrcY: *const Ipp8u,
                                                  srcYStep: ipp_ctypes::c_int,
                                                  pSrcCbCr: *const Ipp8u,
                                                  srcCbCrStep:
                                                      ipp_ctypes::c_int,
                                                  pDst: *mut *mut Ipp8u,
                                                  dstStep:
                                                      *mut ipp_ctypes::c_int,
                                                  roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr422_8u_P2P3R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420_8u_P2P3R(pSrcY: *const Ipp8u,
                                 srcYStep: ipp_ctypes::c_int,
                                 pSrcCbCr: *const Ipp8u,
                                 srcCbCrStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: *mut ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToYCbCr411_8u_P2P3R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCrCb422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr422_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCrCb422_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr420_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr420_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411_8u_P3P2R(pSrc: *mut *const Ipp8u,
                                 srcStep: *mut ipp_ctypes::c_int,
                                 pDstY: *mut Ipp8u,
                                 dstYStep: ipp_ctypes::c_int,
                                 pDstCbCr: *mut Ipp8u,
                                 dstCbCrStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr422_8u_P2C2R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr422_8u_P2P3R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCrCb420_8u_P2P3R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411ToYCbCr420_8u_P2P3R(pSrcY: *const Ipp8u,
                                           srcYStep: ipp_ctypes::c_int,
                                           pSrcCbCr: *const Ipp8u,
                                           srcCbCrStep: ipp_ctypes::c_int,
                                           pDst: *mut *mut Ipp8u,
                                           dstStep: *mut ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411_8u_P2P3R(pSrcY: *const Ipp8u,
                                 srcYStep: ipp_ctypes::c_int,
                                 pSrcCbCr: *const Ipp8u,
                                 srcCbCrStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: *mut ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr411_8u_C2P2R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDstY: *mut Ipp8u,
                                           dstYStep: ipp_ctypes::c_int,
                                           pDstCbCr: *mut Ipp8u,
                                           dstCbCrStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCbCr411_8u_P3R(pSrc: *mut *const Ipp8u,
                                         srcStep: *mut ipp_ctypes::c_int,
                                         pDst: *mut *mut Ipp8u,
                                         dstStep: *mut ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCrCb422_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                           srcStep: *mut ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToYCrCb422_8u_C2R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422ToGray_8u_C2C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr_8u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr_8u_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCbCr_8u_P3R(pSrc: *mut *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToRGB_8u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCrToRGB_8u_P3R(pSrc: *mut *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUVToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYUVToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYUVToRGB_8u_C3C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, aval: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV_8u_P3R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYUVToRGB_8u_P3R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV_8u_C3P3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUVToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYUV420_8u_AC4P3R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut *mut Ipp8u,
                                     dstStep: *mut ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV_8u_AC4P4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV420ToRGB_8u_P3AC4R(pSrc: *mut *const Ipp8u,
                                     srcStep: *mut ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV422ToRGB_8u_P3AC4R(pSrc: *mut *const Ipp8u,
                                     srcStep: *mut ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV422_8u_C3P3R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut *mut Ipp8u,
                                    dstStep: *mut ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV422ToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                    srcStep: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV422_8u_P3R(pSrc: *mut *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: *mut ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV422ToRGB_8u_P3R(pSrc: *mut *const Ipp8u,
                                  srcStep: *mut ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV420_8u_C3P3R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut *mut Ipp8u,
                                    dstStep: *mut ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV420ToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                    srcStep: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV420ToBGR_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                    srcStep: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV420_8u_P3R(pSrc: *mut *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: *mut ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV420ToRGB_8u_P3R(pSrc: *mut *const Ipp8u,
                                  srcStep: *mut ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV422_8u_C3C2R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV422ToRGB_8u_C2C3R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV422_8u_P3(pSrc: *mut *const Ipp8u,
                                 pDst: *mut *mut Ipp8u, imgSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYUV422ToRGB_8u_P3(pSrc: *mut *const Ipp8u,
                                 pDst: *mut *mut Ipp8u, imgSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV422_8u_C3P3(pSrc: *const Ipp8u, pDst: *mut *mut Ipp8u,
                                   imgSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV422ToRGB_8u_P3C3(pSrc: *mut *const Ipp8u, pDst: *mut Ipp8u,
                                   imgSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV420_8u_C3P3(pSrc: *const Ipp8u, pDst: *mut *mut Ipp8u,
                                   imgSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYUV420ToRGB_8u_P3C3(pSrc: *mut *const Ipp8u, pDst: *mut Ipp8u,
                                   imgSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYUV420_8u_P3(pSrc: *mut *const Ipp8u,
                                 pDst: *mut *mut Ipp8u, imgSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYUV420ToRGB_8u_P3(pSrc: *mut *const Ipp8u,
                                 pDst: *mut *mut Ipp8u, imgSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToBGR_16s8u_P3C3R(pYCC: *mut *const Ipp16s,
                                      yccStep: ipp_ctypes::c_int,
                                      pBGR: *mut Ipp8u,
                                      bgrStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCoCg_8u16s_C3P3R(pBGR: *const Ipp8u,
                                      bgrStep: ipp_ctypes::c_int,
                                      pYCC: *mut *mut Ipp16s,
                                      yccStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToBGR_16s8u_P3C4R(pYCC: *mut *const Ipp16s,
                                      yccStep: ipp_ctypes::c_int,
                                      pBGR: *mut Ipp8u,
                                      bgrStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCoCg_8u16s_C4P3R(pBGR: *const Ipp8u,
                                      bgrStep: ipp_ctypes::c_int,
                                      pYCC: *mut *mut Ipp16s,
                                      yccStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_16s_P3C3R(pYCC: *mut *const Ipp16s,
                                     yccStep: ipp_ctypes::c_int,
                                     pBGR: *mut Ipp16s,
                                     bgrStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_16s_C3P3R(pBGR: *const Ipp16s,
                                     bgrStep: ipp_ctypes::c_int,
                                     pYCC: *mut *mut Ipp16s,
                                     yccStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_16s_P3C4R(pYCC: *mut *const Ipp16s,
                                     yccStep: ipp_ctypes::c_int,
                                     pBGR: *mut Ipp16s,
                                     bgrStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, aval: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_16s_C4P3R(pBGR: *const Ipp16s,
                                     bgrStep: ipp_ctypes::c_int,
                                     pYCC: *mut *mut Ipp16s,
                                     yccStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_32s16s_P3C3R(pYCC: *mut *const Ipp32s,
                                        yccStep: ipp_ctypes::c_int,
                                        pBGR: *mut Ipp16s,
                                        bgrStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_16s32s_C3P3R(pBGR: *const Ipp16s,
                                        bgrStep: ipp_ctypes::c_int,
                                        pYCC: *mut *mut Ipp32s,
                                        yccStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_32s16s_P3C4R(pYCC: *mut *const Ipp32s,
                                        yccStep: ipp_ctypes::c_int,
                                        pBGR: *mut Ipp16s,
                                        bgrStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, aval: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_16s32s_C4P3R(pBGR: *const Ipp16s,
                                        bgrStep: ipp_ctypes::c_int,
                                        pYCC: *mut *mut Ipp32s,
                                        yccStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToBGR_Rev_16s8u_P3C3R(pYCC: *mut *const Ipp16s,
                                          yccStep: ipp_ctypes::c_int,
                                          pBGR: *mut Ipp8u,
                                          bgrStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCoCg_Rev_8u16s_C3P3R(pBGR: *const Ipp8u,
                                          bgrStep: ipp_ctypes::c_int,
                                          pYCC: *mut *mut Ipp16s,
                                          yccStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToBGR_Rev_16s8u_P3C4R(pYCC: *mut *const Ipp16s,
                                          yccStep: ipp_ctypes::c_int,
                                          pBGR: *mut Ipp8u,
                                          bgrStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToYCoCg_Rev_8u16s_C4P3R(pBGR: *const Ipp8u,
                                          bgrStep: ipp_ctypes::c_int,
                                          pYCC: *mut *mut Ipp16s,
                                          yccStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_Rev_16s_P3C3R(pYCC: *mut *const Ipp16s,
                                         yccStep: ipp_ctypes::c_int,
                                         pBGR: *mut Ipp16s,
                                         bgrStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_Rev_16s_C3P3R(pBGR: *const Ipp16s,
                                         bgrStep: ipp_ctypes::c_int,
                                         pYCC: *mut *mut Ipp16s,
                                         yccStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_Rev_16s_P3C4R(pYCC: *mut *const Ipp16s,
                                         yccStep: ipp_ctypes::c_int,
                                         pBGR: *mut Ipp16s,
                                         bgrStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize, aval: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_Rev_16s_C4P3R(pBGR: *const Ipp16s,
                                         bgrStep: ipp_ctypes::c_int,
                                         pYCC: *mut *mut Ipp16s,
                                         yccStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_Rev_16s32s_C3P3R(pBGR: *const Ipp16s,
                                            bgrStep: ipp_ctypes::c_int,
                                            pYCC: *mut *mut Ipp32s,
                                            yccStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_Rev_32s16s_P3C4R(pYCC: *mut *const Ipp32s,
                                            yccStep: ipp_ctypes::c_int,
                                            pBGR: *mut Ipp16s,
                                            bgrStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize, aval: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToSBGR_Rev_32s16s_P3C3R(pYCC: *mut *const Ipp32s,
                                            yccStep: ipp_ctypes::c_int,
                                            pBGR: *mut Ipp16s,
                                            bgrStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSBGRToYCoCg_Rev_16s32s_C4P3R(pBGR: *const Ipp16s,
                                            bgrStep: ipp_ctypes::c_int,
                                            pYCC: *mut *mut Ipp32s,
                                            yccStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_8u_C3C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_16u_C3C1R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_16s_C3C1R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_32f_C3C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_8u_AC4C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_16u_AC4C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_16s_AC4C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToGray_32f_AC4C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToRGB_8u_C1C3R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToRGB_16u_C1C3R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToRGB_32f_C1C3R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToRGB_8u_C1C4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, aval: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToRGB_16u_C1C4R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, aval: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToRGB_32f_C1C4R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, aval: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_8u_C3C1R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coeffs: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_16u_C3C1R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, coeffs: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_16s_C3C1R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, coeffs: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_32f_C3C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, coeffs: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_64f_C3C1R(pSrc: *const Ipp64f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp64f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, coeffs: *const Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_8u_AC4C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, coeffs: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_16u_AC4C1R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      coeffs: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_16s_AC4C1R(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      coeffs: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_32f_AC4C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      coeffs: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiColorToGray_64f_AC4C1R(pSrc: *const Ipp64f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp64f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      coeffs: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHLS_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToRGB_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_AP4R(pSrc: *mut *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pDst: *mut *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_AP4C4R(pSrc: *mut *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_AC4P4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_P3R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToHLS_8u_C3P3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToBGR_8u_AP4R(pSrc: *mut *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pDst: *mut *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToBGR_8u_AP4C4R(pSrc: *mut *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToBGR_8u_AC4P4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToBGR_8u_P3R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToBGR_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHLSToBGR_8u_C3P3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHSV_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHSVToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHSV_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHSVToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHSV_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHSVToRGB_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToHSV_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiHSVToRGB_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCC_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCCToRGB_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToXYZ_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXYZToRGB_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToLUV_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToBGR_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToLUV_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToBGR_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLUV_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLUVToRGB_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToLab_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLab_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLabToBGR_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLabToRGB_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToLab_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToLab_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLabToBGR_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLabToRGB_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiBGRToLab_8u16u_C3R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLabToBGR_16u8u_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_8u1u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstBitOffset: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   noise: ipp_ctypes::c_int,
                                   seed: ipp_ctypes::c_int,
                                   dtype: IppiDitherType, threshold: Ipp8u,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                 dtype: IppiDitherType,
                                 levels: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_8u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                 dtype: IppiDitherType,
                                 levels: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_8u_C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                 dtype: IppiDitherType,
                                 levels: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_8u_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u_C4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u_AC4R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   noise: ipp_ctypes::c_int,
                                   dtype: IppiDitherType,
                                   levels: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u8u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u8u_C3R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u8u_C4R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16u8u_AC4R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s_C1R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s_C3R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s_C4R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, noise: ipp_ctypes::c_int,
                                  dtype: IppiDitherType,
                                  levels: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s_AC4R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   noise: ipp_ctypes::c_int,
                                   dtype: IppiDitherType,
                                   levels: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s8u_C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s8u_C3R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s8u_C4R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_16s8u_AC4R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f8u_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f8u_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f8u_C4R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    noise: ipp_ctypes::c_int,
                                    dtype: IppiDitherType,
                                    levels: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f8u_AC4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16u_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16u_C3R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16u_C4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16u_AC4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      noise: ipp_ctypes::c_int,
                                      dtype: IppiDitherType,
                                      levels: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16s_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16s_C3R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16s_C4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     noise: ipp_ctypes::c_int,
                                     dtype: IppiDitherType,
                                     levels: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBits_32f16s_AC4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      noise: ipp_ctypes::c_int,
                                      dtype: IppiDitherType,
                                      levels: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiReduceBitsGetBufferSize(ippChan: IppChannels,
                                       roiSize: IppiSize,
                                       noise: ipp_ctypes::c_int,
                                       dtype: IppiDitherType,
                                       pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_8u_C3R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_8u_AC4R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_8u_P3R(pSrc: *mut *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16u_C3R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16u_AC4R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16u_P3R(pSrc: *mut *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16s_C3R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16s_AC4R(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16s_P3R(pSrc: *mut *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_C3R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  twist: *mut [Ipp32f; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_AC4R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   twist: *mut [Ipp32f; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_P3R(pSrc: *mut *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  twist: *mut [Ipp32f; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_8u_C3IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_8u_IP3R(pSrcDst: *mut *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16u_C3IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16u_IP3R(pSrcDst: *mut *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16s_C3IR(pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist32f_16s_IP3R(pSrcDst: *mut *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_C3IR(pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   twist: *mut [Ipp32f; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    twist: *mut [Ipp32f; 4usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_IP3R(pSrcDst: *mut *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   twist: *mut [Ipp32f; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiColorTwist_32f_C4R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  twist: *mut [Ipp32f; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_8u_P3R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_16u_P3R(pSrc: *mut *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pDst: *mut *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_32f_P3R(pSrc: *mut *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pDst: *mut *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, vMin: Ipp32f,
                                 vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_8u_P3R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_16u_P3R(pSrc: *mut *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pDst: *mut *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_32f_P3R(pSrc: *mut *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pDst: *mut *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, vMin: Ipp32f,
                                 vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_8u_IP3R(pSrcDst: *mut *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_8u_C3IR(pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_8u_IP3R(pSrcDst: *mut *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_8u_C3IR(pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_16u_IP3R(pSrcDst: *mut *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_16u_C3IR(pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_16u_IP3R(pSrcDst: *mut *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_16u_C3IR(pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_32f_IP3R(pSrcDst: *mut *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, vMin: Ipp32f,
                                 vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_32f_C3IR(pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, vMin: Ipp32f,
                                 vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaFwd_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, vMin: Ipp32f,
                                  vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_32f_IP3R(pSrcDst: *mut *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, vMin: Ipp32f,
                                 vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_32f_C3IR(pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, vMin: Ipp32f,
                                 vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGammaInv_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, vMin: Ipp32f,
                                  vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiToneMapLinear_32f8u_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiToneMapMean_32f8u_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420To411_8u_P3R(pSrc: *mut *const Ipp8u,
                                    srcStep: *mut ipp_ctypes::c_int,
                                    pDst: *mut *mut Ipp8u,
                                    dstStep: *mut ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr411To420_8u_P3R(pSrc: *mut *const Ipp8u,
                                    srcStep: *mut ipp_ctypes::c_int,
                                    pDst: *mut *mut Ipp8u,
                                    dstStep: *mut ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420To1620_8u_P3R(pSrc: *mut *const Ipp8u,
                                     srcStep: *mut ipp_ctypes::c_int,
                                     pDst: *mut *mut Ipp8u,
                                     dstStep: *mut ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr1620To420_8u_P3R(pSrc: *mut *const Ipp8u,
                                     srcStep: *mut ipp_ctypes::c_int,
                                     pDst: *mut *mut Ipp8u,
                                     dstStep: *mut ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IppiBayerGrid {
    ippiBayerBGGR = 0,
    ippiBayerRGGB = 1,
    ippiBayerGBRG = 2,
    ippiBayerGRBG = 3,
}
extern "C" {
    pub fn ippiCFAToRGB_8u_C1C3R(pSrc: *const Ipp8u, srcRoi: IppiRect,
                                 srcSize: IppiSize,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 grid: IppiBayerGrid,
                                 interpolation: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCFAToRGB_16u_C1C3R(pSrc: *const Ipp16u, srcRoi: IppiRect,
                                  srcSize: IppiSize,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  grid: IppiBayerGrid,
                                  interpolation: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCbYCr422ToYCbCr420_Interlace_8u_C2P3R(pSrc: *const Ipp8u,
                                                     srcStep:
                                                         ipp_ctypes::c_int,
                                                     pDst: *mut *mut Ipp8u,
                                                     dstStep:
                                                         *mut ipp_ctypes::c_int,
                                                     roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr422To420_Interlace_8u_P3R(pSrc: *mut *const Ipp8u,
                                              srcStep: *mut ipp_ctypes::c_int,
                                              pDst: *mut *mut Ipp8u,
                                              dstStep: *mut ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420ToCbYCr422_Interlace_8u_P3C2R(pSrc: *mut *const Ipp8u,
                                                     srcStep:
                                                         *mut ipp_ctypes::c_int,
                                                     pDst: *mut Ipp8u,
                                                     dstStep:
                                                         ipp_ctypes::c_int,
                                                     roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCbCr420To422_Interlace_8u_P3R(pSrc: *mut *const Ipp8u,
                                              srcStep: *mut ipp_ctypes::c_int,
                                              pDst: *mut *mut Ipp8u,
                                              dstStep: *mut ipp_ctypes::c_int,
                                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDemosaicAHD_8u_C1C3R(pSrc: *const Ipp8u, srcRoi: IppiRect,
                                    srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    grid: IppiBayerGrid, pTmp: *mut Ipp8u,
                                    tmpStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDemosaicAHD_16u_C1C3R(pSrc: *const Ipp16u, srcRoi: IppiRect,
                                     srcSize: IppiSize,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     grid: IppiBayerGrid, pTmp: *mut Ipp16u,
                                     tmpStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRGBToYCoCg_8u_C3P3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiYCoCgToRGB_8u_P3C3R(pSrc: *mut *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippdcGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippsMTFInit_8u(pMTFState: *mut IppMTFState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsMTFGetSize_8u(pMTFStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMTFFwd_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                         len: ipp_ctypes::c_int,
                         pMTFState: *mut IppMTFState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsMTFInv_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                         len: ipp_ctypes::c_int,
                         pMTFState: *mut IppMTFState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsBWTFwdGetSize_8u(wndSize: ipp_ctypes::c_int,
                                pBWTFwdBuffSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsBWTFwd_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                         len: ipp_ctypes::c_int,
                         index: *mut ipp_ctypes::c_int,
                         pBWTFwdBuff: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsBWTFwdGetBufSize_SelectSort_8u(wndSize: Ipp32u,
                                              pBWTFwdBufSize: *mut Ipp32u,
                                              sortAlgorithmHint:
                                                  IppBWTSortAlgorithmHint)
     -> IppStatus;
}
extern "C" {
    pub fn ippsBWTFwd_SelectSort_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                                    len: Ipp32u, index: *mut Ipp32u,
                                    pBWTFwdBuf: *mut Ipp8u,
                                    sortAlgorithmHint:
                                        IppBWTSortAlgorithmHint) -> IppStatus;
}
extern "C" {
    pub fn ippsBWTInvGetSize_8u(wndSize: ipp_ctypes::c_int,
                                pBWTInvBuffSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsBWTInv_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                         len: ipp_ctypes::c_int, index: ipp_ctypes::c_int,
                         pBWTInvBuff: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsLZSSGetSize_8u(pLZSSStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeLZSSInit_8u(pLZSSState: *mut IppLZSSState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeLZSS_8u(ppSrc: *mut *mut Ipp8u,
                             pSrcLen: *mut ipp_ctypes::c_int,
                             ppDst: *mut *mut Ipp8u,
                             pDstLen: *mut ipp_ctypes::c_int,
                             pLZSSState: *mut IppLZSSState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeLZSSFlush_8u(ppDst: *mut *mut Ipp8u,
                                  pDstLen: *mut ipp_ctypes::c_int,
                                  pLZSSState: *mut IppLZSSState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeLZSSInit_8u(pLZSSState: *mut IppLZSSState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeLZSS_8u(ppSrc: *mut *mut Ipp8u,
                             pSrcLen: *mut ipp_ctypes::c_int,
                             ppDst: *mut *mut Ipp8u,
                             pDstLen: *mut ipp_ctypes::c_int,
                             pLZSSState: *mut IppLZSSState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsAdler32_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                          pAdler32: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsCRC32_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                        pCRC32: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsCRC32C_8u(pSrc: *const Ipp8u, srcLen: Ipp32u,
                         pCRC32C: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsInflateBuildHuffTable(pCodeLens: *const Ipp16u,
                                     nLitCodeLens: ipp_ctypes::c_uint,
                                     nDistCodeLens: ipp_ctypes::c_uint,
                                     pIppInflateState: *mut IppInflateState)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInflate_8u(ppSrc: *mut *mut Ipp8u,
                          pSrcLen: *mut ipp_ctypes::c_uint,
                          pCode: *mut Ipp32u,
                          pCodeLenBits: *mut ipp_ctypes::c_uint,
                          winIdx: ipp_ctypes::c_uint, ppDst: *mut *mut Ipp8u,
                          pDstLen: *mut ipp_ctypes::c_uint,
                          dstIdx: ipp_ctypes::c_uint,
                          pMode: *mut IppInflateMode,
                          pIppInflateState: *mut IppInflateState)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77_8u(ppSrc: *mut *const Ipp8u, pSrcLen: *mut Ipp32u,
                              pSrcIdx: *mut Ipp32u, pWindow: *const Ipp8u,
                              winSize: Ipp32u, pHashHead: *mut Ipp32s,
                              pHashPrev: *mut Ipp32s, hashSize: Ipp32u,
                              pLitFreqTable: *mut IppDeflateFreqTable,
                              pDistFreqTable: *mut IppDeflateFreqTable,
                              pLitDst: *mut Ipp8u, pDistDst: *mut Ipp16u,
                              pDstLen: *mut Ipp32u,
                              comprLevel: ipp_ctypes::c_int,
                              flush: IppLZ77Flush) -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77Fast_8u(ppSrc: *mut *const Ipp8u,
                                  pSrcLen: *mut Ipp32u, pSrcIdx: *mut Ipp32u,
                                  pWindow: *const Ipp8u, winSize: Ipp32u,
                                  pHashHead: *mut Ipp32s,
                                  pHashPrev: *mut Ipp32s, hashSize: Ipp32u,
                                  pLitFreqTable: *mut IppDeflateFreqTable,
                                  pDistFreqTable: *mut IppDeflateFreqTable,
                                  pLitDst: *mut Ipp8u, pDistDst: *mut Ipp16u,
                                  pDstLen: *mut Ipp32u,
                                  pVecMatch: *mut ipp_ctypes::c_int,
                                  flush: IppLZ77Flush) -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77Fastest_8u(ppSrc: *mut *const Ipp8u,
                                     pSrcLen: *mut Ipp32u,
                                     pSrcIdx: *mut Ipp32u,
                                     pWindow: *const Ipp8u, winSize: Ipp32u,
                                     pHashHead: *mut Ipp32s, hashSize: Ipp32u,
                                     pCode: *mut Ipp16u,
                                     pCodeLenBits: *mut Ipp32u,
                                     pDst: *mut Ipp8u, dstLen: Ipp32u,
                                     pDstIdx: *mut Ipp32u,
                                     pLitHuffCodes: *mut IppDeflateHuffCode,
                                     pDistHuffCodes: *mut IppDeflateHuffCode,
                                     flush: IppLZ77Flush) -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77FastestPrecompHeader_8u(ppSrc: *mut *const Ipp8u,
                                                  pSrcLen: *mut Ipp32u,
                                                  pSrcIdx: *mut Ipp32u,
                                                  pWindow: *const Ipp8u,
                                                  winSize: Ipp32u,
                                                  pHashHead: *mut Ipp32s,
                                                  hashSize: Ipp32u,
                                                  pCode: *mut Ipp16u,
                                                  pCodeLenBits: *mut Ipp32u,
                                                  pDst: *mut Ipp8u,
                                                  dstLen: Ipp32u,
                                                  pDstIdx: *mut Ipp32u,
                                                  pLitHuffCodes:
                                                      *mut IppDeflateHuffCode,
                                                  pDistHuffCodes:
                                                      *mut IppDeflateHuffCode,
                                                  pHeaderCodeLens:
                                                      *const Ipp8u,
                                                  numBitsHeader:
                                                      ipp_ctypes::c_int,
                                                  flush: IppLZ77Flush)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77Slow_8u(ppSrc: *mut *const Ipp8u,
                                  pSrcLen: *mut Ipp32u, pSrcIdx: *mut Ipp32u,
                                  pWindow: *const Ipp8u, winSize: Ipp32u,
                                  pHashHead: *mut Ipp32s,
                                  pHashPrev: *mut Ipp32s, hashSize: Ipp32u,
                                  pLitFreqTable: *mut IppDeflateFreqTable,
                                  pDistFreqTable: *mut IppDeflateFreqTable,
                                  pLitDst: *mut Ipp8u, pDistDst: *mut Ipp16u,
                                  pDstLen: *mut Ipp32u,
                                  pVecMatch: *mut ipp_ctypes::c_int,
                                  flush: IppLZ77Flush) -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77FastestGetStat_8u(ppSrc: *mut *const Ipp8u,
                                            pSrcLen: *mut Ipp32u,
                                            pSrcIdx: *mut Ipp32u,
                                            pWindow: *const Ipp8u,
                                            winSize: Ipp32u,
                                            pHashHead: *mut Ipp32s,
                                            hashSize: Ipp32u,
                                            pLitStat: *mut ipp_ctypes::c_int,
                                            pDistStat: *mut ipp_ctypes::c_int,
                                            flush: IppLZ77Flush) -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77FastestGenHuffTable_8u(pLitStat:
                                                     *const ipp_ctypes::c_int,
                                                 pDistStat:
                                                     *const ipp_ctypes::c_int,
                                                 pLitCodeTable:
                                                     *mut IppDeflateHuffCode,
                                                 pDistCodeTable:
                                                     *mut IppDeflateHuffCode)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateLZ77FastestGenHeader_8u(pLitCodeTable:
                                                  *const IppDeflateHuffCode,
                                              pDistCodeTable:
                                                  *const IppDeflateHuffCode,
                                              pDstHeader: *mut Ipp8u,
                                              pDstLen: *mut ipp_ctypes::c_int,
                                              pDstBits:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateHuff_8u(pLitSrc: *const Ipp8u, pDistSrc: *const Ipp16u,
                              srcLen: Ipp32u, pCode: *mut Ipp16u,
                              pCodeLenBits: *mut Ipp32u,
                              pLitHuffCodes: *mut IppDeflateHuffCode,
                              pDistHuffCodes: *mut IppDeflateHuffCode,
                              pDst: *mut Ipp8u, pDstIdx: *mut Ipp32u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateDictionarySet_8u(pDictSrc: *const Ipp8u,
                                       dictLen: Ipp32u,
                                       pHashHeadDst: *mut Ipp32s,
                                       hashSize: Ipp32u,
                                       pHashPrevDst: *mut Ipp32s,
                                       pWindowDst: *mut Ipp8u,
                                       winSize: Ipp32u,
                                       comprLevel: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDeflateUpdateHash_8u(pSrc: *const Ipp8u, srcIdx: Ipp32u,
                                    srcLen: Ipp32u, pHashHeadDst: *mut Ipp32s,
                                    hashSize: Ipp32u,
                                    pHashPrevDst: *mut Ipp32s,
                                    winSize: Ipp32u,
                                    comprLevel: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRLEGetSize_BZ2_8u(pRLEStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeRLEInit_BZ2_8u(pRLEState: *mut IppRLEState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeRLE_BZ2_8u(ppSrc: *mut *mut Ipp8u,
                                pSrcLen: *mut ipp_ctypes::c_int,
                                pDst: *mut Ipp8u,
                                pDstLen: *mut ipp_ctypes::c_int,
                                pRLEState: *mut IppRLEState_BZ2) -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeRLEFlush_BZ2_8u(pDst: *mut Ipp8u,
                                     pDstLen: *mut ipp_ctypes::c_int,
                                     pRLEState: *mut IppRLEState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeRLEStateInit_BZ2_8u(pRLEState: *mut IppRLEState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeRLEState_BZ2_8u(ppSrc: *mut *mut Ipp8u,
                                     pSrcLen: *mut Ipp32u,
                                     ppDst: *mut *mut Ipp8u,
                                     pDstLen: *mut Ipp32u,
                                     pRLEState: *mut IppRLEState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeRLEStateFlush_BZ2_8u(pRLEState: *mut IppRLEState_BZ2,
                                          ppDst: *mut *mut Ipp8u,
                                          pDstLen: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsRLEGetInUseTable_8u(inUse: *mut Ipp8u,
                                   pRLEState: *mut IppRLEState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeZ1Z2_BZ2_8u16u(ppSrc: *mut *mut Ipp8u,
                                    pSrcLen: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    pDstLen: *mut ipp_ctypes::c_int,
                                    freqTable: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeZ1Z2_BZ2_16u8u(ppSrc: *mut *mut Ipp16u,
                                    pSrcLen: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    pDstLen: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsReduceDictionary_8u_I(inUse: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                     srcDstLen: ipp_ctypes::c_int,
                                     pSizeDictionary: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpandDictionary_8u_I(inUse: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                     srcDstLen: ipp_ctypes::c_int,
                                     sizeDictionary: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCRC32_BZ2_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                            pCRC32: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeHuffGetSize_BZ2_16u8u(wndSize: ipp_ctypes::c_int,
                                           pEncodeHuffStateSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeHuffInit_BZ2_16u8u(sizeDictionary: ipp_ctypes::c_int,
                                        freqTable: *const ipp_ctypes::c_int,
                                        pSrc: *const Ipp16u,
                                        srcLen: ipp_ctypes::c_int,
                                        pEncodeHuffState:
                                            *mut IppEncodeHuffState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPackHuffContext_BZ2_16u8u(pCode: *mut Ipp32u,
                                         pCodeLenBits: *mut ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         pDstLen: *mut ipp_ctypes::c_int,
                                         pEncodeHuffState:
                                             *mut IppEncodeHuffState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeHuff_BZ2_16u8u(pCode: *mut Ipp32u,
                                    pCodeLenBits: *mut ipp_ctypes::c_int,
                                    ppSrc: *mut *mut Ipp16u,
                                    pSrcLen: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    pDstLen: *mut ipp_ctypes::c_int,
                                    pEncodeHuffState:
                                        *mut IppEncodeHuffState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeHuffGetSize_BZ2_8u16u(wndSize: ipp_ctypes::c_int,
                                           pDecodeHuffStateSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeHuffInit_BZ2_8u16u(sizeDictionary: ipp_ctypes::c_int,
                                        pDecodeHuffState:
                                            *mut IppDecodeHuffState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsUnpackHuffContext_BZ2_8u16u(pCode: *mut Ipp32u,
                                           pCodeLenBits:
                                               *mut ipp_ctypes::c_int,
                                           ppSrc: *mut *mut Ipp8u,
                                           pSrcLen: *mut ipp_ctypes::c_int,
                                           pDecodeHuffState:
                                               *mut IppDecodeHuffState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeHuff_BZ2_8u16u(pCode: *mut Ipp32u,
                                    pCodeLenBits: *mut ipp_ctypes::c_int,
                                    ppSrc: *mut *mut Ipp8u,
                                    pSrcLen: *mut ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    pDstLen: *mut ipp_ctypes::c_int,
                                    pDecodeHuffState:
                                        *mut IppDecodeHuffState_BZ2)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeBlockGetSize_BZ2_8u(blockSize: ipp_ctypes::c_int,
                                         pBuffSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeBlock_BZ2_16u8u(pSrc: *const Ipp16u,
                                     srcLen: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     pDstLen: *mut ipp_ctypes::c_int,
                                     index: ipp_ctypes::c_int,
                                     dictSize: ipp_ctypes::c_int,
                                     inUse: *const Ipp8u, pBuff: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeLZOGetSize(method: IppLZOMethod, maxInputLen: Ipp32u,
                                pSize: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeLZO_8u(pSrc: *const Ipp8u, srcLen: Ipp32u,
                            pDst: *mut Ipp8u, pDstLen: *mut Ipp32u,
                            pLZOState: *mut IppLZOState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsEncodeLZOInit_8u(method: IppLZOMethod, maxInputLen: Ipp32u,
                                pLZOState: *mut IppLZOState_8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeLZO_8u(pSrc: *const Ipp8u, srcLen: Ipp32u,
                            pDst: *mut Ipp8u, pDstLen: *mut Ipp32u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDecodeLZOSafe_8u(pSrc: *const Ipp8u, srcLen: Ipp32u,
                                pDst: *mut Ipp8u, pDstLen: *mut Ipp32u)
     -> IppStatus;
}
extern "C" {
    pub fn ippchGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippsFind_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                       pFind: *const Ipp8u, lenFind: ipp_ctypes::c_int,
                       pIndex: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFindC_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                        valFind: Ipp8u, pIndex: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFindRev_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                          pFind: *const Ipp8u, lenFind: ipp_ctypes::c_int,
                          pIndex: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFindRevC_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                           valFind: Ipp8u, pIndex: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFind_Z_8u(pSrcZ: *const Ipp8u, pFindZ: *const Ipp8u,
                         pIndex: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFindC_Z_8u(pSrcZ: *const Ipp8u, valFind: Ipp8u,
                          pIndex: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCompare_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                          len: ipp_ctypes::c_int,
                          pResult: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsEqual_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                        len: ipp_ctypes::c_int,
                        pResult: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsTrimC_8u_I(pSrcDst: *mut Ipp8u, pLen: *mut ipp_ctypes::c_int,
                          odd: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsTrimC_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                        odd: Ipp8u, pDst: *mut Ipp8u,
                        pDstLen: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsUppercaseLatin_8u_I(pSrcDst: *mut Ipp8u,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLowercaseLatin_8u_I(pSrcDst: *mut Ipp8u,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLowercaseLatin_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsUppercaseLatin_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsHash_8u32u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                          pHashVal: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsHash_16u32u(pSrc: *const Ipp16u, len: ipp_ctypes::c_int,
                           pHashVal: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsHashSJ2_8u32u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                             pHashVal: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsHashSJ2_16u32u(pSrc: *const Ipp16u, len: ipp_ctypes::c_int,
                              pHashVal: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsHashMSCS_8u32u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                              pHashVal: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsHashMSCS_16u32u(pSrc: *const Ipp16u, len: ipp_ctypes::c_int,
                               pHashVal: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsConcat_8u(pSrc1: *const Ipp8u, len1: ipp_ctypes::c_int,
                         pSrc2: *const Ipp8u, len2: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsConcat_8u_D2L(pSrc: *const *const Ipp8u,
                             srcLen: *const ipp_ctypes::c_int,
                             numSrc: ipp_ctypes::c_int, pDst: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConcatC_8u_D2L(pSrc: *const *const Ipp8u,
                              srcLen: *const ipp_ctypes::c_int,
                              numSrc: ipp_ctypes::c_int, delim: Ipp8u,
                              pDst: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSplitC_8u_D2L(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                             delim: Ipp8u, pDst: *mut *mut Ipp8u,
                             dstLen: *mut ipp_ctypes::c_int,
                             pNumDst: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFindCAny_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                           pAnyOf: *const Ipp8u, lenAnyOf: ipp_ctypes::c_int,
                           pIndex: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFindRevCAny_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                              pAnyOf: *const Ipp8u,
                              lenAnyOf: ipp_ctypes::c_int,
                              pIndex: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsReplaceC_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int, oldVal: Ipp8u,
                           newVal: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsTrimCAny_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                           pTrim: *const Ipp8u, trimLen: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, pDstLen: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTrimEndCAny_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                              pTrim: *const Ipp8u, trimLen: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u,
                              pDstLen: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsTrimStartCAny_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                                pTrim: *const Ipp8u,
                                trimLen: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                pDstLen: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCompareIgnoreCaseLatin_8u(pSrc1: *const Ipp8u,
                                         pSrc2: *const Ipp8u,
                                         len: ipp_ctypes::c_int,
                                         pResult: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInsert_8u_I(pInsert: *const Ipp8u,
                           insertLen: ipp_ctypes::c_int, pSrcDst: *mut Ipp8u,
                           pSrcDstLen: *mut ipp_ctypes::c_int,
                           startIndex: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsInsert_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                         pInsert: *const Ipp8u, insertLen: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, startIndex: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRemove_8u_I(pSrcDst: *mut Ipp8u,
                           pSrcDstLen: *mut ipp_ctypes::c_int,
                           startIndex: ipp_ctypes::c_int,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRemove_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, startIndex: ipp_ctypes::c_int,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpGetSize(pPattern: *const ipp_ctypes::c_char,
                             pRegExpStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpInit(pPattern: *const ipp_ctypes::c_char,
                          pOptions: *const ipp_ctypes::c_char,
                          pRegExpState: *mut IppRegExpState,
                          pErrOffset: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpSetMatchLimit(matchLimit: ipp_ctypes::c_int,
                                   pRegExpState: *mut IppRegExpState)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpSetFormat(fmt: IppRegExpFormat,
                               pRegExpState: *mut IppRegExpState)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpFind_8u(pSrc: *const Ipp8u, srcLen: ipp_ctypes::c_int,
                             pRegExpState: *mut IppRegExpState,
                             pFind: *mut IppRegExpFind,
                             pNumFind: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvertUTF_8u16u(pSrc: *const Ipp8u, pSrcLen: *mut Ipp32u,
                                pDst: *mut Ipp16u, pDstLen: *mut Ipp32u,
                                BEFlag: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvertUTF_16u8u(pSrc: *const Ipp16u, pSrcLen: *mut Ipp32u,
                                pDst: *mut Ipp8u, pDstLen: *mut Ipp32u,
                                BEFlag: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpReplaceGetSize(pSrcReplacement: *const Ipp8u,
                                    pSize: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpReplaceInit(pSrcReplacement: *const Ipp8u,
                                 pReplaceState: *mut IppRegExpReplaceState)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRegExpReplace_8u(pSrc: *const Ipp8u,
                                pSrcLenOffset: *mut ipp_ctypes::c_int,
                                pDst: *mut Ipp8u,
                                pDstLen: *mut ipp_ctypes::c_int,
                                pFind: *mut IppRegExpFind,
                                pNumFind: *mut ipp_ctypes::c_int,
                                pRegExpState: *mut IppRegExpState,
                                pReplaceState: *mut IppRegExpReplaceState)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianGetBufferSize_L(maxRoiSize: IppiSizeL,
                                             kernelSize: ipp_ctypes::c_int,
                                             dataType: IppDataType,
                                             borderType: IppiBorderType,
                                             numChannels: ipp_ctypes::c_int,
                                             pBufferSize: *mut IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianGetSpecSize_L(kernelSize: ipp_ctypes::c_int,
                                           dataType: IppDataType,
                                           numChannels: ipp_ctypes::c_int,
                                           pSpecSize: *mut IppSizeL,
                                           pInitBufferSize: *mut IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianInit_L(roiSize: IppiSizeL,
                                    kernelSize: ipp_ctypes::c_int,
                                    sigma: Ipp32f, borderType: IppiBorderType,
                                    dataType: IppDataType,
                                    numChannels: ipp_ctypes::c_int,
                                    pSpec: *mut IppFilterGaussianSpec,
                                    pInitBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_32f_C1R_L(pSrc: *const Ipp32f,
                                        srcStep: IppSizeL, pDst: *mut Ipp32f,
                                        dstStep: IppSizeL, roiSize: IppiSizeL,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp32f,
                                        pSpec: *mut IppFilterGaussianSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_16u_C1R_L(pSrc: *const Ipp16u,
                                        srcStep: IppSizeL, pDst: *mut Ipp16u,
                                        dstStep: IppSizeL, roiSize: IppiSizeL,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp16u,
                                        pSpec: *mut IppFilterGaussianSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_16s_C1R_L(pSrc: *const Ipp16s,
                                        srcStep: IppSizeL, pDst: *mut Ipp16s,
                                        dstStep: IppSizeL, roiSize: IppiSizeL,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp16s,
                                        pSpec: *mut IppFilterGaussianSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                       pDst: *mut Ipp8u, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp8u,
                                       pSpec: *mut IppFilterGaussianSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_32f_C3R_L(pSrc: *const Ipp32f,
                                        srcStep: IppSizeL, pDst: *mut Ipp32f,
                                        dstStep: IppSizeL, roiSize: IppiSizeL,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp32f,
                                        pSpec: *mut IppFilterGaussianSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_16u_C3R_L(pSrc: *const Ipp16u,
                                        srcStep: IppSizeL, pDst: *mut Ipp16u,
                                        dstStep: IppSizeL, roiSize: IppiSizeL,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp16u,
                                        pSpec: *mut IppFilterGaussianSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_16s_C3R_L(pSrc: *const Ipp16s,
                                        srcStep: IppSizeL, pDst: *mut Ipp16s,
                                        dstStep: IppSizeL, roiSize: IppiSizeL,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp16s,
                                        pSpec: *mut IppFilterGaussianSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussian_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                       pDst: *mut Ipp8u, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp8u,
                                       pSpec: *mut IppFilterGaussianSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateGetBufferSize_L(roiSize: IppiSizeL, maskSize: IppiSizeL,
                                     datatype: IppDataType,
                                     numChannels: ipp_ctypes::c_int,
                                     pBufferSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeGetBufferSize_L(roiSize: IppiSizeL, maskSize: IppiSizeL,
                                    datatype: IppDataType,
                                    numChannels: ipp_ctypes::c_int,
                                    pBufferSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateGetSpecSize_L(roiSize: IppiSizeL, maskSize: IppiSizeL,
                                   pSpecSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeGetSpecSize_L(roiSize: IppiSizeL, maskSize: IppiSizeL,
                                  pSpecSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateInit_L(roiSize: IppiSizeL, pMask: *const Ipp8u,
                            maskSize: IppiSizeL,
                            pMorphSpec: *mut IppiMorphStateL) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeInit_L(roiSize: IppiSizeL, pMask: *const Ipp8u,
                           maskSize: IppiSizeL,
                           pMorphSpec: *mut IppiMorphStateL) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp8u,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp8u,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp8u,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                pDst: *mut Ipp32f, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                borderType: IppiBorderType,
                                borderValue: *const Ipp32f,
                                pMorphSpec: *const IppiMorphStateL,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                pDst: *mut Ipp32f, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                borderType: IppiBorderType,
                                borderValue: *const Ipp32f,
                                pMorphSpec: *const IppiMorphStateL,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                pDst: *mut Ipp32f, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                borderType: IppiBorderType,
                                borderValue: *const Ipp32f,
                                pMorphSpec: *const IppiMorphStateL,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                               srcBitOffset: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               dstBitOffset: ipp_ctypes::c_int,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp8u,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                borderType: IppiBorderType,
                                borderValue: *const Ipp16u,
                                pMorphSpec: *const IppiMorphStateL,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilate_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                borderType: IppiBorderType,
                                borderValue: *const Ipp16s,
                                pMorphSpec: *const IppiMorphStateL,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                              pDst: *mut Ipp8u, dstStep: IppSizeL,
                              roiSize: IppiSizeL, borderType: IppiBorderType,
                              borderValue: *const Ipp8u,
                              pMorphSpec: *const IppiMorphStateL,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                              pDst: *mut Ipp8u, dstStep: IppSizeL,
                              roiSize: IppiSizeL, borderType: IppiBorderType,
                              borderValue: *const Ipp8u,
                              pMorphSpec: *const IppiMorphStateL,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                              pDst: *mut Ipp8u, dstStep: IppSizeL,
                              roiSize: IppiSizeL, borderType: IppiBorderType,
                              borderValue: *const Ipp8u,
                              pMorphSpec: *const IppiMorphStateL,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               pDst: *mut Ipp32f, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp32f,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               pDst: *mut Ipp32f, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp32f,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               pDst: *mut Ipp32f, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp32f,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                               pDst: *mut Ipp16u, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp16u,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                               pDst: *mut Ipp16s, dstStep: IppSizeL,
                               roiSize: IppiSizeL, borderType: IppiBorderType,
                               borderValue: *const Ipp16s,
                               pMorphSpec: *const IppiMorphStateL,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErode_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                              srcBitOffset: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: IppSizeL,
                              dstBitOffset: ipp_ctypes::c_int,
                              roiSize: IppiSizeL, borderType: IppiBorderType,
                              borderValue: *const Ipp8u,
                              pMorphSpec: *const IppiMorphStateL,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGetSpecSize_L(roiSize: IppiSizeL, maskSize: IppiSizeL,
                                  depth: IppDataType,
                                  numChannels: ipp_ctypes::c_int,
                                  pSpecSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGetBufferSize_L(roiSize: IppiSizeL, maskSize: IppiSizeL,
                                    depth: IppDataType,
                                    numChannels: ipp_ctypes::c_int,
                                    bufferSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphInit_L(roiSize: IppiSizeL, pMask: *const Ipp8u,
                           maskSize: IppiSizeL, depth: IppDataType,
                           numChannels: ipp_ctypes::c_int,
                           pMorphSpec: *mut IppiMorphAdvStateL) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                   pDst: *mut Ipp16u, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp16u,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                   pDst: *mut Ipp16s, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp16s,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                  srcBitOffset: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u, dstStep: IppSizeL,
                                  dstBitOffset: ipp_ctypes::c_int,
                                  roiSize: IppiSizeL,
                                  borderType: IppiBorderType,
                                  borderValue: *const Ipp8u,
                                  pMorthSpec: *const IppiMorphAdvStateL,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                  pDst: *mut Ipp8u, dstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  borderType: IppiBorderType,
                                  borderValue: *const Ipp8u,
                                  pMorthSpec: *const IppiMorphAdvStateL,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                  pDst: *mut Ipp8u, dstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  borderType: IppiBorderType,
                                  borderValue: *const Ipp8u,
                                  pMorthSpec: *const IppiMorphAdvStateL,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                  pDst: *mut Ipp8u, dstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  borderType: IppiBorderType,
                                  borderValue: *const Ipp8u,
                                  pMorthSpec: *const IppiMorphAdvStateL,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                   pDst: *mut Ipp8u, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                   pDst: *mut Ipp8u, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                   pDst: *mut Ipp8u, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                    pDst: *mut Ipp16u, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp16u,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                    pDst: *mut Ipp16s, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp16s,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                   srcBitOffset: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u, dstStep: IppSizeL,
                                   dstBitOffset: ipp_ctypes::c_int,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                   pDst: *mut Ipp32f, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp32f,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                   pDst: *mut Ipp32f, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp32f,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpen_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                   pDst: *mut Ipp32f, dstStep: IppSizeL,
                                   roiSize: IppiSizeL,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp32f,
                                   pMorthSpec: *const IppiMorphAdvStateL,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                    pDst: *mut Ipp32f, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                    pDst: *mut Ipp32f, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphClose_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                    pDst: *mut Ipp32f, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     roiSize: IppiSizeL,
                                     borderType: IppiBorderType,
                                     borderValue: *const Ipp16u,
                                     pMorthSpec: *const IppiMorphAdvStateL,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     roiSize: IppiSizeL,
                                     borderType: IppiBorderType,
                                     borderValue: *const Ipp16s,
                                     pMorthSpec: *const IppiMorphAdvStateL,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    srcBitOffset: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstBitOffset: ipp_ctypes::c_int,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp8u,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp8u,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp8u,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    roiSize: IppiSizeL,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp8u,
                                    pMorthSpec: *const IppiMorphAdvStateL,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     roiSize: IppiSizeL,
                                     borderType: IppiBorderType,
                                     borderValue: *const Ipp32f,
                                     pMorthSpec: *const IppiMorphAdvStateL,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     roiSize: IppiSizeL,
                                     borderType: IppiBorderType,
                                     borderValue: *const Ipp32f,
                                     pMorthSpec: *const IppiMorphAdvStateL,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophat_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     roiSize: IppiSizeL,
                                     borderType: IppiBorderType,
                                     borderValue: *const Ipp32f,
                                     pMorthSpec: *const IppiMorphAdvStateL,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp16u,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp16s,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      srcBitOffset: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstBitOffset: ipp_ctypes::c_int,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhat_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp16u,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp16s,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_1u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      srcBitOffset: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstBitOffset: ipp_ctypes::c_int,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      roiSize: IppiSizeL,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvStateL,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradient_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       roiSize: IppiSizeL,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvStateL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphSetMode_L(mode: ipp_ctypes::c_int,
                              pMorphSpec: *mut IppiMorphAdvStateL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCannyGetSize_L(roi: IppiSizeL, bufferSize: *mut IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCanny_16s8u_C1R_L(pDX: *mut Ipp16s, dxStep: IppSizeL,
                                 pDY: *mut Ipp16s, dyStep: IppSizeL,
                                 pDst: *mut Ipp8u, dstStep: IppSizeL,
                                 roiL: IppiSizeL, lowThreshold: Ipp32f,
                                 highThreshold: Ipp32f, norm: IppNormType,
                                 Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippcvGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippiCopySubpix_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, dx: Ipp32f, dy: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpix_8u16u_C1R_Sfs(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, dx: Ipp32f,
                                        dy: Ipp32f,
                                        scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpix_8u32f_C1R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, dx: Ipp32f, dy: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpix_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, dx: Ipp32f, dy: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpix_16u32f_C1R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, dx: Ipp32f,
                                     dy: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpix_32f_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, dx: Ipp32f, dy: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpixIntersect_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcRoiSize: IppiSize,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          point: IppiPoint_32f,
                                          pMin: *mut IppiPoint,
                                          pMax: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpixIntersect_8u16u_C1R_Sfs(pSrc: *const Ipp8u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 srcRoiSize: IppiSize,
                                                 pDst: *mut Ipp16u,
                                                 dstStep: ipp_ctypes::c_int,
                                                 dstRoiSize: IppiSize,
                                                 point: IppiPoint_32f,
                                                 pMin: *mut IppiPoint,
                                                 pMax: *mut IppiPoint,
                                                 scaleFactor:
                                                     ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpixIntersect_8u32f_C1R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             srcRoiSize: IppiSize,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             point: IppiPoint_32f,
                                             pMin: *mut IppiPoint,
                                             pMax: *mut IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpixIntersect_16u_C1R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           point: IppiPoint_32f,
                                           pMin: *mut IppiPoint,
                                           pMax: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpixIntersect_16u32f_C1R(pSrc: *const Ipp16u,
                                              srcStep: ipp_ctypes::c_int,
                                              srcRoiSize: IppiSize,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              point: IppiPoint_32f,
                                              pMin: *mut IppiPoint,
                                              pMax: *mut IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopySubpixIntersect_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           point: IppiPoint_32f,
                                           pMin: *mut IppiPoint,
                                           pMax: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiSampleLine_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pDst: *mut Ipp8u,
                                 pt1: IppiPoint, pt2: IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiSampleLine_8u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pDst: *mut Ipp8u,
                                 pt1: IppiPoint, pt2: IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiSampleLine_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDst: *mut Ipp16u,
                                  pt1: IppiPoint, pt2: IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSampleLine_16u_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDst: *mut Ipp16u,
                                  pt1: IppiPoint, pt2: IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSampleLine_32f_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDst: *mut Ipp32f,
                                  pt1: IppiPoint, pt2: IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSampleLine_32f_C3R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDst: *mut Ipp32f,
                                  pt1: IppiPoint, pt2: IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u32f_C1IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp32f,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u32f_C1IR(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp32f,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u32f_C1IMR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pMask: *const Ipp8u,
                               maskStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp32f,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u32f_C1IMR(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C1IMR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddSquare_8u32f_C1IR(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddSquare_16u32f_C1IR(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddSquare_32f_C1IR(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddSquare_8u32f_C1IMR(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddSquare_16u32f_C1IMR(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pMask: *const Ipp8u,
                                      maskStep: ipp_ctypes::c_int,
                                      pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddSquare_32f_C1IMR(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddProduct_8u32f_C1IR(pSrc1: *const Ipp8u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp8u,
                                     src2Step: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddProduct_16u32f_C1IR(pSrc1: *const Ipp16u,
                                      src1Step: ipp_ctypes::c_int,
                                      pSrc2: *const Ipp16u,
                                      src2Step: ipp_ctypes::c_int,
                                      pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddProduct_32f_C1IR(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddProduct_8u32f_C1IMR(pSrc1: *const Ipp8u,
                                      src1Step: ipp_ctypes::c_int,
                                      pSrc2: *const Ipp8u,
                                      src2Step: ipp_ctypes::c_int,
                                      pMask: *const Ipp8u,
                                      maskStep: ipp_ctypes::c_int,
                                      pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddProduct_16u32f_C1IMR(pSrc1: *const Ipp16u,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp16u,
                                       src2Step: ipp_ctypes::c_int,
                                       pMask: *const Ipp8u,
                                       maskStep: ipp_ctypes::c_int,
                                       pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddProduct_32f_C1IMR(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_8u32f_C1IR(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_16u32f_C1IR(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_32f_C1IR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_8u32f_C1IMR(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pMask: *const Ipp8u,
                                       maskStep: ipp_ctypes::c_int,
                                       pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_16u32f_C1IMR(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pMask: *const Ipp8u,
                                        maskStep: ipp_ctypes::c_int,
                                        pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_32f_C1IMR(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddWeighted_32f_C1R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiff_8u_C1R(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiff_8u_C3R(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiff_16u_C1R(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiff_32f_C1R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiffC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, value: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiffC_16u_C1R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAbsDiffC_32f_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_8u_C1R(roiSize: IppiSize,
                                              maskSize: IppiSize,
                                              pSpecSize:
                                                  *mut ipp_ctypes::c_int,
                                              pBufferSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_8u_C3R(roiSize: IppiSize,
                                              maskSize: IppiSize,
                                              pSpecSize:
                                                  *mut ipp_ctypes::c_int,
                                              pBufferSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_8u_C4R(roiSize: IppiSize,
                                              maskSize: IppiSize,
                                              pSpecSize:
                                                  *mut ipp_ctypes::c_int,
                                              pBufferSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_32f_C1R(roiSize: IppiSize,
                                               maskSize: IppiSize,
                                               pSpecSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_32f_C3R(roiSize: IppiSize,
                                               maskSize: IppiSize,
                                               pSpecSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_32f_C4R(roiSize: IppiSize,
                                               maskSize: IppiSize,
                                               pSpecSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_16u_C1R(roiSize: IppiSize,
                                               maskSize: IppiSize,
                                               pSpecSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_16s_C1R(roiSize: IppiSize,
                                               maskSize: IppiSize,
                                               pSpecSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderGetSize_1u_C1R(roiSize: IppiSize,
                                              maskSize: IppiSize,
                                              pSpecSize:
                                                  *mut ipp_ctypes::c_int,
                                              pBufferSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_16u_C1R(roiSize: IppiSize,
                                            pMask: *const Ipp8u,
                                            maskSize: IppiSize,
                                            pMorphSpec: *mut IppiMorphState,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_16s_C1R(roiSize: IppiSize,
                                            pMask: *const Ipp8u,
                                            maskSize: IppiSize,
                                            pMorphSpec: *mut IppiMorphState,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_1u_C1R(roiSize: IppiSize,
                                           pMask: *const Ipp8u,
                                           maskSize: IppiSize,
                                           pMorphSpec: *mut IppiMorphState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_8u_C1R(roiSize: IppiSize,
                                           pMask: *const Ipp8u,
                                           maskSize: IppiSize,
                                           pMorphSpec: *mut IppiMorphState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_8u_C3R(roiSize: IppiSize,
                                           pMask: *const Ipp8u,
                                           maskSize: IppiSize,
                                           pMorphSpec: *mut IppiMorphState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_8u_C4R(roiSize: IppiSize,
                                           pMask: *const Ipp8u,
                                           maskSize: IppiSize,
                                           pMorphSpec: *mut IppiMorphState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_32f_C1R(roiSize: IppiSize,
                                            pMask: *const Ipp8u,
                                            maskSize: IppiSize,
                                            pMorphSpec: *mut IppiMorphState,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_32f_C3R(roiSize: IppiSize,
                                            pMask: *const Ipp8u,
                                            maskSize: IppiSize,
                                            pMorphSpec: *mut IppiMorphState,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphologyBorderInit_32f_C4R(roiSize: IppiSize,
                                            pMask: *const Ipp8u,
                                            maskSize: IppiSize,
                                            pMorphSpec: *mut IppiMorphState,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: Ipp8u,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_8u_C4R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    borderType: IppiBorderType,
                                    borderValue: Ipp32f,
                                    pMorphSpec: *const IppiMorphState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pMorphSpec: *const IppiMorphState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_32f_C4R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    borderType: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pMorphSpec: *const IppiMorphState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_1u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   srcBitOffset: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstBitOffset: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: Ipp8u,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_16u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    borderType: IppiBorderType,
                                    borderValue: Ipp16u,
                                    pMorphSpec: *const IppiMorphState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDilateBorder_16s_C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    borderType: IppiBorderType,
                                    borderValue: Ipp16s,
                                    pMorphSpec: *const IppiMorphState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  borderType: IppiBorderType,
                                  borderValue: Ipp8u,
                                  pMorphSpec: *const IppiMorphState,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_8u_C3R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  borderType: IppiBorderType,
                                  borderValue: *const Ipp8u,
                                  pMorphSpec: *const IppiMorphState,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_8u_C4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  borderType: IppiBorderType,
                                  borderValue: *const Ipp8u,
                                  pMorphSpec: *const IppiMorphState,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_32f_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: Ipp32f,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_32f_C3R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp32f,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_32f_C4R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: *const Ipp32f,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_16u_C1R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: Ipp16u,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_16s_C1R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   borderType: IppiBorderType,
                                   borderValue: Ipp16s,
                                   pMorphSpec: *const IppiMorphState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiErodeBorder_1u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  srcBitOffset: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  dstBitOffset: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  borderType: IppiBorderType,
                                  borderValue: Ipp8u,
                                  pMorphSpec: *const IppiMorphState,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_16u_C1R(roiSize: IppiSize, maskSize: IppiSize,
                                       pSpecSize: *mut ipp_ctypes::c_int,
                                       pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_16s_C1R(roiSize: IppiSize, maskSize: IppiSize,
                                       pSpecSize: *mut ipp_ctypes::c_int,
                                       pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_1u_C1R(roiSize: IppiSize, maskSize: IppiSize,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_8u_C1R(roiSize: IppiSize, maskSize: IppiSize,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_8u_C3R(roiSize: IppiSize, maskSize: IppiSize,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_8u_C4R(roiSize: IppiSize, maskSize: IppiSize,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_32f_C1R(roiSize: IppiSize, maskSize: IppiSize,
                                       pSpecSize: *mut ipp_ctypes::c_int,
                                       pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_32f_C3R(roiSize: IppiSize, maskSize: IppiSize,
                                       pSpecSize: *mut ipp_ctypes::c_int,
                                       pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvGetSize_32f_C4R(roiSize: IppiSize, maskSize: IppiSize,
                                       pSpecSize: *mut ipp_ctypes::c_int,
                                       pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_8u_C1R(roiSize: IppiSize, pMask: *const Ipp8u,
                                   maskSize: IppiSize,
                                   pMorphSpec: *mut IppiMorphAdvState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_8u_C3R(roiSize: IppiSize, pMask: *const Ipp8u,
                                   maskSize: IppiSize,
                                   pMorphSpec: *mut IppiMorphAdvState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_8u_C4R(roiSize: IppiSize, pMask: *const Ipp8u,
                                   maskSize: IppiSize,
                                   pMorphSpec: *mut IppiMorphAdvState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_16u_C1R(roiSize: IppiSize, pMask: *const Ipp8u,
                                    maskSize: IppiSize,
                                    pMorphSpec: *mut IppiMorphAdvState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_16s_C1R(roiSize: IppiSize, pMask: *const Ipp8u,
                                    maskSize: IppiSize,
                                    pMorphSpec: *mut IppiMorphAdvState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_1u_C1R(roiSize: IppiSize, pMask: *const Ipp8u,
                                   maskSize: IppiSize,
                                   pMorphSpec: *mut IppiMorphAdvState,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_32f_C1R(roiSize: IppiSize, pMask: *const Ipp8u,
                                    maskSize: IppiSize,
                                    pMorphSpec: *mut IppiMorphAdvState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_32f_C3R(roiSize: IppiSize, pMask: *const Ipp8u,
                                    maskSize: IppiSize,
                                    pMorphSpec: *mut IppiMorphAdvState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphAdvInit_32f_C4R(roiSize: IppiSize, pMask: *const Ipp8u,
                                    maskSize: IppiSize,
                                    pMorphSpec: *mut IppiMorphAdvState,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp16u,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp16s,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_1u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      srcBitOffset: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstBitOffset: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvState,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvState,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvState,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pMorthSpec: *const IppiMorphAdvState,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_8u_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp8u,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_8u_C3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp8u,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_8u_C4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp8u,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_16u_C1R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: Ipp16u,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_16s_C1R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: Ipp16s,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_1u_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcBitOffset: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstBitOffset: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp8u,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphOpenBorder_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pMorthSpec: *const IppiMorphAdvState,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: Ipp32f,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_32f_C3R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp32f,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphCloseBorder_32f_C4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp32f,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_16u_C1R(pSrc: *const Ipp16u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         borderType: IppiBorderType,
                                         borderValue: Ipp16u,
                                         pMorthSpec: *const IppiMorphAdvState,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_16s_C1R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         borderType: IppiBorderType,
                                         borderValue: Ipp16s,
                                         pMorthSpec: *const IppiMorphAdvState,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_1u_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcBitOffset: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstBitOffset: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: Ipp8u,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_8u_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: Ipp8u,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_8u_C3R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp8u,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_8u_C4R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp8u,
                                        pMorthSpec: *const IppiMorphAdvState,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_32f_C1R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         borderType: IppiBorderType,
                                         borderValue: Ipp32f,
                                         pMorthSpec: *const IppiMorphAdvState,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_32f_C3R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         borderType: IppiBorderType,
                                         borderValue: *const Ipp32f,
                                         pMorthSpec: *const IppiMorphAdvState,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphTophatBorder_32f_C4R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         borderType: IppiBorderType,
                                         borderValue: *const Ipp32f,
                                         pMorthSpec: *const IppiMorphAdvState,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_16u_C1R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp16u,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_16s_C1R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp16s,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_1u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcBitOffset: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstBitOffset: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_8u_C3R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: *const Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_8u_C4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: *const Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_32f_C3R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: *const Ipp32f,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphBlackhatBorder_32f_C4R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: *const Ipp32f,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_16u_C1R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp16u,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_16s_C1R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp16s,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_1u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcBitOffset: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstBitOffset: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_8u_C3R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: *const Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_8u_C4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: *const Ipp8u,
                                          pMorthSpec:
                                              *const IppiMorphAdvState,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_32f_C3R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: *const Ipp32f,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGradientBorder_32f_C4R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderType: IppiBorderType,
                                           borderValue: *const Ipp32f,
                                           pMorthSpec:
                                               *const IppiMorphAdvState,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGrayGetSize_8u_C1R(roiSize: IppiSize,
                                       pMask: *const Ipp32s,
                                       maskSize: IppiSize,
                                       pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGrayGetSize_32f_C1R(roiSize: IppiSize,
                                        pMask: *const Ipp32f,
                                        maskSize: IppiSize,
                                        pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGrayInit_8u_C1R(pState: *mut IppiMorphGrayState_8u,
                                    roiSize: IppiSize, pMask: *const Ipp32s,
                                    maskSize: IppiSize, anchor: IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphGrayInit_32f_C1R(pState: *mut IppiMorphGrayState_32f,
                                     roiSize: IppiSize, pMask: *const Ipp32f,
                                     maskSize: IppiSize, anchor: IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayErodeBorder_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      border: IppiBorderType,
                                      pState: *mut IppiMorphGrayState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayErodeBorder_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       border: IppiBorderType,
                                       pState: *mut IppiMorphGrayState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayDilateBorder_8u_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       border: IppiBorderType,
                                       pState: *mut IppiMorphGrayState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayDilateBorder_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        border: IppiBorderType,
                                        pState: *mut IppiMorphGrayState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructGetBufferSize(roiSize: IppiSize,
                                             dataType: IppDataType,
                                             numChannels: ipp_ctypes::c_int,
                                             pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructDilate_8u_C1IR(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pSrcDst: *mut Ipp8u,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pBuf: *mut Ipp8u,
                                              norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructErode_8u_C1IR(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pSrcDst: *mut Ipp8u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             pBuf: *mut Ipp8u, norm: IppiNorm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructDilate_16u_C1IR(pSrc: *const Ipp16u,
                                               srcStep: ipp_ctypes::c_int,
                                               pSrcDst: *mut Ipp16u,
                                               srcDstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pBuf: *mut Ipp8u,
                                               norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructErode_16u_C1IR(pSrc: *const Ipp16u,
                                              srcStep: ipp_ctypes::c_int,
                                              pSrcDst: *mut Ipp16u,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pBuf: *mut Ipp8u,
                                              norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructDilate_32f_C1IR(pSrc: *const Ipp32f,
                                               srcStep: ipp_ctypes::c_int,
                                               pSrcDst: *mut Ipp32f,
                                               srcDstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pBuf: *mut Ipp32f,
                                               norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructErode_32f_C1IR(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pSrcDst: *mut Ipp32f,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pBuf: *mut Ipp32f,
                                              norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructDilate_64f_C1IR(pSrc: *const Ipp64f,
                                               srcStep: ipp_ctypes::c_int,
                                               pSrcDst: *mut Ipp64f,
                                               srcDstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pBuf: *mut Ipp8u,
                                               norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiMorphReconstructErode_64f_C1IR(pSrc: *const Ipp64f,
                                              srcStep: ipp_ctypes::c_int,
                                              pSrcDst: *mut Ipp64f,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pBuf: *mut Ipp8u,
                                              norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_8u16s_C1R(roiSize:
                                                                  IppiSize,
                                                              kernelSize:
                                                                  ipp_ctypes::c_int,
                                                              pBufferSize:
                                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_8u16s_C3R(roiSize:
                                                                  IppiSize,
                                                              kernelSize:
                                                                  ipp_ctypes::c_int,
                                                              pBufferSize:
                                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_16s_C1R(roiSize: IppiSize,
                                                            kernelSize:
                                                                ipp_ctypes::c_int,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_16s_C3R(roiSize: IppiSize,
                                                            kernelSize:
                                                                ipp_ctypes::c_int,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_16u_C1R(roiSize: IppiSize,
                                                            kernelSize:
                                                                ipp_ctypes::c_int,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_16u_C3R(roiSize: IppiSize,
                                                            kernelSize:
                                                                ipp_ctypes::c_int,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_Low_16s_C1R(roiSize:
                                                                    IppiSize,
                                                                kernelSize:
                                                                    ipp_ctypes::c_int,
                                                                pBufferSize:
                                                                    *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_Low_16s_C3R(roiSize:
                                                                    IppiSize,
                                                                kernelSize:
                                                                    ipp_ctypes::c_int,
                                                                pBufferSize:
                                                                    *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                            kernelSize:
                                                                ipp_ctypes::c_int,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipelineGetBufferSize_32f_C3R(roiSize: IppiSize,
                                                            kernelSize:
                                                                ipp_ctypes::c_int,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_8u16s_C1R(pSrc: *const Ipp8u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 ppDst: *mut *mut Ipp16s,
                                                 roiSize: IppiSize,
                                                 pKernel: *const Ipp16s,
                                                 kernelSize:
                                                     ipp_ctypes::c_int,
                                                 xAnchor: ipp_ctypes::c_int,
                                                 borderType: IppiBorderType,
                                                 borderValue: Ipp8u,
                                                 divisor: ipp_ctypes::c_int,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_8u16s_C3R(pSrc: *const Ipp8u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 ppDst: *mut *mut Ipp16s,
                                                 roiSize: IppiSize,
                                                 pKernel: *const Ipp16s,
                                                 kernelSize:
                                                     ipp_ctypes::c_int,
                                                 xAnchor: ipp_ctypes::c_int,
                                                 borderType: IppiBorderType,
                                                 borderValue: *mut Ipp8u,
                                                 divisor: ipp_ctypes::c_int,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_16s_C1R(pSrc: *const Ipp16s,
                                               srcStep: ipp_ctypes::c_int,
                                               ppDst: *mut *mut Ipp16s,
                                               roiSize: IppiSize,
                                               pKernel: *const Ipp16s,
                                               kernelSize: ipp_ctypes::c_int,
                                               xAnchor: ipp_ctypes::c_int,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp16s,
                                               divisor: ipp_ctypes::c_int,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_16s_C3R(pSrc: *const Ipp16s,
                                               srcStep: ipp_ctypes::c_int,
                                               ppDst: *mut *mut Ipp16s,
                                               roiSize: IppiSize,
                                               pKernel: *const Ipp16s,
                                               kernelSize: ipp_ctypes::c_int,
                                               xAnchor: ipp_ctypes::c_int,
                                               borderType: IppiBorderType,
                                               borderValue: *mut Ipp16s,
                                               divisor: ipp_ctypes::c_int,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_Low_16s_C1R(pSrc: *const Ipp16s,
                                                   srcStep: ipp_ctypes::c_int,
                                                   ppDst: *mut *mut Ipp16s,
                                                   roiSize: IppiSize,
                                                   pKernel: *const Ipp16s,
                                                   kernelSize:
                                                       ipp_ctypes::c_int,
                                                   xAnchor: ipp_ctypes::c_int,
                                                   borderType: IppiBorderType,
                                                   borderValue: Ipp16s,
                                                   divisor: ipp_ctypes::c_int,
                                                   pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_Low_16s_C3R(pSrc: *const Ipp16s,
                                                   srcStep: ipp_ctypes::c_int,
                                                   ppDst: *mut *mut Ipp16s,
                                                   roiSize: IppiSize,
                                                   pKernel: *const Ipp16s,
                                                   kernelSize:
                                                       ipp_ctypes::c_int,
                                                   xAnchor: ipp_ctypes::c_int,
                                                   borderType: IppiBorderType,
                                                   borderValue: *mut Ipp16s,
                                                   divisor: ipp_ctypes::c_int,
                                                   pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_16u_C1R(pSrc: *const Ipp16u,
                                               srcStep: ipp_ctypes::c_int,
                                               ppDst: *mut *mut Ipp16u,
                                               roiSize: IppiSize,
                                               pKernel: *const Ipp16u,
                                               kernelSize: ipp_ctypes::c_int,
                                               xAnchor: ipp_ctypes::c_int,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp16u,
                                               divisor: ipp_ctypes::c_int,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_16u_C3R(pSrc: *const Ipp16u,
                                               srcStep: ipp_ctypes::c_int,
                                               ppDst: *mut *mut Ipp16u,
                                               roiSize: IppiSize,
                                               pKernel: *const Ipp16u,
                                               kernelSize: ipp_ctypes::c_int,
                                               xAnchor: ipp_ctypes::c_int,
                                               borderType: IppiBorderType,
                                               borderValue: *mut Ipp16u,
                                               divisor: ipp_ctypes::c_int,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_32f_C1R(pSrc: *const Ipp32f,
                                               srcStep: ipp_ctypes::c_int,
                                               ppDst: *mut *mut Ipp32f,
                                               roiSize: IppiSize,
                                               pKernel: *const Ipp32f,
                                               kernelSize: ipp_ctypes::c_int,
                                               xAnchor: ipp_ctypes::c_int,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp32f,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRowBorderPipeline_32f_C3R(pSrc: *const Ipp32f,
                                               srcStep: ipp_ctypes::c_int,
                                               ppDst: *mut *mut Ipp32f,
                                               roiSize: IppiSize,
                                               pKernel: *const Ipp32f,
                                               kernelSize: ipp_ctypes::c_int,
                                               xAnchor: ipp_ctypes::c_int,
                                               borderType: IppiBorderType,
                                               borderValue: *mut Ipp32f,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16s_C1R(roiSize: IppiSize,
                                                         kernelSize:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16s_C3R(roiSize: IppiSize,
                                                         kernelSize:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_Low_16s_C1R(roiSize:
                                                                 IppiSize,
                                                             kernelSize:
                                                                 ipp_ctypes::c_int,
                                                             pBufferSize:
                                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_Low_16s_C3R(roiSize:
                                                                 IppiSize,
                                                             kernelSize:
                                                                 ipp_ctypes::c_int,
                                                             pBufferSize:
                                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16u_C1R(roiSize: IppiSize,
                                                         kernelSize:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16u_C3R(roiSize: IppiSize,
                                                         kernelSize:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16s8u_C1R(roiSize: IppiSize,
                                                           kernelSize:
                                                               ipp_ctypes::c_int,
                                                           pBufferSize:
                                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16s8u_C3R(roiSize: IppiSize,
                                                           kernelSize:
                                                               ipp_ctypes::c_int,
                                                           pBufferSize:
                                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16s8s_C1R(roiSize: IppiSize,
                                                           kernelSize:
                                                               ipp_ctypes::c_int,
                                                           pBufferSize:
                                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_16s8s_C3R(roiSize: IppiSize,
                                                           kernelSize:
                                                               ipp_ctypes::c_int,
                                                           pBufferSize:
                                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                         kernelSize:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipelineGetBufferSize_32f_C3R(roiSize: IppiSize,
                                                         kernelSize:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16s_C1R(ppSrc: *mut *const Ipp16s,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pKernel: *const Ipp16s,
                                            kernelSize: ipp_ctypes::c_int,
                                            divisor: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16s_C3R(ppSrc: *mut *const Ipp16s,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pKernel: *const Ipp16s,
                                            kernelSize: ipp_ctypes::c_int,
                                            divisor: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_Low_16s_C1R(ppSrc: *mut *const Ipp16s,
                                                pDst: *mut Ipp16s,
                                                dstStep: ipp_ctypes::c_int,
                                                roiSize: IppiSize,
                                                pKernel: *const Ipp16s,
                                                kernelSize: ipp_ctypes::c_int,
                                                divisor: ipp_ctypes::c_int,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_Low_16s_C3R(ppSrc: *mut *const Ipp16s,
                                                pDst: *mut Ipp16s,
                                                dstStep: ipp_ctypes::c_int,
                                                roiSize: IppiSize,
                                                pKernel: *const Ipp16s,
                                                kernelSize: ipp_ctypes::c_int,
                                                divisor: ipp_ctypes::c_int,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16u_C1R(ppSrc: *mut *const Ipp16u,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pKernel: *const Ipp16u,
                                            kernelSize: ipp_ctypes::c_int,
                                            divisor: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16u_C3R(ppSrc: *mut *const Ipp16u,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pKernel: *const Ipp16u,
                                            kernelSize: ipp_ctypes::c_int,
                                            divisor: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16s8u_C1R(ppSrc: *mut *const Ipp16s,
                                              pDst: *mut Ipp8u,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pKernel: *const Ipp16s,
                                              kernelSize: ipp_ctypes::c_int,
                                              divisor: ipp_ctypes::c_int,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16s8u_C3R(ppSrc: *mut *const Ipp16s,
                                              pDst: *mut Ipp8u,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pKernel: *const Ipp16s,
                                              kernelSize: ipp_ctypes::c_int,
                                              divisor: ipp_ctypes::c_int,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16s8s_C1R(ppSrc: *mut *const Ipp16s,
                                              pDst: *mut Ipp8s,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pKernel: *const Ipp16s,
                                              kernelSize: ipp_ctypes::c_int,
                                              divisor: ipp_ctypes::c_int,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_16s8s_C3R(ppSrc: *mut *const Ipp16s,
                                              pDst: *mut Ipp8s,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pKernel: *const Ipp16s,
                                              kernelSize: ipp_ctypes::c_int,
                                              divisor: ipp_ctypes::c_int,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_32f_C1R(ppSrc: *mut *const Ipp32f,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pKernel: *const Ipp32f,
                                            kernelSize: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterColumnPipeline_32f_C3R(ppSrc: *mut *const Ipp32f,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pKernel: *const Ipp32f,
                                            kernelSize: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelCrossGetBufferSize_8u16s_C1R(roiSize: IppiSize,
                                                       mask: IppiMaskSize,
                                                       pBufferSize:
                                                           *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplacianGetBufferSize_8u16s_C1R(roiSize: IppiSize,
                                                      mask: IppiMaskSize,
                                                      pBufferSize:
                                                          *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLowpassGetBufferSize_8u_C1R(roiSize: IppiSize,
                                                 mask: IppiMaskSize,
                                                 pBufferSize:
                                                     *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelCrossGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                     mask: IppiMaskSize,
                                                     pBufferSize:
                                                         *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplacianGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                    mask: IppiMaskSize,
                                                    pBufferSize:
                                                        *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLowpassGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  pBufferSize:
                                                      *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelCrossBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                srcStep: ipp_ctypes::c_int,
                                                pDst: *mut Ipp16s,
                                                dstStep: ipp_ctypes::c_int,
                                                roiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp8u,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplacianBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16s,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp8u,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLowpassBorder_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelCrossBorder_32f_C1R(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              mask: IppiMaskSize,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp32f,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLowpassBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplacianBorder_32f_C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             mask: IppiMaskSize,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp32f,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGenSobelKernel_16s(pDst: *mut Ipp16s,
                                  kernelSize: ipp_ctypes::c_int,
                                  dx: ipp_ctypes::c_int,
                                  sign: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiGenSobelKernel_32f(pDst: *mut Ipp32f,
                                  kernelSize: ipp_ctypes::c_int,
                                  dx: ipp_ctypes::c_int,
                                  sign: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiIntegral_8u32s_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  srcRoiSize: IppiSize, val: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiIntegral_8u32f_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  srcRoiSize: IppiSize, val: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiIntegral_32f_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int,
                                srcRoiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedIntegral_8u32s_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32s,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, val: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedIntegral_8u32f_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, val: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrIntegral_8u32s_C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32s,
                                     dstStep: ipp_ctypes::c_int,
                                     pSqr: *mut Ipp32s,
                                     sqrStep: ipp_ctypes::c_int,
                                     roi: IppiSize, val: Ipp32s,
                                     valSqr: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrIntegral_8u32s64f_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32s,
                                        dstStep: ipp_ctypes::c_int,
                                        pSqr: *mut Ipp64f,
                                        sqrStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, val: Ipp32s,
                                        valSqr: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrIntegral_8u32f64f_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        pSqr: *mut Ipp64f,
                                        sqrStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, val: Ipp32f,
                                        valSqr: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedSqrIntegral_8u32s_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32s,
                                           dstStep: ipp_ctypes::c_int,
                                           pSqr: *mut Ipp32s,
                                           sqrStep: ipp_ctypes::c_int,
                                           roi: IppiSize, val: Ipp32s,
                                           valSqr: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedSqrIntegral_8u32s64f_C1R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32s,
                                              dstStep: ipp_ctypes::c_int,
                                              pSqr: *mut Ipp64f,
                                              sqrStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize, val: Ipp32s,
                                              valSqr: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedSqrIntegral_8u32f64f_C1R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              pSqr: *mut Ipp64f,
                                              sqrStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize, val: Ipp32f,
                                              valSqr: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_8u_C1MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_8u_C3CMR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, coi: ipp_ctypes::c_int,
                             pMean: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16u_C1MR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16u_C3CMR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              coi: ipp_ctypes::c_int, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_32f_C1MR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_32f_C3CMR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              coi: ipp_ctypes::c_int, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pMean: *mut Ipp64f,
                                  pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_8u_C3CR(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                   pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_16u_C1R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pMean: *mut Ipp64f,
                                   pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_16u_C3CR(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_32f_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pMean: *mut Ipp64f,
                                   pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_32f_C3CR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_8u_C1MR(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pMean: *mut Ipp64f,
                                   pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_8u_C3CMR(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_16u_C1MR(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pMean: *mut Ipp64f,
                                    pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_16u_C3CMR(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_32f_C1MR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pMean: *mut Ipp64f,
                                    pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_StdDev_32f_C3CMR(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRectStdDev_32s_C1RSfs(pSrc: *const Ipp32s,
                                     srcStep: ipp_ctypes::c_int,
                                     pSqr: *const Ipp32s,
                                     sqrStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rect: IppiRect,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRectStdDev_32s32f_C1R(pSrc: *const Ipp32s,
                                     srcStep: ipp_ctypes::c_int,
                                     pSqr: *const Ipp64f,
                                     sqrStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rect: IppiRect)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRectStdDev_32f_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pSqr: *const Ipp64f,
                                  sqrStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, rect: IppiRect)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedRectStdDev_32s32f_C1R(pSrc: *const Ipp32s,
                                           srcStep: ipp_ctypes::c_int,
                                           pSqr: *const Ipp64f,
                                           sqrStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, rect: IppiRect)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedRectStdDev_32s_C1RSfs(pSrc: *const Ipp32s,
                                           srcStep: ipp_ctypes::c_int,
                                           pSqr: *const Ipp32s,
                                           sqrStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32s,
                                           dstStep: ipp_ctypes::c_int,
                                           roi: IppiSize, rect: IppiRect,
                                           scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedRectStdDev_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pSqr: *const Ipp64f,
                                        sqrStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, rect: IppiRect)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pMinVal: *mut Ipp32f,
                                 pMaxVal: *mut Ipp32f,
                                 pMinIndex: *mut IppiPoint,
                                 pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_8u_C3CR(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                  pMinVal: *mut Ipp32f, pMaxVal: *mut Ipp32f,
                                  pMinIndex: *mut IppiPoint,
                                  pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pMinVal: *mut Ipp32f,
                                  pMaxVal: *mut Ipp32f,
                                  pMinIndex: *mut IppiPoint,
                                  pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_16u_C3CR(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                   pMinVal: *mut Ipp32f, pMaxVal: *mut Ipp32f,
                                   pMinIndex: *mut IppiPoint,
                                   pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_32f_C1R(pSrc: *const Ipp32f,
                                  step: ipp_ctypes::c_int, roiSize: IppiSize,
                                  pMinVal: *mut Ipp32f, pMaxVal: *mut Ipp32f,
                                  pMinIndex: *mut IppiPoint,
                                  pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_32f_C3CR(pSrc: *const Ipp32f,
                                   step: ipp_ctypes::c_int, roiSize: IppiSize,
                                   coi: ipp_ctypes::c_int,
                                   pMinVal: *mut Ipp32f, pMaxVal: *mut Ipp32f,
                                   pMinIndex: *mut IppiPoint,
                                   pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_8u_C1MR(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pMinVal: *mut Ipp32f,
                                  pMaxVal: *mut Ipp32f,
                                  pMinIndex: *mut IppiPoint,
                                  pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_8u_C3CMR(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                   pMinVal: *mut Ipp32f, pMaxVal: *mut Ipp32f,
                                   pMinIndex: *mut IppiPoint,
                                   pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_16u_C1MR(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pMinVal: *mut Ipp32f,
                                   pMaxVal: *mut Ipp32f,
                                   pMinIndex: *mut IppiPoint,
                                   pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_16u_C3CMR(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pMinVal: *mut Ipp32f,
                                    pMaxVal: *mut Ipp32f,
                                    pMinIndex: *mut IppiPoint,
                                    pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_32f_C1MR(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pMinVal: *mut Ipp32f,
                                   pMaxVal: *mut Ipp32f,
                                   pMinIndex: *mut IppiPoint,
                                   pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMaxIndx_32f_C3CMR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pMinVal: *mut Ipp32f,
                                    pMaxVal: *mut Ipp32f,
                                    pMinIndex: *mut IppiPoint,
                                    pMaxIndex: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_8u_C1MR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16u_C1MR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_32f_C1MR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_8u_C3CMR(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                 pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16u_C3CMR(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                  pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_32f_C3CMR(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                  pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_8u_C1MR(pSrc1: *const Ipp8u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp8u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16u_C1MR(pSrc1: *const Ipp16u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp16u,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_32f_C1MR(pSrc1: *const Ipp32f,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp32f,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_8u_C3CMR(pSrc1: *const Ipp8u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp8u,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16u_C3CMR(pSrc1: *const Ipp16u,
                                      src1Step: ipp_ctypes::c_int,
                                      pSrc2: *const Ipp16u,
                                      src2Step: ipp_ctypes::c_int,
                                      pMask: *const Ipp8u,
                                      maskStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      coi: ipp_ctypes::c_int,
                                      pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_32f_C3CMR(pSrc1: *const Ipp32f,
                                      src1Step: ipp_ctypes::c_int,
                                      pSrc2: *const Ipp32f,
                                      src2Step: ipp_ctypes::c_int,
                                      pMask: *const Ipp8u,
                                      maskStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      coi: ipp_ctypes::c_int,
                                      pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_8u_C1MR(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16u_C1MR(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_32f_C1MR(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_8u_C3CMR(pSrc1: *const Ipp8u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp8u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16u_C3CMR(pSrc1: *const Ipp16u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp16u,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_32f_C3CMR(pSrc1: *const Ipp32f,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp32f,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_8u_C1MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pMask: *const Ipp8u,
                               maskStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16u_C1MR(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_32f_C1MR(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_8u_C3CMR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16u_C3CMR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                 pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_32f_C3CMR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                 pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_8u_C1MR(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16u_C1MR(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_32f_C1MR(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_8u_C3CMR(pSrc1: *const Ipp8u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp8u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16u_C3CMR(pSrc1: *const Ipp16u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp16u,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_32f_C3CMR(pSrc1: *const Ipp32f,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp32f,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_8u_C1MR(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16u_C1MR(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_32f_C1MR(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_8u_C3CMR(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                   pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16u_C3CMR(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_32f_C3CMR(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_8u_C1MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pMask: *const Ipp8u,
                               maskStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16u_C1MR(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_32f_C1MR(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_8u_C3CMR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pMask: *const Ipp8u,
                                maskStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16u_C3CMR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                 pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_32f_C3CMR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pMask: *const Ipp8u,
                                 maskStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                 pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_8u_C1MR(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16u_C1MR(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_32f_C1MR(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_8u_C3CMR(pSrc1: *const Ipp8u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp8u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16u_C3CMR(pSrc1: *const Ipp16u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp16u,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_32f_C3CMR(pSrc1: *const Ipp32f,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp32f,
                                     src2Step: ipp_ctypes::c_int,
                                     pMask: *const Ipp8u,
                                     maskStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     coi: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_8u_C1MR(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16u_C1MR(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_32f_C1MR(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_8u_C3CMR(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pMask: *const Ipp8u,
                                   maskStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                   pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16u_C3CMR(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_32f_C3CMR(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pMask: *const Ipp8u,
                                    maskStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, coi: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiCannyGetSize(roiSize: IppiSize,
                            bufferSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCanny_16s8u_C1R(pSrcDx: *mut Ipp16s,
                               srcDxStep: ipp_ctypes::c_int,
                               pSrcDy: *mut Ipp16s,
                               srcDyStep: ipp_ctypes::c_int,
                               pDstEdges: *mut Ipp8u,
                               dstEdgeStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, lowThresh: Ipp32f,
                               highThresh: Ipp32f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCanny_32f8u_C1R(pSrcDx: *mut Ipp32f,
                               srcDxStep: ipp_ctypes::c_int,
                               pSrcDy: *mut Ipp32f,
                               srcDyStep: ipp_ctypes::c_int,
                               pDstEdges: *mut Ipp8u,
                               dstEdgeStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, lowThresh: Ipp32f,
                               highThresh: Ipp32f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiEigenValsVecsGetBufferSize_8u32f_C1R(roiSize: IppiSize,
                                                    apertureSize:
                                                        ipp_ctypes::c_int,
                                                    avgWindow:
                                                        ipp_ctypes::c_int,
                                                    bufferSize:
                                                        *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiEigenValsVecsGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                  apertureSize:
                                                      ipp_ctypes::c_int,
                                                  avgWindow:
                                                      ipp_ctypes::c_int,
                                                  bufferSize:
                                                      *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiEigenValsVecs_8u32f_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pEigenVV: *mut Ipp32f,
                                       eigStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       kernType: IppiKernelType,
                                       apertureSize: ipp_ctypes::c_int,
                                       avgWindow: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiEigenValsVecs_32f_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pEigenVV: *mut Ipp32f,
                                     eigStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     kernType: IppiKernelType,
                                     apertureSize: ipp_ctypes::c_int,
                                     avgWindow: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiEigenValsVecsBorder_8u32f_C1R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pEigenVV: *mut Ipp32f,
                                             eigStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             kernType: IppiKernelType,
                                             apertureSize: ipp_ctypes::c_int,
                                             avgWindow: ipp_ctypes::c_int,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp8u,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiEigenValsVecsBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pEigenVV: *mut Ipp32f,
                                           eigStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           kernType: IppiKernelType,
                                           apertureSize: ipp_ctypes::c_int,
                                           avgWindow: ipp_ctypes::c_int,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEigenValGetBufferSize_8u32f_C1R(roiSize: IppiSize,
                                                  apertureSize:
                                                      ipp_ctypes::c_int,
                                                  avgWindow:
                                                      ipp_ctypes::c_int,
                                                  bufferSize:
                                                      *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinEigenValGetBufferSize_32f_C1R(roiSize: IppiSize,
                                                apertureSize:
                                                    ipp_ctypes::c_int,
                                                avgWindow: ipp_ctypes::c_int,
                                                bufferSize:
                                                    *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinEigenVal_8u32f_C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pMinEigenVal: *mut Ipp32f,
                                     minValStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     kernType: IppiKernelType,
                                     apertureSize: ipp_ctypes::c_int,
                                     avgWindow: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEigenVal_32f_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pMinEigenVal: *mut Ipp32f,
                                   minValStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   kernType: IppiKernelType,
                                   apertureSize: ipp_ctypes::c_int,
                                   avgWindow: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEigenValBorder_8u32f_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pEigenVV: *mut Ipp32f,
                                           eigStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           kernType: IppiKernelType,
                                           apertureSize: ipp_ctypes::c_int,
                                           avgWndSize: ipp_ctypes::c_int,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp8u,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEigenValBorder_32f_C1R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pEigenVV: *mut Ipp32f,
                                         eigStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         kernType: IppiKernelType,
                                         apertureSize: ipp_ctypes::c_int,
                                         avgWndSize: ipp_ctypes::c_int,
                                         borderType: IppiBorderType,
                                         borderValue: Ipp32f,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiTrueDistanceTransformGetBufferSize_8u32f_C1R(roiSize: IppiSize,
                                                            pBufferSize:
                                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_3x3_8u32f_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp32f,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pMetrics: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_5x5_8u32f_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp32f,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pMetrics: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_3x3_8u16u_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16u,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_5x5_8u16u_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16u,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_3x3_8u_C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_5x5_8u_C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_3x3_8u_C1IR(pSrcDst: *mut Ipp8u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDistanceTransform_5x5_8u_C1IR(pSrcDst: *mut Ipp8u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTrueDistanceTransform_8u32f_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp32f,
                                               dstStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetDistanceTransformMask_32f(kerSize: ipp_ctypes::c_int,
                                            norm: IppiNorm,
                                            pMetrics: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetDistanceTransformMask_32s(kerSize: ipp_ctypes::c_int,
                                            norm: IppiNorm,
                                            pMetrics: *mut Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetDistanceTransformMask(maskType: ipp_ctypes::c_int,
                                        pMetrics: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiFastMarchingGetBufferSize_8u32f_C1R(roiSize: IppiSize,
                                                   pBufferSize:
                                                       *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFastMarching_8u32f_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, radius: Ipp32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFillGetSize(roiSize: IppiSize,
                                pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFillGetSize_Grad(roiSize: IppiSize,
                                     pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_8u_C1IR(pImage: *mut Ipp8u,
                                      imageStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, seed: IppiPoint,
                                      newVal: Ipp8u,
                                      pRegion: *mut IppiConnectedComp,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_8u_C1IR(pImage: *mut Ipp8u,
                                      imageStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, seed: IppiPoint,
                                      newVal: Ipp8u,
                                      pRegion: *mut IppiConnectedComp,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_16u_C1IR(pImage: *mut Ipp16u,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       newVal: Ipp16u,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_16u_C1IR(pImage: *mut Ipp16u,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       newVal: Ipp16u,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_32f_C1IR(pImage: *mut Ipp32f,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       newVal: Ipp32f,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_32f_C1IR(pImage: *mut Ipp32f,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       newVal: Ipp32f,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_32s_C1IR(pImage: *mut Ipp32s,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       newVal: Ipp32s,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_32s_C1IR(pImage: *mut Ipp32s,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       newVal: Ipp32s,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad4Con_8u_C1IR(pImage: *mut Ipp8u,
                                          imageStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize, seed: IppiPoint,
                                          newVal: Ipp8u, minDelta: Ipp8u,
                                          maxDelta: Ipp8u,
                                          pRegion: *mut IppiConnectedComp,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad8Con_8u_C1IR(pImage: *mut Ipp8u,
                                          imageStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize, seed: IppiPoint,
                                          newVal: Ipp8u, minDelta: Ipp8u,
                                          maxDelta: Ipp8u,
                                          pRegion: *mut IppiConnectedComp,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad4Con_16u_C1IR(pImage: *mut Ipp16u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           newVal: Ipp16u, minDelta: Ipp16u,
                                           maxDelta: Ipp16u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad8Con_16u_C1IR(pImage: *mut Ipp16u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           newVal: Ipp16u, minDelta: Ipp16u,
                                           maxDelta: Ipp16u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad4Con_32f_C1IR(pImage: *mut Ipp32f,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           newVal: Ipp32f, minDelta: Ipp32f,
                                           maxDelta: Ipp32f,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad8Con_32f_C1IR(pImage: *mut Ipp32f,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           newVal: Ipp32f, minDelta: Ipp32f,
                                           maxDelta: Ipp32f,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range4Con_8u_C1IR(pImage: *mut Ipp8u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           newVal: Ipp8u, minDelta: Ipp8u,
                                           maxDelta: Ipp8u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range8Con_8u_C1IR(pImage: *mut Ipp8u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           newVal: Ipp8u, minDelta: Ipp8u,
                                           maxDelta: Ipp8u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range4Con_16u_C1IR(pImage: *mut Ipp16u,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint, newVal: Ipp16u,
                                            minDelta: Ipp16u,
                                            maxDelta: Ipp16u,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range8Con_16u_C1IR(pImage: *mut Ipp16u,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint, newVal: Ipp16u,
                                            minDelta: Ipp16u,
                                            maxDelta: Ipp16u,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range4Con_32f_C1IR(pImage: *mut Ipp32f,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint, newVal: Ipp32f,
                                            minDelta: Ipp32f,
                                            maxDelta: Ipp32f,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range8Con_32f_C1IR(pImage: *mut Ipp32f,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint, newVal: Ipp32f,
                                            minDelta: Ipp32f,
                                            maxDelta: Ipp32f,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_8u_C3IR(pImage: *mut Ipp8u,
                                      imageStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, seed: IppiPoint,
                                      pNewVal: *mut Ipp8u,
                                      pRegion: *mut IppiConnectedComp,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_8u_C3IR(pImage: *mut Ipp8u,
                                      imageStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, seed: IppiPoint,
                                      pNewVal: *mut Ipp8u,
                                      pRegion: *mut IppiConnectedComp,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_16u_C3IR(pImage: *mut Ipp16u,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       pNewVal: *mut Ipp16u,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_16u_C3IR(pImage: *mut Ipp16u,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       pNewVal: *mut Ipp16u,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_4Con_32f_C3IR(pImage: *mut Ipp32f,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       pNewVal: *mut Ipp32f,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_8Con_32f_C3IR(pImage: *mut Ipp32f,
                                       imageStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, seed: IppiPoint,
                                       pNewVal: *mut Ipp32f,
                                       pRegion: *mut IppiConnectedComp,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad4Con_8u_C3IR(pImage: *mut Ipp8u,
                                          imageStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize, seed: IppiPoint,
                                          pNewVal: *mut Ipp8u,
                                          pMinDelta: *mut Ipp8u,
                                          pMaxDelta: *mut Ipp8u,
                                          pRegion: *mut IppiConnectedComp,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad8Con_8u_C3IR(pImage: *mut Ipp8u,
                                          imageStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize, seed: IppiPoint,
                                          pNewVal: *mut Ipp8u,
                                          pMinDelta: *mut Ipp8u,
                                          pMaxDelta: *mut Ipp8u,
                                          pRegion: *mut IppiConnectedComp,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad4Con_16u_C3IR(pImage: *mut Ipp16u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           pNewVal: *mut Ipp16u,
                                           pMinDelta: *mut Ipp16u,
                                           pMaxDelta: *mut Ipp16u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad8Con_16u_C3IR(pImage: *mut Ipp16u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           pNewVal: *mut Ipp16u,
                                           pMinDelta: *mut Ipp16u,
                                           pMaxDelta: *mut Ipp16u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad4Con_32f_C3IR(pImage: *mut Ipp32f,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           pNewVal: *mut Ipp32f,
                                           pMinDelta: *mut Ipp32f,
                                           pMaxDelta: *mut Ipp32f,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Grad8Con_32f_C3IR(pImage: *mut Ipp32f,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           pNewVal: *mut Ipp32f,
                                           pMinDelta: *mut Ipp32f,
                                           pMaxDelta: *mut Ipp32f,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range4Con_8u_C3IR(pImage: *mut Ipp8u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           pNewVal: *mut Ipp8u,
                                           pMinDelta: *mut Ipp8u,
                                           pMaxDelta: *mut Ipp8u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range8Con_8u_C3IR(pImage: *mut Ipp8u,
                                           imageStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, seed: IppiPoint,
                                           pNewVal: *mut Ipp8u,
                                           pMinDelta: *mut Ipp8u,
                                           pMaxDelta: *mut Ipp8u,
                                           pRegion: *mut IppiConnectedComp,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range4Con_16u_C3IR(pImage: *mut Ipp16u,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint,
                                            pNewVal: *mut Ipp16u,
                                            pMinDelta: *mut Ipp16u,
                                            pMaxDelta: *mut Ipp16u,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range8Con_16u_C3IR(pImage: *mut Ipp16u,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint,
                                            pNewVal: *mut Ipp16u,
                                            pMinDelta: *mut Ipp16u,
                                            pMaxDelta: *mut Ipp16u,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range4Con_32f_C3IR(pImage: *mut Ipp32f,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint,
                                            pNewVal: *mut Ipp32f,
                                            pMinDelta: *mut Ipp32f,
                                            pMaxDelta: *mut Ipp32f,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFloodFill_Range8Con_32f_C3IR(pImage: *mut Ipp32f,
                                            imageStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            seed: IppiPoint,
                                            pNewVal: *mut Ipp32f,
                                            pMinDelta: *mut Ipp32f,
                                            pMaxDelta: *mut Ipp32f,
                                            pRegion: *mut IppiConnectedComp,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiUpdateMotionHistory_8u32f_C1IR(pSilhouette: *const Ipp8u,
                                              silhStep: ipp_ctypes::c_int,
                                              pMHI: *mut Ipp32f,
                                              mhiStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              timestamp: Ipp32f,
                                              mhiDuration: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiUpdateMotionHistory_16u32f_C1IR(pSilhouette: *const Ipp16u,
                                               silhStep: ipp_ctypes::c_int,
                                               pMHI: *mut Ipp32f,
                                               mhiStep: ipp_ctypes::c_int,
                                               roiSize: IppiSize,
                                               timestamp: Ipp32f,
                                               mhiDuration: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiUpdateMotionHistory_32f_C1IR(pSilhouette: *const Ipp32f,
                                            silhStep: ipp_ctypes::c_int,
                                            pMHI: *mut Ipp32f,
                                            mhiStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            timestamp: Ipp32f,
                                            mhiDuration: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLKGetSize(winSize: ipp_ctypes::c_int,
                                       roi: IppiSize, dataType: IppDataType,
                                       hint: IppHintAlgorithm,
                                       pStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLKInit_8u_C1R(ppState:
                                               *mut *mut IppiOptFlowPyrLK_8u_C1R,
                                           roi: IppiSize,
                                           winSize: ipp_ctypes::c_int,
                                           hint: IppHintAlgorithm,
                                           pStateBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLKInit_16u_C1R(ppState:
                                                *mut *mut IppiOptFlowPyrLK_16u_C1R,
                                            roi: IppiSize,
                                            winSize: ipp_ctypes::c_int,
                                            hint: IppHintAlgorithm,
                                            pStateBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLKInit_32f_C1R(ppState:
                                                *mut *mut IppiOptFlowPyrLK_32f_C1R,
                                            roi: IppiSize,
                                            winSize: ipp_ctypes::c_int,
                                            hint: IppHintAlgorithm,
                                            pStateBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLK_8u_C1R(pPyr1: *mut IppiPyramid,
                                       pPyr2: *mut IppiPyramid,
                                       pPrev: *const IppiPoint_32f,
                                       pNext: *mut IppiPoint_32f,
                                       pStatus: *mut Ipp8s,
                                       pError: *mut Ipp32f,
                                       numFeat: ipp_ctypes::c_int,
                                       winSize: ipp_ctypes::c_int,
                                       maxLev: ipp_ctypes::c_int,
                                       maxIter: ipp_ctypes::c_int,
                                       threshold: Ipp32f,
                                       pState: *mut IppiOptFlowPyrLK_8u_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLK_16u_C1R(pPyr1: *mut IppiPyramid,
                                        pPyr2: *mut IppiPyramid,
                                        pPrev: *const IppiPoint_32f,
                                        pNext: *mut IppiPoint_32f,
                                        pStatus: *mut Ipp8s,
                                        pError: *mut Ipp32f,
                                        numFeat: ipp_ctypes::c_int,
                                        winSize: ipp_ctypes::c_int,
                                        maxLev: ipp_ctypes::c_int,
                                        maxIter: ipp_ctypes::c_int,
                                        threshold: Ipp32f,
                                        pState: *mut IppiOptFlowPyrLK_16u_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOpticalFlowPyrLK_32f_C1R(pPyr1: *mut IppiPyramid,
                                        pPyr2: *mut IppiPyramid,
                                        pRrev: *const IppiPoint_32f,
                                        pNext: *mut IppiPoint_32f,
                                        pStatus: *mut Ipp8s,
                                        pError: *mut Ipp32f,
                                        numFeat: ipp_ctypes::c_int,
                                        winSize: ipp_ctypes::c_int,
                                        maxLev: ipp_ctypes::c_int,
                                        maxIter: ipp_ctypes::c_int,
                                        threshold: Ipp32f,
                                        pState: *mut IppiOptFlowPyrLK_32f_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidGetSize(pPyrSize: *mut ipp_ctypes::c_int,
                              pBufSize: *mut ipp_ctypes::c_int,
                              level: ipp_ctypes::c_int, roiSize: IppiSize,
                              rate: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidInit(pPyr: *mut *mut IppiPyramid,
                           level: ipp_ctypes::c_int, roiSize: IppiSize,
                           rate: Ipp32f, pPyrBuffer: *mut Ipp8u,
                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownGetSize_8u_C1R(srcRoi: IppiSize, rate: Ipp32f,
                                              kerSize: ipp_ctypes::c_int,
                                              pStateSize:
                                                  *mut ipp_ctypes::c_int,
                                              pBufSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownGetSize_16u_C1R(srcRoi: IppiSize, rate: Ipp32f,
                                               kerSize: ipp_ctypes::c_int,
                                               pStateSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownGetSize_32f_C1R(srcRoi: IppiSize, rate: Ipp32f,
                                               kerSize: ipp_ctypes::c_int,
                                               pStateSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownGetSize_8u_C3R(srcRoi: IppiSize, rate: Ipp32f,
                                              kerSize: ipp_ctypes::c_int,
                                              pStateSize:
                                                  *mut ipp_ctypes::c_int,
                                              pBufSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownGetSize_16u_C3R(srcRoi: IppiSize, rate: Ipp32f,
                                               kerSize: ipp_ctypes::c_int,
                                               pStateSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownGetSize_32f_C3R(srcRoi: IppiSize, rate: Ipp32f,
                                               kerSize: ipp_ctypes::c_int,
                                               pStateSize:
                                                   *mut ipp_ctypes::c_int,
                                               pBufSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpGetSize_8u_C1R(dstRoi: IppiSize, rate: Ipp32f,
                                            kerSize: ipp_ctypes::c_int,
                                            pStateSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpGetSize_16u_C1R(dstRoi: IppiSize, rate: Ipp32f,
                                             kerSize: ipp_ctypes::c_int,
                                             pStateSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpGetSize_32f_C1R(dstRoi: IppiSize, rate: Ipp32f,
                                             kerSize: ipp_ctypes::c_int,
                                             pStateSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpGetSize_8u_C3R(dstRoi: IppiSize, rate: Ipp32f,
                                            kerSize: ipp_ctypes::c_int,
                                            pStateSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpGetSize_16u_C3R(dstRoi: IppiSize, rate: Ipp32f,
                                             kerSize: ipp_ctypes::c_int,
                                             pStateSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpGetSize_32f_C3R(dstRoi: IppiSize, rate: Ipp32f,
                                             kerSize: ipp_ctypes::c_int,
                                             pStateSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownInit_8u_C1R(ppState:
                                               *mut *mut IppiPyramidDownState_8u_C1R,
                                           srcRoi: IppiSize, rate: Ipp32f,
                                           pKernel: *mut Ipp16s,
                                           kerSize: ipp_ctypes::c_int,
                                           mode: ipp_ctypes::c_int,
                                           StateBuf: *mut Ipp8u,
                                           Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownInit_16u_C1R(ppState:
                                                *mut *mut IppiPyramidDownState_16u_C1R,
                                            srcRoi: IppiSize, rate: Ipp32f,
                                            pKernel: *mut Ipp16s,
                                            kerSize: ipp_ctypes::c_int,
                                            mode: ipp_ctypes::c_int,
                                            StateBuf: *mut Ipp8u,
                                            Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownInit_32f_C1R(pState:
                                                *mut *mut IppiPyramidDownState_32f_C1R,
                                            srcRoi: IppiSize, rate: Ipp32f,
                                            pKernel: *mut Ipp32f,
                                            kerSize: ipp_ctypes::c_int,
                                            mode: ipp_ctypes::c_int,
                                            StateBuf: *mut Ipp8u,
                                            Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownInit_8u_C3R(ppState:
                                               *mut *mut IppiPyramidDownState_8u_C3R,
                                           srcRoi: IppiSize, rate: Ipp32f,
                                           pKernel: *mut Ipp16s,
                                           kerSize: ipp_ctypes::c_int,
                                           mode: ipp_ctypes::c_int,
                                           StateBuf: *mut Ipp8u,
                                           Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownInit_16u_C3R(ppState:
                                                *mut *mut IppiPyramidDownState_16u_C3R,
                                            srcRoi: IppiSize, rate: Ipp32f,
                                            pKernel: *mut Ipp16s,
                                            kerSize: ipp_ctypes::c_int,
                                            mode: ipp_ctypes::c_int,
                                            StateBuf: *mut Ipp8u,
                                            Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDownInit_32f_C3R(ppState:
                                                *mut *mut IppiPyramidDownState_32f_C3R,
                                            srcRoi: IppiSize, rate: Ipp32f,
                                            pKernel: *mut Ipp32f,
                                            kerSize: ipp_ctypes::c_int,
                                            mode: ipp_ctypes::c_int,
                                            StateBuf: *mut Ipp8u,
                                            Buffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpInit_8u_C1R(ppState:
                                             *mut *mut IppiPyramidUpState_8u_C1R,
                                         dstRoi: IppiSize, rate: Ipp32f,
                                         pKernel: *mut Ipp16s,
                                         kerSize: ipp_ctypes::c_int,
                                         mode: ipp_ctypes::c_int,
                                         StateBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpInit_16u_C1R(ppState:
                                              *mut *mut IppiPyramidUpState_16u_C1R,
                                          dstRoi: IppiSize, rate: Ipp32f,
                                          pKernel: *mut Ipp16s,
                                          kerSize: ipp_ctypes::c_int,
                                          mode: ipp_ctypes::c_int,
                                          StateBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpInit_32f_C1R(ppState:
                                              *mut *mut IppiPyramidUpState_32f_C1R,
                                          dstRoi: IppiSize, rate: Ipp32f,
                                          pKernel: *mut Ipp32f,
                                          kerSize: ipp_ctypes::c_int,
                                          mode: ipp_ctypes::c_int,
                                          StateBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpInit_8u_C3R(ppState:
                                             *mut *mut IppiPyramidUpState_8u_C3R,
                                         dstRoi: IppiSize, rate: Ipp32f,
                                         pKernel: *mut Ipp16s,
                                         kerSize: ipp_ctypes::c_int,
                                         mode: ipp_ctypes::c_int,
                                         StateBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpInit_16u_C3R(ppState:
                                              *mut *mut IppiPyramidUpState_16u_C3R,
                                          dstRoi: IppiSize, rate: Ipp32f,
                                          pKernel: *mut Ipp16s,
                                          kerSize: ipp_ctypes::c_int,
                                          mode: ipp_ctypes::c_int,
                                          StateBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUpInit_32f_C3R(ppState:
                                              *mut *mut IppiPyramidUpState_32f_C3R,
                                          dstRoi: IppiSize, rate: Ipp32f,
                                          pKernel: *mut Ipp32f,
                                          kerSize: ipp_ctypes::c_int,
                                          mode: ipp_ctypes::c_int,
                                          StateBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiGetPyramidDownROI(srcRoi: IppiSize, pDstRoi: *mut IppiSize,
                                 rate: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGetPyramidUpROI(srcRoi: IppiSize, pDstRoiMin: *mut IppiSize,
                               pDstRoiMax: *mut IppiSize, rate: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDown_8u_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       pState:
                                           *mut IppiPyramidDownState_8u_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDown_8u_C3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       pState:
                                           *mut IppiPyramidDownState_8u_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDown_16u_C1R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        pState:
                                            *mut IppiPyramidDownState_16u_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDown_16u_C3R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        pState:
                                            *mut IppiPyramidDownState_16u_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDown_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        pState:
                                            *mut IppiPyramidDownState_32f_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerDown_32f_C3R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        pState:
                                            *mut IppiPyramidDownState_32f_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUp_8u_C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize,
                                     pState: *mut IppiPyramidUpState_8u_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUp_8u_C3R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize,
                                     pState: *mut IppiPyramidUpState_8u_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUp_16u_C1R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      pState: *mut IppiPyramidUpState_16u_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUp_16u_C3R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      pState: *mut IppiPyramidUpState_16u_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUp_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      pState: *mut IppiPyramidUpState_32f_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPyramidLayerUp_32f_C3R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      pState: *mut IppiPyramidUpState_32f_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHaarClassifierInit_32f(pState: *mut IppiHaarClassifier_32f,
                                      pFeature: *const IppiRect,
                                      pWeight: *const Ipp32f,
                                      pThreshold: *const Ipp32f,
                                      pVal1: *const Ipp32f,
                                      pVal2: *const Ipp32f,
                                      pNum: *const ipp_ctypes::c_int,
                                      length: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiHaarClassifierInit_32s(pState: *mut IppiHaarClassifier_32s,
                                      pFeature: *const IppiRect,
                                      pWeight: *const Ipp32s,
                                      pThreshold: *const Ipp32s,
                                      pVal1: *const Ipp32s,
                                      pVal2: *const Ipp32s,
                                      pNum: *const ipp_ctypes::c_int,
                                      length: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedHaarClassifierInit_32f(pState:
                                                *mut IppiHaarClassifier_32f,
                                            pFeature: *const IppiRect,
                                            pWeight: *const Ipp32f,
                                            pThreshold: *const Ipp32f,
                                            pVal1: *const Ipp32f,
                                            pVal2: *const Ipp32f,
                                            pNum: *const ipp_ctypes::c_int,
                                            length: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltedHaarClassifierInit_32s(pState:
                                                *mut IppiHaarClassifier_32s,
                                            pFeature: *const IppiRect,
                                            pWeight: *const Ipp32s,
                                            pThreshold: *const Ipp32s,
                                            pVal1: *const Ipp32s,
                                            pVal2: *const Ipp32s,
                                            pNum: *const ipp_ctypes::c_int,
                                            length: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHaarClassifierGetSize(dataType: IppDataType, roiSize: IppiSize,
                                     pNum: *const ipp_ctypes::c_int,
                                     length: ipp_ctypes::c_int,
                                     pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltHaarFeatures_32f(pMask: *const Ipp8u,
                                    flag: ipp_ctypes::c_int,
                                    pState: *mut IppiHaarClassifier_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTiltHaarFeatures_32s(pMask: *const Ipp8u,
                                    flag: ipp_ctypes::c_int,
                                    pState: *mut IppiHaarClassifier_32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetHaarClassifierSize_32f(pState: *mut IppiHaarClassifier_32f,
                                         pSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiGetHaarClassifierSize_32s(pState: *mut IppiHaarClassifier_32s,
                                         pSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiApplyHaarClassifier_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pNorm: *const Ipp32f,
                                           normStep: ipp_ctypes::c_int,
                                           pMask: *mut Ipp8u,
                                           maskStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           pPositive: *mut ipp_ctypes::c_int,
                                           threshold: Ipp32f,
                                           pState:
                                               *mut IppiHaarClassifier_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiApplyHaarClassifier_32s32f_C1R(pSrc: *const Ipp32s,
                                              srcStep: ipp_ctypes::c_int,
                                              pNorm: *const Ipp32f,
                                              normStep: ipp_ctypes::c_int,
                                              pMask: *mut Ipp8u,
                                              maskStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pPositive:
                                                  *mut ipp_ctypes::c_int,
                                              threshold: Ipp32f,
                                              pState:
                                                  *mut IppiHaarClassifier_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiApplyHaarClassifier_32s_C1RSfs(pSrc: *const Ipp32s,
                                              srcStep: ipp_ctypes::c_int,
                                              pNorm: *const Ipp32s,
                                              normStep: ipp_ctypes::c_int,
                                              pMask: *mut Ipp8u,
                                              maskStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              pPositive:
                                                  *mut ipp_ctypes::c_int,
                                              threshold: Ipp32s,
                                              pState:
                                                  *mut IppiHaarClassifier_32s,
                                              scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiApplyMixedHaarClassifier_32f_C1R(pSrc: *const Ipp32f,
                                                srcStep: ipp_ctypes::c_int,
                                                pTilt: *const Ipp32f,
                                                tiltStep: ipp_ctypes::c_int,
                                                pNorm: *const Ipp32f,
                                                normStep: ipp_ctypes::c_int,
                                                pMask: *mut Ipp8u,
                                                maskStep: ipp_ctypes::c_int,
                                                roiSize: IppiSize,
                                                pPositive:
                                                    *mut ipp_ctypes::c_int,
                                                threshold: Ipp32f,
                                                pState:
                                                    *mut IppiHaarClassifier_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiApplyMixedHaarClassifier_32s32f_C1R(pSrc: *const Ipp32s,
                                                   srcStep: ipp_ctypes::c_int,
                                                   pTilt: *const Ipp32s,
                                                   tiltStep:
                                                       ipp_ctypes::c_int,
                                                   pNorm: *const Ipp32f,
                                                   normStep:
                                                       ipp_ctypes::c_int,
                                                   pMask: *mut Ipp8u,
                                                   maskStep:
                                                       ipp_ctypes::c_int,
                                                   roiSize: IppiSize,
                                                   pPositive:
                                                       *mut ipp_ctypes::c_int,
                                                   threshold: Ipp32f,
                                                   pState:
                                                       *mut IppiHaarClassifier_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiApplyMixedHaarClassifier_32s_C1RSfs(pSrc: *const Ipp32s,
                                                   srcStep: ipp_ctypes::c_int,
                                                   pTilt: *const Ipp32s,
                                                   tiltStep:
                                                       ipp_ctypes::c_int,
                                                   pNorm: *const Ipp32s,
                                                   normStep:
                                                       ipp_ctypes::c_int,
                                                   pMask: *mut Ipp8u,
                                                   maskStep:
                                                       ipp_ctypes::c_int,
                                                   roiSize: IppiSize,
                                                   pPositive:
                                                       *mut ipp_ctypes::c_int,
                                                   threshold: Ipp32s,
                                                   pState:
                                                       *mut IppiHaarClassifier_32s,
                                                   scaleFactor:
                                                       ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortGetSize(roiSize: IppiSize,
                                pBufsize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCreateMapCameraUndistort_32f_C1R(pxMap: *mut Ipp32f,
                                                xStep: ipp_ctypes::c_int,
                                                pyMap: *mut Ipp32f,
                                                yStep: ipp_ctypes::c_int,
                                                roiSize: IppiSize, fx: Ipp32f,
                                                fy: Ipp32f, cx: Ipp32f,
                                                cy: Ipp32f, k1: Ipp32f,
                                                k2: Ipp32f, p1: Ipp32f,
                                                p2: Ipp32f,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortRadial_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, fx: Ipp32f,
                                      fy: Ipp32f, cx: Ipp32f, cy: Ipp32f,
                                      k1: Ipp32f, k2: Ipp32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortRadial_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, fx: Ipp32f,
                                       fy: Ipp32f, cx: Ipp32f, cy: Ipp32f,
                                       k1: Ipp32f, k2: Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortRadial_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, fx: Ipp32f,
                                       fy: Ipp32f, cx: Ipp32f, cy: Ipp32f,
                                       k1: Ipp32f, k2: Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortRadial_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, fx: Ipp32f,
                                      fy: Ipp32f, cx: Ipp32f, cy: Ipp32f,
                                      k1: Ipp32f, k2: Ipp32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortRadial_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, fx: Ipp32f,
                                       fy: Ipp32f, cx: Ipp32f, cy: Ipp32f,
                                       k1: Ipp32f, k2: Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiUndistortRadial_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, fx: Ipp32f,
                                       fy: Ipp32f, cx: Ipp32f, cy: Ipp32f,
                                       k1: Ipp32f, k2: Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiGradientColorToGray_8u_C3C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize, norm: IppiNorm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientColorToGray_16u_C3C1R(pSrc: *const Ipp16u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16u,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiGradientColorToGray_32f_C3C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiInpaintGetSize(pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              radius: Ipp32f, flags: IppiInpaintFlag,
                              channels: ipp_ctypes::c_int,
                              pStateSize: *mut ipp_ctypes::c_int,
                              pBufSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiInpaintInit_8u_C1R(ppState: *mut *mut IppiInpaintState_8u_C1R,
                                  pDist: *const Ipp32f,
                                  distStep: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, radius: Ipp32f,
                                  flags: IppiInpaintFlag,
                                  pStateBuf: *mut Ipp8u, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiInpaintInit_8u_C3R(ppState: *mut *mut IppiInpaintState_8u_C3R,
                                  pDist: *const Ipp32f,
                                  distStep: ipp_ctypes::c_int,
                                  pMask: *const Ipp8u,
                                  maskStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, radius: Ipp32f,
                                  flags: IppiInpaintFlag,
                                  pStateBuf: *mut Ipp8u, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiInpaint_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              pState: *mut IppiInpaintState_8u_C1R,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiInpaint_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              pState: *mut IppiInpaintState_8u_C1R,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentGradientGetBufferSize_8u_C1R(roiSize: IppiSize,
                                                   pBufSize:
                                                       *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentGradientGetBufferSize_8u_C3R(roiSize: IppiSize,
                                                   pBufSize:
                                                       *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentGradient_8u_C3IR(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pMarker: *mut Ipp8u,
                                       markerStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, norm: IppiNorm,
                                       flags: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentGradient_8u_C1IR(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pMarker: *mut Ipp8u,
                                       markerStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, norm: IppiNorm,
                                       flags: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentWatershedGetBufferSize_8u_C1R(roiSize: IppiSize,
                                                    pBufSize:
                                                        *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentWatershedGetBufferSize_8u16u_C1R(roiSize: IppiSize,
                                                       pBufSize:
                                                           *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentWatershedGetBufferSize_32f16u_C1R(roiSize: IppiSize,
                                                        pBufSize:
                                                            *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentWatershed_8u_C1IR(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pMarker: *mut Ipp8u,
                                        markerStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, norm: IppiNorm,
                                        flag: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentWatershed_8u16u_C1IR(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pMarker: *mut Ipp16u,
                                           markerStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize, norm: IppiNorm,
                                           flag: ipp_ctypes::c_int,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSegmentWatershed_32f16u_C1IR(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pMarker: *mut Ipp16u,
                                            markerStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize, norm: IppiNorm,
                                            flag: ipp_ctypes::c_int,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiBoundSegments_8u_C1IR(pMarker: *mut Ipp8u,
                                     markerStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, val: Ipp8u,
                                     norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiBoundSegments_16u_C1IR(pMarker: *mut Ipp16u,
                                      markerStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, val: Ipp16u,
                                      norm: IppiNorm) -> IppStatus;
}
extern "C" {
    pub fn ippiLabelMarkersGetBufferSize_8u_C1R(roiSize: IppiSize,
                                                pBufSize:
                                                    *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLabelMarkersGetBufferSize_8u32s_C1R(roiSize: IppiSize,
                                                   pBufSize:
                                                       *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLabelMarkersGetBufferSize_16u_C1R(roiSize: IppiSize,
                                                 pBufSize:
                                                     *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLabelMarkers_8u_C1IR(pMarker: *mut Ipp8u,
                                    markerStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    minLabel: ipp_ctypes::c_int,
                                    maxLabel: ipp_ctypes::c_int,
                                    norm: IppiNorm,
                                    pNumber: *mut ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiLabelMarkers_8u32s_C1R(pSrcMarker: *mut Ipp8u,
                                      srcMarkerStep: ipp_ctypes::c_int,
                                      pDstMarker: *mut Ipp32s,
                                      dstMarkerStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      minLabel: ipp_ctypes::c_int,
                                      maxLabel: ipp_ctypes::c_int,
                                      norm: IppiNorm,
                                      pNumber: *mut ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiLabelMarkers_16u_C1IR(pMarker: *mut Ipp16u,
                                     markerStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     minLabel: ipp_ctypes::c_int,
                                     maxLabel: ipp_ctypes::c_int,
                                     norm: IppiNorm,
                                     pNumber: *mut ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianGetBufferSize(maxRoiSize: IppiSize,
                                           kernelSize: Ipp32u,
                                           dataType: IppDataType,
                                           numChannels: ipp_ctypes::c_int,
                                           pSpecSize: *mut ipp_ctypes::c_int,
                                           pBufferSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianInit(roiSize: IppiSize, kernelSize: Ipp32u,
                                  sigma: Ipp32f, borderType: IppiBorderType,
                                  dataType: IppDataType,
                                  numChannels: ipp_ctypes::c_int,
                                  pSpec: *mut IppFilterGaussianSpec,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_32f_C1R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            borderValue: Ipp32f,
                                            pSpec: *mut IppFilterGaussianSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_16u_C1R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            borderValue: Ipp16u,
                                            pSpec: *mut IppFilterGaussianSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_16s_C1R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            borderValue: Ipp16s,
                                            pSpec: *mut IppFilterGaussianSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_8u_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderValue: Ipp8u,
                                           pSpec: *mut IppFilterGaussianSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_32f_C3R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            borderValue: *mut Ipp32f,
                                            pSpec: *mut IppFilterGaussianSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_16u_C3R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            borderValue: *mut Ipp16u,
                                            pSpec: *mut IppFilterGaussianSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_16s_C3R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            borderValue: *mut Ipp16s,
                                            pSpec: *mut IppFilterGaussianSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGaussianBorder_8u_C3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           borderValue: *mut Ipp8u,
                                           pSpec: *mut IppFilterGaussianSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFindPeaks3x3GetBufferSize_32f_C1R(roiWidth: ipp_ctypes::c_int,
                                                 pBufferSize:
                                                     *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFindPeaks3x3GetBufferSize_32s_C1R(roiWidth: ipp_ctypes::c_int,
                                                 pBufferSize:
                                                     *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFindPeaks3x3_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp32f,
                                    pPeak: *mut IppiPoint,
                                    maxPeakCount: ipp_ctypes::c_int,
                                    pPeakCount: *mut ipp_ctypes::c_int,
                                    norm: IppiNorm, Border: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFindPeaks3x3_32s_C1R(pSrc: *const Ipp32s,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp32s,
                                    pPeak: *mut IppiPoint,
                                    maxPeakCount: ipp_ctypes::c_int,
                                    pPeakCount: *mut ipp_ctypes::c_int,
                                    norm: IppiNorm, Border: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHoughLineGetSize_8u_C1R(roiSize: IppiSize,
                                       delta: IppPointPolar,
                                       maxLineCount: ipp_ctypes::c_int,
                                       pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHoughLine_8u32f_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, delta: IppPointPolar,
                                   threshold: ipp_ctypes::c_int,
                                   pLine: *mut IppPointPolar,
                                   maxLineCount: ipp_ctypes::c_int,
                                   pLineCount: *mut ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHoughLine_Region_8u32f_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          roiSize: IppiSize,
                                          pLine: *mut IppPointPolar,
                                          dstRoi: *mut IppPointPolar,
                                          maxLineCount: ipp_ctypes::c_int,
                                          pLineCount: *mut ipp_ctypes::c_int,
                                          delta: IppPointPolar,
                                          threshold: ipp_ctypes::c_int,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHoughProbLineGetSize_8u_C1R(roiSize: IppiSize,
                                           delta: IppPointPolar,
                                           pSpecSize: *mut ipp_ctypes::c_int,
                                           pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHoughProbLineInit_8u32f_C1R(roiSize: IppiSize,
                                           delta: IppPointPolar,
                                           hint: IppHintAlgorithm,
                                           pSpec: *mut IppiHoughProbSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHoughProbLine_8u32f_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: ipp_ctypes::c_int,
                                       lineLength: ipp_ctypes::c_int,
                                       lineGap: ipp_ctypes::c_int,
                                       pLine: *mut IppiPoint,
                                       maxLineCount: ipp_ctypes::c_int,
                                       pLineCount: *mut ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u,
                                       pSpec: *const IppiHoughProbSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCannyBorder_8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  filterType: IppiDifferentialKernel,
                                  mask: IppiMaskSize,
                                  borderType: IppiBorderType,
                                  borderValue: Ipp8u, lowThresh: Ipp32f,
                                  highThresh: Ipp32f, norm: IppNormType,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCannyBorderGetSize(roiSize: IppiSize,
                                  filterType: IppiDifferentialKernel,
                                  mask: IppiMaskSize, dataType: IppDataType,
                                  pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHarrisCornerGetBufferSize(roiSize: IppiSize,
                                         filterMask: IppiMaskSize,
                                         avgWndSize: Ipp32u,
                                         dataType: IppDataType,
                                         numChannels: ipp_ctypes::c_int,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHarrisCorner_8u32f_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      filterType: IppiDifferentialKernel,
                                      filterMask: IppiMaskSize,
                                      avgWndSize: Ipp32u, k: f32, scale: f32,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp8u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHarrisCorner_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    filterType: IppiDifferentialKernel,
                                    filterMask: IppiMaskSize,
                                    avgWndSize: Ipp32u, k: f32, scale: f32,
                                    borderType: IppiBorderType,
                                    borderValue: Ipp32f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLineSuppressionGetBufferSize(roiSize: IppiSize,
                                            filterMask: IppiMaskSize,
                                            avgWndSize: Ipp32u,
                                            dataType: IppDataType,
                                            numChannels: ipp_ctypes::c_int,
                                            pBufferSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLineSuppression_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pFeature: *const Ipp8u,
                                      featureStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      filterType: IppiDifferentialKernel,
                                      filterMask: IppiMaskSize,
                                      avgWndSize: Ipp32u, threshold: f32,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp8u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMarkSpecklesGetBufferSize(roiSize: IppiSize,
                                         dataType: IppDataType,
                                         numChannels: ipp_ctypes::c_int,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMarkSpeckles_8u_C1IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, speckleVal: Ipp8u,
                                    maxSpeckleSize: ipp_ctypes::c_int,
                                    maxPixDiff: Ipp8u, norm: IppiNorm,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMarkSpeckles_16u_C1IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, speckleVal: Ipp16u,
                                     maxSpeckleSize: ipp_ctypes::c_int,
                                     maxPixDiff: Ipp16u, norm: IppiNorm,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMarkSpeckles_16s_C1IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, speckleVal: Ipp16s,
                                     maxSpeckleSize: ipp_ctypes::c_int,
                                     maxPixDiff: Ipp16s, norm: IppiNorm,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMarkSpeckles_32f_C1IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, speckleVal: Ipp32f,
                                     maxSpeckleSize: ipp_ctypes::c_int,
                                     maxPixDiff: Ipp32f, norm: IppiNorm,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFastNGetSize(srcSize: IppiSize,
                            circleRadius: ipp_ctypes::c_int,
                            N: ipp_ctypes::c_int,
                            orientationBins: ipp_ctypes::c_int,
                            option: ipp_ctypes::c_int, dataType: IppDataType,
                            nChannels: ipp_ctypes::c_int,
                            pSpecSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiFastNInit(srcSize: IppiSize, circleRadius: ipp_ctypes::c_int,
                         N: ipp_ctypes::c_int,
                         orientationBins: ipp_ctypes::c_int,
                         option: ipp_ctypes::c_int, threshold: Ipp32f,
                         dataType: IppDataType, nChannels: ipp_ctypes::c_int,
                         pSpec: *mut IppiFastNSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiFastNGetBufferSize(pSpec: *mut IppiFastNSpec,
                                  dstRoiSize: IppiSize,
                                  pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFastN_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDstCorner: *mut Ipp8u,
                            dstCornerStep: ipp_ctypes::c_int,
                            pDstScore: *mut Ipp8u,
                            dstScoreStep: ipp_ctypes::c_int,
                            pNumCorner: *mut ipp_ctypes::c_int,
                            srcRoiOffset: IppiPoint, dstRoiSize: IppiSize,
                            pSpec: *mut IppiFastNSpec, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFastN2DToVec_8u(pSrcCorner: *const Ipp8u,
                               srcCornerStep: ipp_ctypes::c_int,
                               pSrcScore: *const Ipp8u,
                               srcScoreStep: ipp_ctypes::c_int,
                               pDst: *mut IppiCornerFastN,
                               srcRoiSize: IppiSize,
                               maxLen: ipp_ctypes::c_int,
                               pNumCorners: *mut ipp_ctypes::c_int,
                               pSpec: *mut IppiFastNSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiFGMMGetBufferSize_8u_C3R(roi: IppiSize,
                                        maxNGauss: ipp_ctypes::c_int,
                                        pSpecSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFGMMInit_8u_C3R(roi: IppiSize, maxNGauss: ipp_ctypes::c_int,
                               pModel: *mut IppFGMModel,
                               pState: *mut IppFGMMState_8u_C3R) -> IppStatus;
}
extern "C" {
    pub fn ippiFGMMForeground_8u_C3R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize,
                                     pState: *mut IppFGMMState_8u_C3R,
                                     pModel: *mut IppFGMModel,
                                     learning_rate: f64) -> IppStatus;
}
extern "C" {
    pub fn ippiFGMMBackground_8u_C3R(pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize,
                                     pState: *mut IppFGMMState_8u_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMalloc_8u_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                              pStepBytes: *mut IppSizeL) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C1_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                              pStepBytes: *mut IppSizeL) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C2_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                              pStepBytes: *mut IppSizeL) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C3_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                              pStepBytes: *mut IppSizeL) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_AC4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                               pStepBytes: *mut IppSizeL) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_AC4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_AC4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_AC4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_AC4_L(widthPixels: IppSizeL, heightPixels: IppSizeL,
                                pStepBytes: *mut IppSizeL) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_AC4_L(widthPixels: IppSizeL,
                                 heightPixels: IppSizeL,
                                 pStepBytes: *mut IppSizeL) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_AC4_L(widthPixels: IppSizeL,
                                 heightPixels: IppSizeL,
                                 pStepBytes: *mut IppSizeL) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiCopy_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                             pDst: *mut Ipp8u, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                             pDst: *mut Ipp8u, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                             pDst: *mut Ipp8u, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_AC4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                              pDst: *mut Ipp8u, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_AC4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               pDst: *mut Ipp32f, dstStep: IppSizeL,
                               roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C1R_L(pSrc: *const Ipp8u,
                                            srcStep: IppSizeL,
                                            srcRoiSize: IppiSizeL,
                                            pDst: *mut Ipp8u,
                                            dstStep: IppSizeL,
                                            dstRoiSize: IppiSizeL,
                                            topBorderHeight: IppSizeL,
                                            leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C3R_L(pSrc: *const Ipp8u,
                                            srcStep: IppSizeL,
                                            srcRoiSize: IppiSizeL,
                                            pDst: *mut Ipp8u,
                                            dstStep: IppSizeL,
                                            dstRoiSize: IppiSizeL,
                                            topBorderHeight: IppSizeL,
                                            leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C4R_L(pSrc: *const Ipp8u,
                                            srcStep: IppSizeL,
                                            srcRoiSize: IppiSizeL,
                                            pDst: *mut Ipp8u,
                                            dstStep: IppSizeL,
                                            dstRoiSize: IppiSizeL,
                                            topBorderHeight: IppSizeL,
                                            leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_AC4R_L(pSrc: *const Ipp8u,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp8u,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C1R_L(pSrc: *const Ipp16s,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp16s,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C3R_L(pSrc: *const Ipp16s,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp16s,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_AC4R_L(pSrc: *const Ipp16s,
                                              srcStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              pDst: *mut Ipp16s,
                                              dstStep: IppSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C4R_L(pSrc: *const Ipp16s,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp16s,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C1R_L(pSrc: *const Ipp16u,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp16u,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C3R_L(pSrc: *const Ipp16u,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp16u,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_AC4R_L(pSrc: *const Ipp16u,
                                              srcStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              pDst: *mut Ipp16u,
                                              dstStep: IppSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C4R_L(pSrc: *const Ipp16u,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp16u,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C1R_L(pSrc: *const Ipp32s,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp32s,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C3R_L(pSrc: *const Ipp32s,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp32s,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_AC4R_L(pSrc: *const Ipp32s,
                                              srcStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              pDst: *mut Ipp32s,
                                              dstStep: IppSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C4R_L(pSrc: *const Ipp32s,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp32s,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C1IR_L(pSrc: *const Ipp32s,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C3IR_L(pSrc: *const Ipp32s,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_AC4IR_L(pSrc: *const Ipp32s,
                                               srcDstStep: IppSizeL,
                                               srcRoiSize: IppiSizeL,
                                               dstRoiSize: IppiSizeL,
                                               topBorderHeight: IppSizeL,
                                               leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C4IR_L(pSrc: *const Ipp32s,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C1R_L(pSrc: *const Ipp32f,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp32f,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C3R_L(pSrc: *const Ipp32f,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp32f,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_AC4R_L(pSrc: *const Ipp32f,
                                              srcStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              pDst: *mut Ipp32f,
                                              dstStep: IppSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C4R_L(pSrc: *const Ipp32f,
                                             srcStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             pDst: *mut Ipp32f,
                                             dstStep: IppSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C1IR_L(pSrc: *const Ipp32f,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C3IR_L(pSrc: *const Ipp32f,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_AC4IR_L(pSrc: *const Ipp32f,
                                               srcDstStep: IppSizeL,
                                               srcRoiSize: IppiSizeL,
                                               dstRoiSize: IppiSizeL,
                                               topBorderHeight: IppSizeL,
                                               leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C4IR_L(pSrc: *const Ipp32f,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C1IR_L(pSrc: *const Ipp8u,
                                             srcDstStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C3IR_L(pSrc: *const Ipp8u,
                                             srcDstStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_AC4IR_L(pSrc: *const Ipp8u,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C4IR_L(pSrc: *const Ipp8u,
                                             srcDstStep: IppSizeL,
                                             srcRoiSize: IppiSizeL,
                                             dstRoiSize: IppiSizeL,
                                             topBorderHeight: IppSizeL,
                                             leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C1IR_L(pSrc: *const Ipp16u,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C3IR_L(pSrc: *const Ipp16u,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_AC4IR_L(pSrc: *const Ipp16u,
                                               srcDstStep: IppSizeL,
                                               srcRoiSize: IppiSizeL,
                                               dstRoiSize: IppiSizeL,
                                               topBorderHeight: IppSizeL,
                                               leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C4IR_L(pSrc: *const Ipp16u,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C1IR_L(pSrc: *const Ipp16s,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C3IR_L(pSrc: *const Ipp16s,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_AC4IR_L(pSrc: *const Ipp16s,
                                               srcDstStep: IppSizeL,
                                               srcRoiSize: IppiSizeL,
                                               dstRoiSize: IppiSizeL,
                                               topBorderHeight: IppSizeL,
                                               leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C4IR_L(pSrc: *const Ipp16s,
                                              srcDstStep: IppSizeL,
                                              srcRoiSize: IppiSizeL,
                                              dstRoiSize: IppiSizeL,
                                              topBorderHeight: IppSizeL,
                                              leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32s_C1R_L(pSrc: *const Ipp32s,
                                        srcStep: IppSizeL,
                                        srcRoiSize: IppiSizeL,
                                        pDst: *mut Ipp32s, dstStep: IppSizeL,
                                        dstRoiSize: IppiSizeL,
                                        topBorderHeight: IppSizeL,
                                        leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32s_C1IR_L(pSrc: *const Ipp32s,
                                         srcDstStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32f_C1R_L(pSrc: *const Ipp32f,
                                        srcStep: IppSizeL,
                                        srcRoiSize: IppiSizeL,
                                        pDst: *mut Ipp32f, dstStep: IppSizeL,
                                        dstRoiSize: IppiSizeL,
                                        topBorderHeight: IppSizeL,
                                        leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32f_C1IR_L(pSrc: *const Ipp32f,
                                         srcDstStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                        srcRoiSize: IppiSizeL,
                                        pDst: *mut Ipp8u, dstStep: IppSizeL,
                                        dstRoiSize: IppiSizeL,
                                        topBorderHeight: IppSizeL,
                                        leftBorderWidth: IppSizeL,
                                        value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                        srcRoiSize: IppiSizeL,
                                        pDst: *mut Ipp8u, dstStep: IppSizeL,
                                        dstRoiSize: IppiSizeL,
                                        topBorderHeight: IppSizeL,
                                        leftBorderWidth: IppSizeL,
                                        value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_AC4R_L(pSrc: *const Ipp8u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp8u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                        srcRoiSize: IppiSizeL,
                                        pDst: *mut Ipp8u, dstStep: IppSizeL,
                                        dstRoiSize: IppiSizeL,
                                        topBorderHeight: IppSizeL,
                                        leftBorderWidth: IppSizeL,
                                        value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C1R_L(pSrc: *const Ipp16s,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp16s, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C3R_L(pSrc: *const Ipp16s,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp16s, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_AC4R_L(pSrc: *const Ipp16s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL,
                                          value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C4R_L(pSrc: *const Ipp16s,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp16s, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C1R_L(pSrc: *const Ipp32s,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp32s, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C3R_L(pSrc: *const Ipp32s,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp32s, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_AC4R_L(pSrc: *const Ipp32s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL,
                                          value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C4R_L(pSrc: *const Ipp32s,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp32s, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C1R_L(pSrc: *const Ipp16u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp16u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C3R_L(pSrc: *const Ipp16u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp16u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_AC4R_L(pSrc: *const Ipp16u,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16u,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL,
                                          value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C4R_L(pSrc: *const Ipp16u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp16u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C1R_L(pSrc: *const Ipp32f,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp32f, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C3R_L(pSrc: *const Ipp32f,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp32f, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_AC4R_L(pSrc: *const Ipp32f,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32f,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL,
                                          value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C4R_L(pSrc: *const Ipp32f,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp32f, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL,
                                         value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C1IR_L(pSrcDst: *mut Ipp8u,
                                         srcDstStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftborderwidth: IppSizeL,
                                         value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C3IR_L(pSrcDst: *mut Ipp8u,
                                         srcDstStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftborderwidth: IppSizeL,
                                         value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_AC4IR_L(pSrcDst: *mut Ipp8u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C4IR_L(pSrcDst: *mut Ipp8u,
                                         srcDstStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftborderwidth: IppSizeL,
                                         value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C1IR_L(pSrcDst: *mut Ipp16u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C3IR_L(pSrcDst: *mut Ipp16u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_AC4IR_L(pSrcDst: *mut Ipp16u,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL,
                                           value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C4IR_L(pSrcDst: *mut Ipp16u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C1IR_L(pSrcDst: *mut Ipp16s,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C3IR_L(pSrcDst: *mut Ipp16s,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_AC4IR_L(pSrcDst: *mut Ipp16s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL,
                                           value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C4IR_L(pSrcDst: *mut Ipp16s,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C1IR_L(pSrcDst: *mut Ipp32s,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C3IR_L(pSrcDst: *mut Ipp32s,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_AC4IR_L(pSrcDst: *mut Ipp32s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL,
                                           value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C4IR_L(pSrcDst: *mut Ipp32s,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C1IR_L(pSrcDst: *mut Ipp32f,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C3IR_L(pSrcDst: *mut Ipp32f,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_AC4IR_L(pSrcDst: *mut Ipp32f,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL,
                                           value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C4IR_L(pSrcDst: *mut Ipp32f,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL,
                                          value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C1R_L(pSrc: *const Ipp8u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp8u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C3R_L(pSrc: *const Ipp8u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp8u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C4R_L(pSrc: *const Ipp8u,
                                         srcStep: IppSizeL,
                                         srcRoiSize: IppiSizeL,
                                         pDst: *mut Ipp8u, dstStep: IppSizeL,
                                         dstRoiSize: IppiSizeL,
                                         topBorderHeight: IppSizeL,
                                         leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C1R_L(pSrc: *const Ipp16s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C3R_L(pSrc: *const Ipp16s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C4R_L(pSrc: *const Ipp16s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C1R_L(pSrc: *const Ipp32s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C3R_L(pSrc: *const Ipp32s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C4R_L(pSrc: *const Ipp32s,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32s,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C1IR_L(pSrc: *const Ipp8u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C3IR_L(pSrc: *const Ipp8u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C4IR_L(pSrc: *const Ipp8u,
                                          srcDstStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C1IR_L(pSrc: *const Ipp16s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C3IR_L(pSrc: *const Ipp16s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C4IR_L(pSrc: *const Ipp16s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C1IR_L(pSrc: *const Ipp32s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C3IR_L(pSrc: *const Ipp32s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C4IR_L(pSrc: *const Ipp32s,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C1IR_L(pSrc: *const Ipp16u,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C3IR_L(pSrc: *const Ipp16u,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C4IR_L(pSrc: *const Ipp16u,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C1R_L(pSrc: *const Ipp16u,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16u,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C3R_L(pSrc: *const Ipp16u,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16u,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C4R_L(pSrc: *const Ipp16u,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp16u,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C1R_L(pSrc: *const Ipp32f,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32f,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C3R_L(pSrc: *const Ipp32f,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32f,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C4R_L(pSrc: *const Ipp32f,
                                          srcStep: IppSizeL,
                                          srcRoiSize: IppiSizeL,
                                          pDst: *mut Ipp32f,
                                          dstStep: IppSizeL,
                                          dstRoiSize: IppiSizeL,
                                          topBorderHeight: IppSizeL,
                                          leftBorderWidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C1IR_L(pSrc: *const Ipp32f,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C3IR_L(pSrc: *const Ipp32f,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C4IR_L(pSrc: *const Ipp32f,
                                           srcDstStep: IppSizeL,
                                           srcRoiSize: IppiSizeL,
                                           dstRoiSize: IppiSizeL,
                                           topBorderHeight: IppSizeL,
                                           leftborderwidth: IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C1RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C3RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_AC4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                                pSrc2: *const Ipp8u, src2Step: IppSizeL,
                                pDst: *mut Ipp8u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C1RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C3RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_AC4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                 pDst: *mut Ipp16u, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C1RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C3RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_AC4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                 pDst: *mut Ipp16s, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C1RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C3RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_AC4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                                pSrc2: *const Ipp8u, src2Step: IppSizeL,
                                pDst: *mut Ipp8u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C1RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C3RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_AC4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                 pDst: *mut Ipp16u, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C1RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C3RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_AC4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                 pDst: *mut Ipp16s, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C1RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C3RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_AC4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                                pSrc2: *const Ipp8u, src2Step: IppSizeL,
                                pDst: *mut Ipp8u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C1RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C3RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_AC4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                 pDst: *mut Ipp16s, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C1RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C3RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_AC4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                 pDst: *mut Ipp16u, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C1RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C3RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_AC4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 value: *const Ipp8u, pDst: *mut Ipp8u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C1RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C3RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_AC4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  value: *const Ipp16s, pDst: *mut Ipp16s,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C1RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C3RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_AC4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  value: *const Ipp16u, pDst: *mut Ipp16u,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C1IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C3IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_AC4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C1IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C3IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_AC4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C1IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C3IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_AC4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C1R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C3R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_AC4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pSrc2: *const Ipp32f, src2Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C1IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C3IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C4IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_AC4IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                               pDst: *mut Ipp32f, dstStep: IppSizeL,
                               roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C1R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C3R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_AC4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pSrc2: *const Ipp32f, src2Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C1IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C3IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C4IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_AC4IR_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                               pDst: *mut Ipp32f, dstStep: IppSizeL,
                               roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C1IRSfs_L(value: Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSizeL: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C3IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C4IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_AC4IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C1IRSfs_L(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSizeL: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C3IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C4IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_AC4IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C1IRSfs_L(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSizeL: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C3IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C4IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_AC4IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C1R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C3R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_AC4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pSrc2: *const Ipp32f, src2Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C1IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C3IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C4IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_AC4IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                               roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C1R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C3R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                             pSrc2: *const Ipp32f, src2Step: IppSizeL,
                             pDst: *mut Ipp32f, dstStep: IppSizeL,
                             roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_AC4R_L(pSrc1: *const Ipp32f, src1Step: IppSizeL,
                              pSrc2: *const Ipp32f, src2Step: IppSizeL,
                              pDst: *mut Ipp32f, dstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C1IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C3IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C4IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                              roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_AC4IR_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               pSrcDst: *mut Ipp32f, srcDstStep: IppSizeL,
                               roiSize: IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C1RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C3RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                pDst: *mut Ipp16s, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_AC4RSfs_L(pSrc1: *const Ipp16s, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16s, src2Step: IppSizeL,
                                 pDst: *mut Ipp16s, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C1RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C3RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                               pSrc2: *const Ipp8u, src2Step: IppSizeL,
                               pDst: *mut Ipp8u, dstStep: IppSizeL,
                               roiSize: IppiSizeL,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_AC4RSfs_L(pSrc1: *const Ipp8u, src1Step: IppSizeL,
                                pSrc2: *const Ipp8u, src2Step: IppSizeL,
                                pDst: *mut Ipp8u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C1RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C3RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                pDst: *mut Ipp16u, dstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_AC4RSfs_L(pSrc1: *const Ipp16u, src1Step: IppSizeL,
                                 pSrc2: *const Ipp16u, src2Step: IppSizeL,
                                 pDst: *mut Ipp16u, dstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C1RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C3RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_AC4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  value: *const Ipp16s, pDst: *mut Ipp16s,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C1RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C3RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_AC4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 value: *const Ipp8u, pDst: *mut Ipp8u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C1RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C3RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_AC4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  value: *const Ipp16u, pDst: *mut Ipp16u,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C1IRSfs_L(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C3IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C4IRSfs_L(val: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_AC4IRSfs_L(val: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C1IRSfs_L(value: Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C3IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C4IRSfs_L(val: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_AC4IRSfs_L(val: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C1IRSfs_L(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C3IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C4IRSfs_L(val: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_AC4IRSfs_L(val: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              val: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_AC4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               val: *const Ipp32f, pDst: *mut Ipp32f,
                               dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C1IR_L(value: Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C3IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C4IR_L(val: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_AC4IR_L(val: *const Ipp32f, pSrcDst: *mut Ipp32f,
                                srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C1IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C3IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_AC4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C1IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C3IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_AC4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C1IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C3IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_AC4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_AC4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               value: *const Ipp32f, pDst: *mut Ipp32f,
                               dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_AC4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               value: *const Ipp32f, pDst: *mut Ipp32f,
                               dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: Ipp32f, Dst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                              value: *const Ipp32f, pDst: *mut Ipp32f,
                              dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_AC4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                               value: *const Ipp32f, pDst: *mut Ipp32f,
                               dstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C1IR_L(value: Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C3IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C4IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_AC4IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                                srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C1IR_L(value: Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C3IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C4IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_AC4IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                                srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C1IR_L(value: Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C3IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C4IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                               srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_AC4IR_L(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                                srcDstStep: IppSizeL, roiSize: IppiSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C1IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C3IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_AC4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C1IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C3IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_AC4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C1IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C3IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_AC4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C1IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C3IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_AC4IRSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp8u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C1IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C3IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_AC4IRSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16s, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C1IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C3IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                 roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_AC4IRSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  pSrcDst: *mut Ipp16u, srcDstStep: IppSizeL,
                                  roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C1RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C3RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_AC4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 value: *const Ipp8u, pDst: *mut Ipp8u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C1RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C3RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_AC4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  value: *const Ipp16s, pDst: *mut Ipp16s,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C1RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C3RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_AC4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  value: *const Ipp16u, pDst: *mut Ipp16u,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C1RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C3RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: IppSizeL, roiSize: IppiSizeL,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_AC4RSfs_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                 value: *const Ipp8u, pDst: *mut Ipp8u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C1RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C3RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                 value: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_AC4RSfs_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                  value: *const Ipp16s, pDst: *mut Ipp16s,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C1RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C3RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_AC4RSfs_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                  value: *const Ipp16u, pDst: *mut Ipp16u,
                                  dstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C1IRSfs_L(value: Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C3IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C4IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_AC4IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C1IRSfs_L(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C3IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C4IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_AC4IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C1IRSfs_L(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C3IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C4IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_AC4IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C1IRSfs_L(value: Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C3IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C4IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_AC4IRSfs_L(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C1IRSfs_L(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C3IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C4IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_AC4IRSfs_L(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C1IRSfs_L(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C3IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C4IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_AC4IRSfs_L(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                   srcDstStep: IppSizeL, roiSize: IppiSizeL,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorderGetBufferSize_L(filter:
                                                        IppiFilterBilateralType,
                                                    dstRoiSize: IppiSizeL,
                                                    radius: ipp_ctypes::c_int,
                                                    dataType: IppDataType,
                                                    numChannels:
                                                        ipp_ctypes::c_int,
                                                    distMethodType:
                                                        IppiDistanceMethodType,
                                                    pSpecSize: *mut IppSizeL,
                                                    pBufferSize:
                                                        *mut IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorderInit_L(filter: IppiFilterBilateralType,
                                           dstRoiSize: IppiSizeL,
                                           radius: ipp_ctypes::c_int,
                                           dataType: IppDataType,
                                           numChannels: ipp_ctypes::c_int,
                                           distMethod: IppiDistanceMethodType,
                                           valSquareSigma: Ipp32f,
                                           posSquareSigma: Ipp32f,
                                           pSpec:
                                               *mut IppiFilterBilateralSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorder_8u_C1R_L(pSrc: *const Ipp8u,
                                              srcStep: IppSizeL,
                                              pDst: *mut Ipp8u,
                                              dstStep: IppSizeL,
                                              dstRoiSize: IppiSizeL,
                                              borderType: IppiBorderType,
                                              pBorderValue: *mut Ipp8u,
                                              pSpec:
                                                  *const IppiFilterBilateralSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorder_8u_C3R_L(pSrc: *const Ipp8u,
                                              srcStep: IppSizeL,
                                              pDst: *mut Ipp8u,
                                              dstStep: IppSizeL,
                                              dstRoiSize: IppiSizeL,
                                              borderType: IppiBorderType,
                                              pBorderValue: *mut Ipp8u,
                                              pSpec:
                                                  *const IppiFilterBilateralSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSize_L(srcSize: IppiSizeL, dstSize: IppiSizeL,
                               dataType: IppDataType,
                               interpolation: IppiInterpolationType,
                               antialiasing: Ipp32u, pSpecSize: *mut IppSizeL,
                               pInitBufSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBufferSize_L(pSpec: *const IppiResizeSpec,
                                     dstSize: IppiSizeL, numChannels: Ipp32u,
                                     pBufSize: *mut IppSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBorderSize_L(pSpec: *const IppiResizeSpec,
                                     pBorderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcOffset_L(pSpec: *const IppiResizeSpec,
                                    dstOffset: IppiPointL,
                                    srcOffset: *mut IppiPointL) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcRoi_L(pSpec: *const IppiResizeSpec,
                                 dstRoiOffset: IppiPointL,
                                 dstRoiSize: IppiSizeL,
                                 srcRoiOffset: *mut IppiPointL,
                                 srcRoiSize: *mut IppiSizeL) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearestInit_L(srcSize: IppiSizeL, dstSize: IppiSizeL,
                                   dataType: IppDataType,
                                   pSpec: *mut IppiResizeSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinearInit_L(srcSize: IppiSizeL, dstSize: IppiSizeL,
                                  dataType: IppDataType,
                                  pSpec: *mut IppiResizeSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubicInit_L(srcSize: IppiSizeL, dstSize: IppiSizeL,
                                 dataType: IppDataType, valueB: Ipp32f,
                                 valueC: Ipp32f, pSpec: *mut IppiResizeSpec,
                                 pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczosInit_L(srcSize: IppiSizeL, dstSize: IppiSizeL,
                                   dataType: IppDataType, numLobes: Ipp32u,
                                   pSpec: *mut IppiResizeSpec,
                                   pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuperInit_L(srcSize: IppiSizeL, dstSize: IppiSizeL,
                                 dataType: IppDataType,
                                 pSpec: *mut IppiResizeSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16u_C3R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16u_C4R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16s_C3R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16s_C4R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                     pDst: *mut Ipp8u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp8u,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                     pDst: *mut Ipp8u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp8u,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                     pDst: *mut Ipp8u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp8u,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                      pDst: *mut Ipp16u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp16u,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16u_C3R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                      pDst: *mut Ipp16u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp16u,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16u_C4R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                      pDst: *mut Ipp16u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp16u,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                      pDst: *mut Ipp16s, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp16s,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16s_C3R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                      pDst: *mut Ipp16s, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp16s,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16s_C4R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                      pDst: *mut Ipp16s, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp16s,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                      pDst: *mut Ipp32f, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp32f,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                      pDst: *mut Ipp32f, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp32f,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                      pDst: *mut Ipp32f, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp32f,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_64f_C1R_L(pSrc: *const Ipp64f, srcStep: IppSizeL,
                                      pDst: *mut Ipp64f, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp64f,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_64f_C3R_L(pSrc: *const Ipp64f, srcStep: IppSizeL,
                                      pDst: *mut Ipp64f, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp64f,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_64f_C4R_L(pSrc: *const Ipp64f, srcStep: IppSizeL,
                                      pDst: *mut Ipp64f, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp64f,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstOffset: IppiPointL, dstSize: IppiSizeL,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp8u,
                                    pSpec: *const IppiResizeSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstOffset: IppiPointL, dstSize: IppiSizeL,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp8u,
                                    pSpec: *const IppiResizeSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstOffset: IppiPointL, dstSize: IppiSizeL,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp8u,
                                    pSpec: *const IppiResizeSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16u,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16u_C3R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16u,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16u_C4R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16u,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16s,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16s_C3R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16s,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16s_C4R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16s,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp32f,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp32f,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp32f,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                      pDst: *mut Ipp8u, dstStep: IppSizeL,
                                      dstOffset: IppiPointL,
                                      dstSize: IppiSizeL,
                                      border: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pSpec: *const IppiResizeSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16u_C3R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16u_C4R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                       pDst: *mut Ipp16u, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16s_C3R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16s_C4R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                       pDst: *mut Ipp16s, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                       pDst: *mut Ipp32f, dstStep: IppSizeL,
                                       dstOffset: IppiPointL,
                                       dstSize: IppiSizeL,
                                       border: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pSpec: *const IppiResizeSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_8u_C1R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstOffset: IppiPointL, dstSize: IppiSizeL,
                                    pSpec: *const IppiResizeSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_8u_C3R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstOffset: IppiPointL, dstSize: IppiSizeL,
                                    pSpec: *const IppiResizeSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_8u_C4R_L(pSrc: *const Ipp8u, srcStep: IppSizeL,
                                    pDst: *mut Ipp8u, dstStep: IppSizeL,
                                    dstOffset: IppiPointL, dstSize: IppiSizeL,
                                    pSpec: *const IppiResizeSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16u_C1R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16u_C3R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16u_C4R_L(pSrc: *const Ipp16u, srcStep: IppSizeL,
                                     pDst: *mut Ipp16u, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16s_C1R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16s_C3R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16s_C4R_L(pSrc: *const Ipp16s, srcStep: IppSizeL,
                                     pDst: *mut Ipp16s, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_32f_C1R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_32f_C3R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_32f_C4R_L(pSrc: *const Ipp32f, srcStep: IppSizeL,
                                     pDst: *mut Ipp32f, dstStep: IppSizeL,
                                     dstOffset: IppiPointL,
                                     dstSize: IppiSizeL,
                                     pSpec: *const IppiResizeSpec,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasingLinearInit_L(srcSize: IppiSizeL,
                                              dstSize: IppiSizeL,
                                              dataType: IppDataType,
                                              pSpec: *mut IppiResizeSpec,
                                              pInitBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasingCubicInit_L(srcSize: IppiSizeL,
                                             dstSize: IppiSizeL,
                                             dataType: IppDataType,
                                             valueB: Ipp32f, valueC: Ipp32f,
                                             pSpec: *mut IppiResizeSpec,
                                             pInitBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasingLanczosInit_L(srcSize: IppiSizeL,
                                               dstSize: IppiSizeL,
                                               dataType: IppDataType,
                                               numLobes: Ipp32u,
                                               pSpec: *mut IppiResizeSpec,
                                               pInitBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_8u_C1R_L(pSrc: *const Ipp8u,
                                           srcStep: IppSizeL,
                                           pDst: *mut Ipp8u,
                                           dstStep: IppSizeL,
                                           dstOffset: IppiPointL,
                                           dstSize: IppiSizeL,
                                           border: IppiBorderType,
                                           pBorderValue: *mut Ipp8u,
                                           pSpec: *const IppiResizeSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_8u_C3R_L(pSrc: *const Ipp8u,
                                           srcStep: IppSizeL,
                                           pDst: *mut Ipp8u,
                                           dstStep: IppSizeL,
                                           dstOffset: IppiPointL,
                                           dstSize: IppiSizeL,
                                           border: IppiBorderType,
                                           pBorderValue: *mut Ipp8u,
                                           pSpec: *const IppiResizeSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_8u_C4R_L(pSrc: *const Ipp8u,
                                           srcStep: IppSizeL,
                                           pDst: *mut Ipp8u,
                                           dstStep: IppSizeL,
                                           dstOffset: IppiPointL,
                                           dstSize: IppiSizeL,
                                           border: IppiBorderType,
                                           pBorderValue: *mut Ipp8u,
                                           pSpec: *const IppiResizeSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16u_C1R_L(pSrc: *const Ipp16u,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp16u,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp16u,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16u_C3R_L(pSrc: *const Ipp16u,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp16u,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp16u,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16u_C4R_L(pSrc: *const Ipp16u,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp16u,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp16u,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16s_C1R_L(pSrc: *const Ipp16s,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp16s,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp16s,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16s_C3R_L(pSrc: *const Ipp16s,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp16s,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp16s,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16s_C4R_L(pSrc: *const Ipp16s,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp16s,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp16s,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_32f_C1R_L(pSrc: *const Ipp32f,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp32f,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp32f,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_32f_C3R_L(pSrc: *const Ipp32f,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp32f,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp32f,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_32f_C4R_L(pSrc: *const Ipp32f,
                                            srcStep: IppSizeL,
                                            pDst: *mut Ipp32f,
                                            dstStep: IppSizeL,
                                            dstOffset: IppiPointL,
                                            dstSize: IppiSizeL,
                                            border: IppiBorderType,
                                            pBorderValue: *mut Ipp32f,
                                            pSpec: *const IppiResizeSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippiMalloc_8u_C1(widthPixels: ipp_ctypes::c_int,
                            heightPixels: ipp_ctypes::c_int,
                            pStepBytes: *mut ipp_ctypes::c_int) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C1(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C1(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C1(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C1(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C1(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C1(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_C2(widthPixels: ipp_ctypes::c_int,
                            heightPixels: ipp_ctypes::c_int,
                            pStepBytes: *mut ipp_ctypes::c_int) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C2(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C2(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C2(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C2(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C2(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C2(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_C3(widthPixels: ipp_ctypes::c_int,
                            heightPixels: ipp_ctypes::c_int,
                            pStepBytes: *mut ipp_ctypes::c_int) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C3(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C3(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C3(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C3(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C3(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C3(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_C4(widthPixels: ipp_ctypes::c_int,
                            heightPixels: ipp_ctypes::c_int,
                            pStepBytes: *mut ipp_ctypes::c_int) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_C4(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_C4(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_C4(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_C4(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_C4(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_C4(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiMalloc_8u_AC4(widthPixels: ipp_ctypes::c_int,
                             heightPixels: ipp_ctypes::c_int,
                             pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp8u;
}
extern "C" {
    pub fn ippiMalloc_16u_AC4(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16u;
}
extern "C" {
    pub fn ippiMalloc_16s_AC4(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp16s;
}
extern "C" {
    pub fn ippiMalloc_32s_AC4(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32s;
}
extern "C" {
    pub fn ippiMalloc_32f_AC4(widthPixels: ipp_ctypes::c_int,
                              heightPixels: ipp_ctypes::c_int,
                              pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32f;
}
extern "C" {
    pub fn ippiMalloc_32sc_AC4(widthPixels: ipp_ctypes::c_int,
                               heightPixels: ipp_ctypes::c_int,
                               pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippiMalloc_32fc_AC4(widthPixels: ipp_ctypes::c_int,
                               heightPixels: ipp_ctypes::c_int,
                               pStepBytes: *mut ipp_ctypes::c_int)
     -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippiFree(ptr: *mut ipp_ctypes::c_void);
}
extern "C" {
    pub fn ippiAdd_8u_C1RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C3RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C4RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_AC4RSfs(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C1RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C3RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C4RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_AC4RSfs(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C1RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C3RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C4RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_AC4RSfs(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C1RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C3RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C4RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_AC4RSfs(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C1RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C3RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C4RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_AC4RSfs(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C1RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C3RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C4RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_AC4RSfs(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C1RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C3RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C4RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_AC4RSfs(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C1RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C3RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C4RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_AC4RSfs(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C1RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C3RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C4RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_AC4RSfs(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C1IRSfs(value: Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C3IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C4IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_AC4IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C1IRSfs(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C3IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C4IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_AC4IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C1IRSfs(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C3IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C4IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_AC4IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C1IRSfs(value: Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C3IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C4IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_AC4IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C1IRSfs(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C3IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C4IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_AC4IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C1IRSfs(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C3IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C4IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_AC4IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C1IRSfs(value: Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C3IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C4IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_AC4IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C1IRSfs(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C3IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C4IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_AC4IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C1IRSfs(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C3IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C4IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_AC4IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_C4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_8u_AC4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C1RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, value: Ipp16s,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C3RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_C4RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16s_AC4RSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16s, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C1RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, value: Ipp16u,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C3RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_C4RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_16u_AC4RSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16u, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_C4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_8u_AC4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C1RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, value: Ipp16s,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C3RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_C4RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16s_AC4RSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16s, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C1RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, value: Ipp16u,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C3RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_C4RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_16u_AC4RSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16u, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_C4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_8u_AC4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C1RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, value: Ipp16s,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C3RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_C4RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16s_AC4RSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16s, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C1RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, value: Ipp16u,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C3RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_C4RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_16u_AC4RSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16u, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C1IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C3IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_C4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_8u_AC4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C1IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C3IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_C4IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16s_AC4IRSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C1IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C3IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_C4IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_16u_AC4IRSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C1IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C3IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_C4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_8u_AC4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C1IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C3IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_C4IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16s_AC4IRSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C1IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C3IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_C4IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_16u_AC4IRSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C1IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C3IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_C4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_8u_AC4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C1IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C3IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_C4IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16s_AC4IRSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C1IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C3IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_C4IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_16u_AC4IRSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp32f, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp32f, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp32f, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C1IR(value: Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C3IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_C4IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddC_32f_AC4IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C1IR(value: Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C3IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_C4IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSubC_32f_AC4IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C1IR(value: Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C3IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_C4IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC_32f_AC4IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C1IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C3IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_AC4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C1IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C3IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_AC4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C1IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C3IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_AC4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C1R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C3R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_C4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAdd_32f_AC4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C1R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C3R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_C4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSub_32f_AC4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C1R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C3R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_C4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMul_32f_AC4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C1R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C3R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_AC4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32f, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C1RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C3RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C4RSfs(pSrc1: *const Ipp16s,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16s,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_AC4RSfs(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C1RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C3RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C4RSfs(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                             pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_AC4RSfs(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C1RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C3RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C4RSfs(pSrc1: *const Ipp16u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp16u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_AC4RSfs(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            val: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             val: *const Ipp32f, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C1RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, value: Ipp16s,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C3RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C4RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16s, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_AC4RSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16s, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp8u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_AC4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C1RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, value: Ipp16u,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C3RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C4RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp16u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_AC4RSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16u, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C1IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C3IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_C4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_32f_AC4IR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C1IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C3IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_C4IRSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16s_AC4IRSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C1IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C3IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_C4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_8u_AC4IRSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C1IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C3IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_C4IRSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_16u_AC4IRSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C1IR(value: Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C3IR(value: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_C4IR(val: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_32f_AC4IR(val: *const Ipp32f, pSrcDst: *mut Ipp32f,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C1IRSfs(value: Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C3IRSfs(value: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_C4IRSfs(val: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16s_AC4IRSfs(val: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C1IRSfs(value: Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C3IRSfs(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_C4IRSfs(val: *const Ipp8u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_8u_AC4IRSfs(val: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C1IRSfs(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C3IRSfs(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_C4IRSfs(val: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDivC_16u_AC4IRSfs(val: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 ScaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_AC4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_C1IR(pSrcDst: *mut Ipp16s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_C3IR(pSrcDst: *mut Ipp16s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_AC4IR(pSrcDst: *mut Ipp16s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_C1IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_C3IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_AC4IR(pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_16s_C4IR(pSrcDst: *mut Ipp16s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAbs_32f_C4IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_AC4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_C4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_C1RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_C3RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_AC4RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_C4RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_C1RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_C3RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_AC4RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_C4RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_C1IRSfs(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_C3IRSfs(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_AC4IRSfs(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_8u_C4IRSfs(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_C1IRSfs(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_C3IRSfs(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_AC4IRSfs(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16u_C4IRSfs(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_C1IRSfs(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_C3IRSfs(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_AC4IRSfs(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_16s_C4IRSfs(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_C1IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_C3IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_AC4IR(pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqr_32f_C4IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_8u_AC4RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16u_C1RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16u_C3RSfs(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16u_AC4RSfs(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16s_C1RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16s_C3RSfs(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16s_AC4RSfs(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_8u_C1IRSfs(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_8u_C3IRSfs(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_8u_AC4IRSfs(pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16u_C1IRSfs(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16u_C3IRSfs(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16u_AC4IRSfs(pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16s_C1IRSfs(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16s_C3IRSfs(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_16s_AC4IRSfs(pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_C1IR(pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_C3IR(pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_AC4IR(pSrcDst: *mut Ipp32f,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrt_32f_C4IR(pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_32f_C1IR(pSrcDst: *mut Ipp32f,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_32f_C3IR(pSrcDst: *mut Ipp32f,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16s_C1IRSfs(pSrcDst: *mut Ipp16s,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16s_C3IRSfs(pSrcDst: *mut Ipp16s,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16s_C1RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16s_C3RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16u_C1RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, ScalFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16u_C3RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, ScalFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_8u_C1IRSfs(pSrcDst: *mut Ipp8u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_8u_C3IRSfs(pSrcDst: *mut Ipp8u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLn_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16u_C1IRSfs(pSrcDst: *mut Ipp16u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, ScalFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLn_16u_C3IRSfs(pSrcDst: *mut Ipp16u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, ScalFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiExp_32f_C1IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiExp_32f_C3IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiExp_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16s_C1IRSfs(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16s_C3IRSfs(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16s_C1RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16s_C3RSfs(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16u_C1IRSfs(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, sFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16u_C3IRSfs(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, sFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiExp_8u_C1IRSfs(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_8u_C3IRSfs(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_8u_C1RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_8u_C3RSfs(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16u_C1RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, sFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiExp_16u_C3RSfs(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, sFact: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_C1R(pSrc1: *const Ipp8u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp8u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_C3R(pSrc1: *const Ipp8u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp8u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_C4R(pSrc1: *const Ipp8u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp8u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_AC4R(pSrc1: *const Ipp8u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp8u,
                                src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_C1IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_C3IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_C4IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_8u_AC4IR(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, value: Ipp8u,
                                pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_C3R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_C4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_AC4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 value: *const Ipp8u, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_C1IR(value: Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_C3IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_C4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_8u_AC4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_C1R(pSrc1: *const Ipp16u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16u,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_C3R(pSrc1: *const Ipp16u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16u,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_C4R(pSrc1: *const Ipp16u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16u,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_AC4R(pSrc1: *const Ipp16u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp16u,
                                 src2Step: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_C1IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_C3IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_C4IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulScale_16u_AC4IR(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, value: Ipp16u,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_C3R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_C4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 value: *const Ipp16u, pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_AC4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  value: *const Ipp16u, pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_C1IR(value: Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_C3IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_C4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulCScale_16u_AC4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_8u64f_C1R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16u64f_C1R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16s64f_C1R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32u64f_C1R(pSrc1: *const Ipp32u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32s64f_C1R(pSrc1: *const Ipp32s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32f64f_C1R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_8u64f_C3R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16u64f_C3R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16s64f_C3R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32u64f_C3R(pSrc1: *const Ipp32u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32s64f_C3R(pSrc1: *const Ipp32s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32f64f_C3R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_8u64f_C4R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16u64f_C4R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16s64f_C4R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32u64f_C4R(pSrc1: *const Ipp32u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32s64f_C4R(pSrc1: *const Ipp32s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32f64f_C4R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_8u64f_AC4R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16u64f_AC4R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_16s64f_AC4R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32u64f_AC4R(pSrc1: *const Ipp32u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32s64f_AC4R(pSrc1: *const Ipp32s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProd_32f64f_AC4R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pDp: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiDotProdCol_32f_L2(ppSrcRow: *const *const Ipp32f,
                                 pTaps: *const Ipp32f,
                                 tapsLen: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f, width: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDotProdCol_64f_L2(ppSrcRow: *const *const Ipp64f,
                                 pTaps: *const Ipp64f,
                                 tapsLen: ipp_ctypes::c_int,
                                 pDst: *mut Ipp64f, width: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_C1IR(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_C3IR(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_C4IR(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_AC4IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_C1R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_C3R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_C4R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulPack_32f_AC4R(pSrc1: *const Ipp32f,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp32f,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_C1IR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_C3IR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_C4IR(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_AC4IR(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_C1R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_C3R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_C4R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMulPackConj_32f_AC4R(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiPackToCplxExtend_32f32fc_C1R(pSrc: *const Ipp32f,
                                            srcSize: IppiSize,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32fc,
                                            dstStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCplxExtendToPack_32fc32f_C1R(pSrc: *const Ipp32fc,
                                            srcStep: ipp_ctypes::c_int,
                                            srcSize: IppiSize,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCplxExtendToPack_32fc32f_C3R(pSrc: *const Ipp32fc,
                                            srcStep: ipp_ctypes::c_int,
                                            srcSize: IppiSize,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPhasePack_32f_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 dstRoiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPhasePack_32f_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 dstRoiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPhasePackGetBufferSize_32f(numChannels: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMagnitudePack_32f_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMagnitudePack_32f_C3R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMagnitudePackGetBufferSize_32f(numChannels: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMagnitude_32fc32f_C1R(pSrc: *const Ipp32fc,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMagnitude_32fc32f_C3R(pSrc: *const Ipp32fc,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiPhase_32fc32f_C1R(pSrc: *const Ipp32fc,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiPhase_32fc32f_C3R(pSrc: *const Ipp32fc,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_8u_AC4R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_16u_AC4R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_8u_AP4R(pSrc: *const *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *const *const Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_16u_AP4R(pSrc: *const *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *const *const Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_8u_AP4IR(pSrcDst: *const *const Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremul_16u_AP4IR(pSrcDst: *const *const Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_AC4R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int, alpha: Ipp8u,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_AC4R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     alpha: Ipp16u, pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_AC4IR(alpha: Ipp8u, pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_AC4IR(alpha: Ipp16u, pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_AP4R(pSrc: *const *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int, alpha: Ipp8u,
                                    pDst: *const *const Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_AP4R(pSrc: *const *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     alpha: Ipp16u,
                                     pDst: *const *const Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_AP4IR(alpha: Ipp8u,
                                     pSrcDst: *const *const Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_AP4IR(alpha: Ipp16u,
                                      pSrcDst: *const *const Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_C4R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int, alpha: Ipp8u,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_C4R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int, alpha: Ipp16u,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_C4IR(alpha: Ipp8u, pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_C4IR(alpha: Ipp16u, pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int, alpha: Ipp8u,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_C3R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int, alpha: Ipp16u,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_C3IR(alpha: Ipp8u, pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_C3IR(alpha: Ipp16u, pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int, alpha: Ipp8u,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int, alpha: Ipp16u,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_8u_C1IR(alpha: Ipp8u, pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaPremulC_16u_C1IR(alpha: Ipp16u, pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_8u_AC4R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16u_AC4R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16s_AC4R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32s_AC4R(pSrc1: *const Ipp32s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32s,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32u_AC4R(pSrc1: *const Ipp32u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32u,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32f_AC4R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_8u_AP4R(pSrc1: *const *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 pDst: *const *const Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16u_AP4R(pSrc1: *const *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *const *const Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_8u_AC1R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16u_AC1R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16s_AC1R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32s_AC1R(pSrc1: *const Ipp32s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32s,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32u_AC1R(pSrc1: *const Ipp32u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32u,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32f_AC1R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_AC4R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp8u,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp8u,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_AC4R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   alpha1: Ipp16u, pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   alpha2: Ipp16u, pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_AP4R(pSrc1: *const *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp8u,
                                  pSrc2: *const *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp8u,
                                  pDst: *const *const Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_AP4R(pSrc1: *const *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   alpha1: Ipp16u,
                                   pSrc2: *const *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   alpha2: Ipp16u, pDst: *const *const Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_C4R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int, alpha1: Ipp8u,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int, alpha2: Ipp8u,
                                 pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_C4R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp16u,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp16u,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_C3R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int, alpha1: Ipp8u,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int, alpha2: Ipp8u,
                                 pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_C3R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp16u,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp16u,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_C1R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int, alpha1: Ipp8u,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int, alpha2: Ipp8u,
                                 pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_C1R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp16u,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp16u,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16s_C1R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp16s,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp16s,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_32s_C1R(pSrc1: *const Ipp32s,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp32s,
                                  pSrc2: *const Ipp32s,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp32s,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_32u_C1R(pSrc1: *const Ipp32u,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp32u,
                                  pSrc2: *const Ipp32u,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp32u,
                                  pDst: *mut Ipp32u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_32f_C1R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int, alpha1: Ipp32f,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int, alpha2: Ipp32f,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_8u_AC4IR(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16u_AC4IR(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16s_AC4IR(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp16s,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32s_AC4IR(pSrc: *const Ipp32s,
                                   srcStep: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp32s,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32u_AC4IR(pSrc: *const Ipp32u,
                                   srcStep: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp32u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_32f_AC4IR(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_8u_AP4IR(pSrc: *const *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *const *const Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaComp_16u_AP4IR(pSrc: *const *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pSrcDst: *const *const Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_AC4IR(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp8u,
                                   pSrcDst: *mut Ipp8u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp8u, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_AC4IR(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    alpha1: Ipp16u, pSrcDst: *mut Ipp16u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    alpha2: Ipp16u, roiSize: IppiSize,
                                    alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_AP4IR(pSrc: *const *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp8u,
                                   pSrcDst: *const *const Ipp8u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp8u, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_AP4IR(pSrc: *const *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    alpha1: Ipp16u,
                                    pSrcDst: *const *const Ipp16u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    alpha2: Ipp16u, roiSize: IppiSize,
                                    alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_C4IR(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int, alpha1: Ipp8u,
                                  pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  alpha2: Ipp8u, roiSize: IppiSize,
                                  alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_C4IR(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp16u,
                                   pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp16u, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_C3IR(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int, alpha1: Ipp8u,
                                  pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  alpha2: Ipp8u, roiSize: IppiSize,
                                  alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_C3IR(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp16u,
                                   pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp16u, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_8u_C1IR(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int, alpha1: Ipp8u,
                                  pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  alpha2: Ipp8u, roiSize: IppiSize,
                                  alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16u_C1IR(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp16u,
                                   pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp16u, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_16s_C1IR(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp16s,
                                   pSrcDst: *mut Ipp16s,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp16s, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_32s_C1IR(pSrc: *const Ipp32s,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp32s,
                                   pSrcDst: *mut Ipp32s,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp32s, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_32u_C1IR(pSrc: *const Ipp32u,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp32u,
                                   pSrcDst: *mut Ipp32u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp32u, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompC_32f_C1IR(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int, alpha1: Ipp32f,
                                   pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   alpha2: Ipp32f, roiSize: IppiSize,
                                   alphaType: IppiAlphaType) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInit_C_32fc(orderX: ipp_ctypes::c_int,
                              orderY: ipp_ctypes::c_int,
                              flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pFFTSpec: *mut IppiFFTSpec_C_32fc,
                              pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInit_R_32f(orderX: ipp_ctypes::c_int,
                             orderY: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pFFTSpec: *mut IppiFFTSpec_R_32f,
                             pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTGetSize_C_32fc(orderX: ipp_ctypes::c_int,
                                 orderY: ipp_ctypes::c_int,
                                 flag: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSizeSpec: *mut ipp_ctypes::c_int,
                                 pSizeInit: *mut ipp_ctypes::c_int,
                                 pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFFTGetSize_R_32f(orderX: ipp_ctypes::c_int,
                                orderY: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSizeSpec: *mut ipp_ctypes::c_int,
                                pSizeInit: *mut ipp_ctypes::c_int,
                                pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_CToC_32fc_C1R(pSrc: *const Ipp32fc,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32fc,
                                    dstStep: ipp_ctypes::c_int,
                                    pFFTSpec: *const IppiFFTSpec_C_32fc,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_CToC_32fc_C1R(pSrc: *const Ipp32fc,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32fc,
                                    dstStep: ipp_ctypes::c_int,
                                    pFFTSpec: *const IppiFFTSpec_C_32fc,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pFFTSpec: *const IppiFFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_C3R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pFFTSpec: *const IppiFFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_C4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pFFTSpec: *const IppiFFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_AC4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pFFTSpec: *const IppiFFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_C3R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pFFTSpec: *const IppiFFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_C4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pFFTSpec: *const IppiFFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_AC4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_CToC_32fc_C1IR(pSrcDst: *mut Ipp32fc,
                                     srcDstStep: ipp_ctypes::c_int,
                                     pFFTSpec: *const IppiFFTSpec_C_32fc,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_CToC_32fc_C1IR(pSrcDst: *mut Ipp32fc,
                                     srcDstStep: ipp_ctypes::c_int,
                                     pFFTSpec: *const IppiFFTSpec_C_32fc,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_C1IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_C3IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_C4IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTFwd_RToPack_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        pFFTSpec: *const IppiFFTSpec_R_32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_C1IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_C3IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_C4IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pFFTSpec: *const IppiFFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFFTInv_PackToR_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        pFFTSpec: *const IppiFFTSpec_R_32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInit_C_32fc(roiSize: IppiSize, flag: ipp_ctypes::c_int,
                              hint: IppHintAlgorithm,
                              pDFTSpec: *mut IppiDFTSpec_C_32fc,
                              pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInit_R_32f(roiSize: IppiSize, flag: ipp_ctypes::c_int,
                             hint: IppHintAlgorithm,
                             pDFTSpec: *mut IppiDFTSpec_R_32f,
                             pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTGetSize_C_32fc(roiSize: IppiSize, flag: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSizeSpec: *mut ipp_ctypes::c_int,
                                 pSizeInit: *mut ipp_ctypes::c_int,
                                 pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDFTGetSize_R_32f(roiSize: IppiSize, flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSizeSpec: *mut ipp_ctypes::c_int,
                                pSizeInit: *mut ipp_ctypes::c_int,
                                pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_CToC_32fc_C1R(pSrc: *const Ipp32fc,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32fc,
                                    dstStep: ipp_ctypes::c_int,
                                    pDFTSpec: *const IppiDFTSpec_C_32fc,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_CToC_32fc_C1R(pSrc: *const Ipp32fc,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32fc,
                                    dstStep: ipp_ctypes::c_int,
                                    pDFTSpec: *const IppiDFTSpec_C_32fc,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pDFTSpec: *const IppiDFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_C3R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pDFTSpec: *const IppiDFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_C4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pDFTSpec: *const IppiDFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_AC4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pDFTSpec: *const IppiDFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_C3R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pDFTSpec: *const IppiDFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_C4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      pDFTSpec: *const IppiDFTSpec_R_32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_AC4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_CToC_32fc_C1IR(pSrcDst: *mut Ipp32fc,
                                     srcDstStep: ipp_ctypes::c_int,
                                     pDFTSpec: *const IppiDFTSpec_C_32fc,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_CToC_32fc_C1IR(pSrcDst: *mut Ipp32fc,
                                     srcDstStep: ipp_ctypes::c_int,
                                     pDFTSpec: *const IppiDFTSpec_C_32fc,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_C1IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_C3IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_C4IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTFwd_RToPack_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        pDFTSpec: *const IppiDFTSpec_R_32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_C1IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_C3IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_C4IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       pDFTSpec: *const IppiDFTSpec_R_32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDFTInv_PackToR_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        pDFTSpec: *const IppiDFTSpec_R_32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTFwdInit_32f(pDCTSpec: *mut IppiDCTFwdSpec_32f,
                              roiSize: IppiSize, pMemInit: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCTInvInit_32f(pDCTSpec: *mut IppiDCTInvSpec_32f,
                              roiSize: IppiSize, pMemInit: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCTFwdGetSize_32f(roiSize: IppiSize,
                                 pSizeSpec: *mut ipp_ctypes::c_int,
                                 pSizeInit: *mut ipp_ctypes::c_int,
                                 pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCTInvGetSize_32f(roiSize: IppiSize,
                                 pSizeSpec: *mut ipp_ctypes::c_int,
                                 pSizeInit: *mut ipp_ctypes::c_int,
                                 pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCTFwd_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              pDCTSpec: *const IppiDCTFwdSpec_32f,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTFwd_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              pDCTSpec: *const IppiDCTFwdSpec_32f,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTFwd_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              pDCTSpec: *const IppiDCTFwdSpec_32f,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTFwd_32f_AC4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int,
                               pDCTSpec: *const IppiDCTFwdSpec_32f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTInv_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              pDCTSpec: *const IppiDCTInvSpec_32f,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTInv_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              pDCTSpec: *const IppiDCTInvSpec_32f,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTInv_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              pDCTSpec: *const IppiDCTInvSpec_32f,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCTInv_32f_AC4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int,
                               pDCTSpec: *const IppiDCTInvSpec_32f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Fwd_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Fwd_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Fwd_16s_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_16s_C1R(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_2x2_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_4x4_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_2x2_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_4x4_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8To2x2Inv_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8To4x4Inv_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8To2x2Inv_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8To4x4Inv_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_A10_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_A10_16s_C1I(pSrcDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Fwd_8u16s_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_16s8u_C1R(pSrc: *const Ipp16s, pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8FwdLS_8u16s_C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s, addVal: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8InvLSClip_16s8u_C1R(pSrc: *const Ipp16s,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         addVal: Ipp16s, clipDown: Ipp8u,
                                         clipUp: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Fwd_32f_C1(pSrc: *const Ipp32f, pDst: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_32f_C1(pSrc: *const Ipp32f, pDst: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Fwd_32f_C1I(pSrcDst: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiDCT8x8Inv_32f_C1I(pSrcDst: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiWTFwdGetSize_32f(numChannels: ipp_ctypes::c_int,
                                lenLow: ipp_ctypes::c_int,
                                anchorLow: ipp_ctypes::c_int,
                                lenHigh: ipp_ctypes::c_int,
                                anchorHigh: ipp_ctypes::c_int,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWTFwdInit_32f_C1R(pSpec: *mut IppiWTFwdSpec_32f_C1R,
                                 pTapsLow: *const Ipp32f,
                                 lenLow: ipp_ctypes::c_int,
                                 anchorLow: ipp_ctypes::c_int,
                                 pTapsHigh: *const Ipp32f,
                                 lenHigh: ipp_ctypes::c_int,
                                 anchorHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiWTFwdInit_32f_C3R(pSpec: *mut IppiWTFwdSpec_32f_C3R,
                                 pTapsLow: *const Ipp32f,
                                 lenLow: ipp_ctypes::c_int,
                                 anchorLow: ipp_ctypes::c_int,
                                 pTapsHigh: *const Ipp32f,
                                 lenHigh: ipp_ctypes::c_int,
                                 anchorHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiWTFwd_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pApproxDst: *mut Ipp32f,
                             approxStep: ipp_ctypes::c_int,
                             pDetailXDst: *mut Ipp32f,
                             detailXStep: ipp_ctypes::c_int,
                             pDetailYDst: *mut Ipp32f,
                             detailYStep: ipp_ctypes::c_int,
                             pDetailXYDst: *mut Ipp32f,
                             detailXYStep: ipp_ctypes::c_int,
                             dstRoiSize: IppiSize,
                             pSpec: *const IppiWTFwdSpec_32f_C1R,
                             pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWTFwd_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pApproxDst: *mut Ipp32f,
                             approxStep: ipp_ctypes::c_int,
                             pDetailXDst: *mut Ipp32f,
                             detailXStep: ipp_ctypes::c_int,
                             pDetailYDst: *mut Ipp32f,
                             detailYStep: ipp_ctypes::c_int,
                             pDetailXYDst: *mut Ipp32f,
                             detailXYStep: ipp_ctypes::c_int,
                             dstRoiSize: IppiSize,
                             pSpec: *const IppiWTFwdSpec_32f_C3R,
                             pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWTInvGetSize_32f(numChannels: ipp_ctypes::c_int,
                                lenLow: ipp_ctypes::c_int,
                                anchorLow: ipp_ctypes::c_int,
                                lenHigh: ipp_ctypes::c_int,
                                anchorHigh: ipp_ctypes::c_int,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWTInvInit_32f_C1R(pSpec: *mut IppiWTInvSpec_32f_C1R,
                                 pTapsLow: *const Ipp32f,
                                 lenLow: ipp_ctypes::c_int,
                                 anchorLow: ipp_ctypes::c_int,
                                 pTapsHigh: *const Ipp32f,
                                 lenHigh: ipp_ctypes::c_int,
                                 anchorHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiWTInvInit_32f_C3R(pSpec: *mut IppiWTInvSpec_32f_C3R,
                                 pTapsLow: *const Ipp32f,
                                 lenLow: ipp_ctypes::c_int,
                                 anchorLow: ipp_ctypes::c_int,
                                 pTapsHigh: *const Ipp32f,
                                 lenHigh: ipp_ctypes::c_int,
                                 anchorHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiWTInv_32f_C1R(pApproxSrc: *const Ipp32f,
                             approxStep: ipp_ctypes::c_int,
                             pDetailXSrc: *const Ipp32f,
                             detailXStep: ipp_ctypes::c_int,
                             pDetailYSrc: *const Ipp32f,
                             detailYStep: ipp_ctypes::c_int,
                             pDetailXYSrc: *const Ipp32f,
                             detailXYStep: ipp_ctypes::c_int,
                             srcRoiSize: IppiSize, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int,
                             pSpec: *const IppiWTInvSpec_32f_C1R,
                             pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWTInv_32f_C3R(pApproxSrc: *const Ipp32f,
                             approxStep: ipp_ctypes::c_int,
                             pDetailXSrc: *const Ipp32f,
                             detailXStep: ipp_ctypes::c_int,
                             pDetailYSrc: *const Ipp32f,
                             detailYStep: ipp_ctypes::c_int,
                             pDetailXYSrc: *const Ipp32f,
                             detailXYStep: ipp_ctypes::c_int,
                             srcRoiSize: IppiSize, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int,
                             pSpec: *const IppiWTInvSpec_32f_C3R,
                             pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDecimateFilterRow_8u_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        fraction: IppiFraction) -> IppStatus;
}
extern "C" {
    pub fn ippiDecimateFilterColumn_8u_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           fraction: IppiFraction)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_C1IR(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_C3IR(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_AC4IR(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_8u_C4IR(pSrcDst: *mut Ipp8u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_AC4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_C1IR(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_C3IR(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16u_C4IR(pSrcDst: *mut Ipp16u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_C3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_AC4R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_C4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_C1IR(pSrcDst: *mut Ipp32s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_C3IR(pSrcDst: *mut Ipp32s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_AC4IR(pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32s_C4IR(pSrcDst: *mut Ipp32s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_AC4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_C1IR(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_C3IR(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_16s_C4IR(pSrcDst: *mut Ipp16s,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_AC4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, flip: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_C1IR(pSrcDst: *mut Ipp32f,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_C3IR(pSrcDst: *mut Ipp32f,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMirror_32f_C4IR(pSrcDst: *mut Ipp32f,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, flip: IppiAxis)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_8u_C1R(pSrc: *const Ipp8u, srcSize: IppiSize,
                            srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                            pxMap: *const Ipp32f, xMapStep: ipp_ctypes::c_int,
                            pyMap: *const Ipp32f, yMapStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            dstRoiSize: IppiSize,
                            interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_8u_C3R(pSrc: *const Ipp8u, srcSize: IppiSize,
                            srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                            pxMap: *const Ipp32f, xMapStep: ipp_ctypes::c_int,
                            pyMap: *const Ipp32f, yMapStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            dstRoiSize: IppiSize,
                            interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_8u_C4R(pSrc: *const Ipp8u, srcSize: IppiSize,
                            srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                            pxMap: *const Ipp32f, xMapStep: ipp_ctypes::c_int,
                            pyMap: *const Ipp32f, yMapStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            dstRoiSize: IppiSize,
                            interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_8u_AC4R(pSrc: *const Ipp8u, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16u_C1R(pSrc: *const Ipp16u, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16u_C3R(pSrc: *const Ipp16u, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16u_C4R(pSrc: *const Ipp16u, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16u_AC4R(pSrc: *const Ipp16u, srcSize: IppiSize,
                              srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                              pxMap: *const Ipp32f,
                              xMapStep: ipp_ctypes::c_int,
                              pyMap: *const Ipp32f,
                              yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int,
                              dstRoiSize: IppiSize,
                              interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16s_C1R(pSrc: *const Ipp16s, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16s_C3R(pSrc: *const Ipp16s, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16s_C4R(pSrc: *const Ipp16s, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_16s_AC4R(pSrc: *const Ipp16s, srcSize: IppiSize,
                              srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                              pxMap: *const Ipp32f,
                              xMapStep: ipp_ctypes::c_int,
                              pyMap: *const Ipp32f,
                              yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int,
                              dstRoiSize: IppiSize,
                              interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_32f_C1R(pSrc: *const Ipp32f, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_32f_C3R(pSrc: *const Ipp32f, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_32f_C4R(pSrc: *const Ipp32f, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp32f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp32f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_32f_AC4R(pSrc: *const Ipp32f, srcSize: IppiSize,
                              srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                              pxMap: *const Ipp32f,
                              xMapStep: ipp_ctypes::c_int,
                              pyMap: *const Ipp32f,
                              yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                              dstStep: ipp_ctypes::c_int,
                              dstRoiSize: IppiSize,
                              interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_64f_C1R(pSrc: *const Ipp64f, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp64f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp64f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp64f,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_64f_C3R(pSrc: *const Ipp64f, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp64f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp64f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp64f,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_64f_C4R(pSrc: *const Ipp64f, srcSize: IppiSize,
                             srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                             pxMap: *const Ipp64f,
                             xMapStep: ipp_ctypes::c_int,
                             pyMap: *const Ipp64f,
                             yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp64f,
                             dstStep: ipp_ctypes::c_int, dstRoiSize: IppiSize,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiRemap_64f_AC4R(pSrc: *const Ipp64f, srcSize: IppiSize,
                              srcStep: ipp_ctypes::c_int, srcROI: IppiRect,
                              pxMap: *const Ipp64f,
                              xMapStep: ipp_ctypes::c_int,
                              pyMap: *const Ipp64f,
                              yMapStep: ipp_ctypes::c_int, pDst: *mut Ipp64f,
                              dstStep: ipp_ctypes::c_int,
                              dstRoiSize: IppiSize,
                              interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeFilterGetSize_8u_C1R(srcRoiSize: IppiSize,
                                          dstRoiSize: IppiSize,
                                          filter: IppiResizeFilterType,
                                          pSize: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeFilterInit_8u_C1R(pState: *mut IppiResizeFilterState,
                                       srcRoiSize: IppiSize,
                                       dstRoiSize: IppiSize,
                                       filter: IppiResizeFilterType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeFilter_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize,
                                   pState: *mut IppiResizeFilterState)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYCbCr422GetBufSize(srcROI: IppiRect,
                                        dstRoiSize: IppiSize,
                                        interpolation: ipp_ctypes::c_int,
                                        pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYCbCr422_8u_C2R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                     srcStep: ipp_ctypes::c_int,
                                     srcROI: IppiRect, pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize,
                                     interpolation: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiGetAffineBound(srcROI: IppiRect, bound: *mut [f64; 2usize],
                              coeffs: *mut [f64; 3usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetAffineQuad(srcROI: IppiRect, quad: *mut [f64; 2usize],
                             coeffs: *mut [f64; 3usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetAffineTransform(srcROI: IppiRect, quad: *mut [f64; 2usize],
                                  coeffs: *mut [f64; 3usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetAffineSrcRoi(srcSize: IppiSize, coeffs: *mut [f64; 3usize],
                               direction: IppiWarpDirection,
                               dstRoiOffset: IppiPoint, dstRoiSize: IppiSize,
                               srcRoi: *mut IppiRect) -> IppStatus;
}
extern "C" {
    pub fn ippiGetRotateShift(xCenter: f64, yCenter: f64, angle: f64,
                              xShift: *mut f64, yShift: *mut f64)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetRotateTransform(angle: f64, xShift: f64, yShift: f64,
                                  coeffs: *mut [f64; 3usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetPerspectiveBound(srcROI: IppiRect,
                                   bound: *mut [f64; 2usize],
                                   coeffs: *mut [f64; 3usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetPerspectiveQuad(srcROI: IppiRect, quad: *mut [f64; 2usize],
                                  coeffs: *mut [f64; 3usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetPerspectiveTransform(srcROI: IppiRect,
                                       quad: *mut [f64; 2usize],
                                       coeffs: *mut [f64; 3usize])
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetBilinearBound(srcROI: IppiRect, bound: *mut [f64; 2usize],
                                coeffs: *mut [f64; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetBilinearQuad(srcROI: IppiRect, quad: *mut [f64; 2usize],
                               coeffs: *mut [f64; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiGetBilinearTransform(srcROI: IppiRect,
                                    quad: *mut [f64; 2usize],
                                    coeffs: *mut [f64; 4usize]) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearGetBufferSize(srcSize: IppiSize, srcROI: IppiRect,
                                         dstROI: IppiRect,
                                         direction: IppiWarpDirection,
                                         coeffs: *mut [f64; 4usize],
                                         interpolation: ipp_ctypes::c_int,
                                         pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_8u_C1R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                   srcStep: ipp_ctypes::c_int,
                                   srcROI: IppiRect, pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstROI: IppiRect,
                                   coeffs: *mut [f64; 4usize],
                                   interpolation: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_8u_C3R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                   srcStep: ipp_ctypes::c_int,
                                   srcROI: IppiRect, pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstROI: IppiRect,
                                   coeffs: *mut [f64; 4usize],
                                   interpolation: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_8u_C4R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                   srcStep: ipp_ctypes::c_int,
                                   srcROI: IppiRect, pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstROI: IppiRect,
                                   coeffs: *mut [f64; 4usize],
                                   interpolation: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_32f_C1R(pSrc: *const Ipp32f, srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    srcROI: IppiRect, pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstROI: IppiRect,
                                    coeffs: *mut [f64; 4usize],
                                    interpolation: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_32f_C3R(pSrc: *const Ipp32f, srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    srcROI: IppiRect, pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstROI: IppiRect,
                                    coeffs: *mut [f64; 4usize],
                                    interpolation: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_32f_C4R(pSrc: *const Ipp32f, srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    srcROI: IppiRect, pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstROI: IppiRect,
                                    coeffs: *mut [f64; 4usize],
                                    interpolation: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_16u_C1R(pSrc: *const Ipp16u, srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    srcROI: IppiRect, pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstROI: IppiRect,
                                    coeffs: *mut [f64; 4usize],
                                    interpolation: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_16u_C3R(pSrc: *const Ipp16u, srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    srcROI: IppiRect, pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstROI: IppiRect,
                                    coeffs: *mut [f64; 4usize],
                                    interpolation: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinear_16u_C4R(pSrc: *const Ipp16u, srcSize: IppiSize,
                                    srcStep: ipp_ctypes::c_int,
                                    srcROI: IppiRect, pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstROI: IppiRect,
                                    coeffs: *mut [f64; 4usize],
                                    interpolation: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_8u_C1R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                       srcStep: ipp_ctypes::c_int,
                                       srcROI: IppiRect, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstROI: IppiRect,
                                       coeffs: *mut [f64; 4usize],
                                       interpolation: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_8u_C3R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                       srcStep: ipp_ctypes::c_int,
                                       srcROI: IppiRect, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstROI: IppiRect,
                                       coeffs: *mut [f64; 4usize],
                                       interpolation: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_8u_C4R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                       srcStep: ipp_ctypes::c_int,
                                       srcROI: IppiRect, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstROI: IppiRect,
                                       coeffs: *mut [f64; 4usize],
                                       interpolation: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_32f_C1R(pSrc: *const Ipp32f,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect, pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        coeffs: *mut [f64; 4usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_32f_C3R(pSrc: *const Ipp32f,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect, pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        coeffs: *mut [f64; 4usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_32f_C4R(pSrc: *const Ipp32f,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect, pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        coeffs: *mut [f64; 4usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_16u_C1R(pSrc: *const Ipp16u,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect, pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        coeffs: *mut [f64; 4usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_16u_C3R(pSrc: *const Ipp16u,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect, pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        coeffs: *mut [f64; 4usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearBack_16u_C4R(pSrc: *const Ipp16u,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect, pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        coeffs: *mut [f64; 4usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuadGetBufferSize(srcSize: IppiSize,
                                             srcROI: IppiRect,
                                             srcQuad: *mut [f64; 2usize],
                                             dstROI: IppiRect,
                                             dstQuad: *mut [f64; 2usize],
                                             interpolation: ipp_ctypes::c_int,
                                             pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_8u_C1R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                       srcStep: ipp_ctypes::c_int,
                                       srcROI: IppiRect,
                                       srcQuad: *mut [f64; 2usize],
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstROI: IppiRect,
                                       dstQuad: *mut [f64; 2usize],
                                       interpolation: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_8u_C3R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                       srcStep: ipp_ctypes::c_int,
                                       srcROI: IppiRect,
                                       srcQuad: *mut [f64; 2usize],
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstROI: IppiRect,
                                       dstQuad: *mut [f64; 2usize],
                                       interpolation: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_8u_C4R(pSrc: *const Ipp8u, srcSize: IppiSize,
                                       srcStep: ipp_ctypes::c_int,
                                       srcROI: IppiRect,
                                       srcQuad: *mut [f64; 2usize],
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstROI: IppiRect,
                                       dstQuad: *mut [f64; 2usize],
                                       interpolation: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_32f_C1R(pSrc: *const Ipp32f,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect,
                                        srcQuad: *mut [f64; 2usize],
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        dstQuad: *mut [f64; 2usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_32f_C3R(pSrc: *const Ipp32f,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect,
                                        srcQuad: *mut [f64; 2usize],
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        dstQuad: *mut [f64; 2usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_32f_C4R(pSrc: *const Ipp32f,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect,
                                        srcQuad: *mut [f64; 2usize],
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        dstQuad: *mut [f64; 2usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_16u_C1R(pSrc: *const Ipp16u,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect,
                                        srcQuad: *mut [f64; 2usize],
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        dstQuad: *mut [f64; 2usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_16u_C3R(pSrc: *const Ipp16u,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect,
                                        srcQuad: *mut [f64; 2usize],
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        dstQuad: *mut [f64; 2usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpBilinearQuad_16u_C4R(pSrc: *const Ipp16u,
                                        srcSize: IppiSize,
                                        srcStep: ipp_ctypes::c_int,
                                        srcROI: IppiRect,
                                        srcQuad: *mut [f64; 2usize],
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstROI: IppiRect,
                                        dstQuad: *mut [f64; 2usize],
                                        interpolation: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpGetBufferSize(pSpec: *const IppiWarpSpec,
                                 dstRoiSize: IppiSize,
                                 pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpQuadGetSize(srcSize: IppiSize, srcQuad: *mut [f64; 2usize],
                               dstSize: IppiSize, dstQuad: *mut [f64; 2usize],
                               transform: IppiWarpTransformType,
                               dataType: IppDataType,
                               interpolation: IppiInterpolationType,
                               borderType: IppiBorderType,
                               pSpecSize: *mut ipp_ctypes::c_int,
                               pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpQuadNearestInit(srcSize: IppiSize,
                                   srcQuad: *mut [f64; 2usize],
                                   dstSize: IppiSize,
                                   dstQuad: *mut [f64; 2usize],
                                   transform: IppiWarpTransformType,
                                   dataType: IppDataType,
                                   numChannels: ipp_ctypes::c_int,
                                   borderType: IppiBorderType,
                                   pBorderValue: *const Ipp64f,
                                   smoothEdge: ipp_ctypes::c_int,
                                   pSpec: *mut IppiWarpSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpQuadLinearInit(srcSize: IppiSize,
                                  srcQuad: *mut [f64; 2usize],
                                  dstSize: IppiSize,
                                  dstQuad: *mut [f64; 2usize],
                                  transform: IppiWarpTransformType,
                                  dataType: IppDataType,
                                  numChannels: ipp_ctypes::c_int,
                                  borderType: IppiBorderType,
                                  pBorderValue: *const Ipp64f,
                                  smoothEdge: ipp_ctypes::c_int,
                                  pSpec: *mut IppiWarpSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpQuadCubicInit(srcSize: IppiSize,
                                 srcQuad: *mut [f64; 2usize],
                                 dstSize: IppiSize,
                                 dstQuad: *mut [f64; 2usize],
                                 transform: IppiWarpTransformType,
                                 dataType: IppDataType,
                                 numChannels: ipp_ctypes::c_int,
                                 valueB: Ipp64f, valueC: Ipp64f,
                                 borderType: IppiBorderType,
                                 pBorderValue: *const Ipp64f,
                                 smoothEdge: ipp_ctypes::c_int,
                                 pSpec: *mut IppiWarpSpec,
                                 pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineGetSize(srcSize: IppiSize, dstSize: IppiSize,
                                 dataType: IppDataType,
                                 coeffs: *mut [f64; 3usize],
                                 interpolation: IppiInterpolationType,
                                 direction: IppiWarpDirection,
                                 borderType: IppiBorderType,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearestInit(srcSize: IppiSize, dstSize: IppiSize,
                                     dataType: IppDataType,
                                     coeffs: *mut [f64; 3usize],
                                     direction: IppiWarpDirection,
                                     numChannels: ipp_ctypes::c_int,
                                     borderType: IppiBorderType,
                                     pBorderValue: *const Ipp64f,
                                     smoothEdge: ipp_ctypes::c_int,
                                     pSpec: *mut IppiWarpSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinearInit(srcSize: IppiSize, dstSize: IppiSize,
                                    dataType: IppDataType,
                                    coeffs: *mut [f64; 3usize],
                                    direction: IppiWarpDirection,
                                    numChannels: ipp_ctypes::c_int,
                                    borderType: IppiBorderType,
                                    pBorderValue: *const Ipp64f,
                                    smoothEdge: ipp_ctypes::c_int,
                                    pSpec: *mut IppiWarpSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubicInit(srcSize: IppiSize, dstSize: IppiSize,
                                   dataType: IppDataType,
                                   coeffs: *mut [f64; 3usize],
                                   direction: IppiWarpDirection,
                                   numChannels: ipp_ctypes::c_int,
                                   valueB: Ipp64f, valueC: Ipp64f,
                                   borderType: IppiBorderType,
                                   pBorderValue: *const Ipp64f,
                                   smoothEdge: ipp_ctypes::c_int,
                                   pSpec: *mut IppiWarpSpec,
                                   pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_8u_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_8u_C3R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_8u_C4R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_16u_C1R(pSrc: *const Ipp16u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_16u_C3R(pSrc: *const Ipp16u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_16u_C4R(pSrc: *const Ipp16u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_16s_C1R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_16s_C3R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_16s_C4R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_32f_C1R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_32f_C3R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_32f_C4R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_64f_C1R(pSrc: *const Ipp64f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp64f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_64f_C3R(pSrc: *const Ipp64f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp64f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineNearest_64f_C4R(pSrc: *const Ipp64f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp64f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiOffset: IppiPoint,
                                         dstRoiSize: IppiSize,
                                         pSpec: *const IppiWarpSpec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_8u_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_8u_C3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_8u_C4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_16u_C1R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_16u_C3R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_16u_C4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_16s_C1R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_16s_C3R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_16s_C4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_32f_C3R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_32f_C4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_64f_C1R(pSrc: *const Ipp64f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp64f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_64f_C3R(pSrc: *const Ipp64f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp64f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineLinear_64f_C4R(pSrc: *const Ipp64f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp64f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiOffset: IppiPoint,
                                        dstRoiSize: IppiSize,
                                        pSpec: *const IppiWarpSpec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiOffset: IppiPoint,
                                      dstRoiSize: IppiSize,
                                      pSpec: *const IppiWarpSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiOffset: IppiPoint,
                                      dstRoiSize: IppiSize,
                                      pSpec: *const IppiWarpSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiOffset: IppiPoint,
                                      dstRoiSize: IppiSize,
                                      pSpec: *const IppiWarpSpec,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_64f_C1R(pSrc: *const Ipp64f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp64f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_64f_C3R(pSrc: *const Ipp64f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp64f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpAffineCubic_64f_C4R(pSrc: *const Ipp64f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp64f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiOffset: IppiPoint,
                                       dstRoiSize: IppiSize,
                                       pSpec: *const IppiWarpSpec,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpGetRectInfinite() -> IppiRect;
}
extern "C" {
    pub fn ippiWarpPerspectiveGetSize(srcSize: IppiSize, srcRoi: IppiRect,
                                      dstSize: IppiSize,
                                      dataType: IppDataType,
                                      coeffs: *mut [f64; 3usize],
                                      interpolation: IppiInterpolationType,
                                      direction: IppiWarpDirection,
                                      borderType: IppiBorderType,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearestInit(srcSize: IppiSize, srcRoi: IppiRect,
                                          dstSize: IppiSize,
                                          dataType: IppDataType,
                                          coeffs: *mut [f64; 3usize],
                                          direction: IppiWarpDirection,
                                          numChannels: ipp_ctypes::c_int,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp64f,
                                          smoothEdge: ipp_ctypes::c_int,
                                          pSpec: *mut IppiWarpSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinearInit(srcSize: IppiSize, srcRoi: IppiRect,
                                         dstSize: IppiSize,
                                         dataType: IppDataType,
                                         coeffs: *mut [f64; 3usize],
                                         direction: IppiWarpDirection,
                                         numChannels: ipp_ctypes::c_int,
                                         borderType: IppiBorderType,
                                         pBorderValue: *const Ipp64f,
                                         smoothEdge: ipp_ctypes::c_int,
                                         pSpec: *mut IppiWarpSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubicInit(srcSize: IppiSize, srcRoi: IppiRect,
                                        dstSize: IppiSize,
                                        dataType: IppDataType,
                                        coeffs: *mut [f64; 3usize],
                                        direction: IppiWarpDirection,
                                        numChannels: ipp_ctypes::c_int,
                                        valueB: Ipp64f, valueC: Ipp64f,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp64f,
                                        smoothEdge: ipp_ctypes::c_int,
                                        pSpec: *mut IppiWarpSpec,
                                        pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_8u_C1R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp8u,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_8u_C3R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp8u,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_8u_C4R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp8u,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_16u_C1R(pSrc: *const Ipp16u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16u,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_16u_C3R(pSrc: *const Ipp16u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16u,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_16u_C4R(pSrc: *const Ipp16u,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16u,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_16s_C1R(pSrc: *const Ipp16s,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16s,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_16s_C3R(pSrc: *const Ipp16s,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16s,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_16s_C4R(pSrc: *const Ipp16s,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16s,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_32f_C1R(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_32f_C3R(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveNearest_32f_C4R(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiOffset: IppiPoint,
                                              dstRoiSize: IppiSize,
                                              pSpec: *const IppiWarpSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_8u_C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_8u_C3R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_8u_C4R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_16u_C1R(pSrc: *const Ipp16u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16u,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_16u_C3R(pSrc: *const Ipp16u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16u,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_16u_C4R(pSrc: *const Ipp16u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16u,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_16s_C1R(pSrc: *const Ipp16s,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16s,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_16s_C3R(pSrc: *const Ipp16s,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16s,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_16s_C4R(pSrc: *const Ipp16s,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16s,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_32f_C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_32f_C3R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveLinear_32f_C4R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiOffset: IppiPoint,
                                             dstRoiSize: IppiSize,
                                             pSpec: *const IppiWarpSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_8u_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiOffset: IppiPoint,
                                           dstRoiSize: IppiSize,
                                           pSpec: *const IppiWarpSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_8u_C3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiOffset: IppiPoint,
                                           dstRoiSize: IppiSize,
                                           pSpec: *const IppiWarpSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_8u_C4R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiOffset: IppiPoint,
                                           dstRoiSize: IppiSize,
                                           pSpec: *const IppiWarpSpec,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_16u_C1R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_16u_C3R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_16u_C4R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_16s_C1R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_16s_C3R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_16s_C4R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_32f_C1R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_32f_C3R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiWarpPerspectiveCubic_32f_C4R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiOffset: IppiPoint,
                                            dstRoiSize: IppiSize,
                                            pSpec: *const IppiWarpSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMomentGetStateSize_64f(hint: IppHintAlgorithm,
                                      pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMomentInit_64f(pState: *mut IppiMomentState_64f,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 pCtx: *mut IppiMomentState_64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_8u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 pCtx: *mut IppiMomentState_64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_8u_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_32f_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_32f_C3R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_32f_AC4R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_16u_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMoments64f_16u_AC4R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   pCtx: *mut IppiMomentState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetSpatialMoment_64f(pState: *const IppiMomentState_64f,
                                    mOrd: ipp_ctypes::c_int,
                                    nOrd: ipp_ctypes::c_int,
                                    nChannel: ipp_ctypes::c_int,
                                    roiOffset: IppiPoint, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetCentralMoment_64f(pState: *const IppiMomentState_64f,
                                    mOrd: ipp_ctypes::c_int,
                                    nOrd: ipp_ctypes::c_int,
                                    nChannel: ipp_ctypes::c_int,
                                    pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiGetNormalizedSpatialMoment_64f(pState:
                                                  *const IppiMomentState_64f,
                                              mOrd: ipp_ctypes::c_int,
                                              nOrd: ipp_ctypes::c_int,
                                              nChannel: ipp_ctypes::c_int,
                                              roiOffset: IppiPoint,
                                              pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetNormalizedCentralMoment_64f(pState:
                                                  *const IppiMomentState_64f,
                                              mOrd: ipp_ctypes::c_int,
                                              nOrd: ipp_ctypes::c_int,
                                              nChannel: ipp_ctypes::c_int,
                                              pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGetHuMoments_64f(pState: *const IppiMomentState_64f,
                                nChannel: ipp_ctypes::c_int, pHm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16s_C1R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16s_C4R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16u_C1R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_16u_C4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_32f_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_Inf_32f_C4R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16s_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16s_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16s_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_32f_C1R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pValue: *mut Ipp64f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_32f_C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L1_32f_C4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16s_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16s_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16s_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pValue: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_32f_C1R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pValue: *mut Ipp64f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_32f_C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNorm_L2_32f_C4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               value: *mut Ipp64f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_8u_C1R(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_8u_C3R(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_8u_C4R(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16s_C1R(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16s_C3R(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16s_C4R(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16u_C1R(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16u_C3R(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_16u_C4R(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_32f_C1R(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_32f_C3R(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_Inf_32f_C4R(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_8u_C1R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_8u_C3R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_8u_C4R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16s_C1R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16s_C3R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16s_C4R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16u_C1R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16u_C3R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_16u_C4R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_32f_C1R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_32f_C3R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L1_32f_C4R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_8u_C1R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_8u_C3R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_8u_C4R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16s_C1R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16s_C3R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16s_C4R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16u_C1R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16u_C3R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_16u_C4R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_32f_C1R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_32f_C3R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormDiff_L2_32f_C4R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f,
                                   hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_8u_C1R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_8u_C3R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_8u_C4R(pSrc1: *const Ipp8u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp8u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16s_C1R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16s_C3R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16s_C4R(pSrc1: *const Ipp16s,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16s,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16u_C1R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16u_C3R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_16u_C4R(pSrc1: *const Ipp16u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp16u,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_32f_C1R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_32f_C3R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_Inf_32f_C4R(pSrc1: *const Ipp32f,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp32f,
                                   src2Step: ipp_ctypes::c_int,
                                   roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_8u_C1R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_8u_C3R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_8u_C4R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16s_C1R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16s_C3R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16s_C4R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16u_C1R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16u_C3R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_16u_C4R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_32f_C1R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_32f_C3R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L1_32f_C4R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_8u_C1R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_8u_C3R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_8u_C4R(pSrc1: *const Ipp8u,
                                 src1Step: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp8u,
                                 src2Step: ipp_ctypes::c_int,
                                 roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16s_C1R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16s_C3R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16s_C4R(pSrc1: *const Ipp16s,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16s,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16u_C1R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16u_C3R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_16u_C4R(pSrc1: *const Ipp16u,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp16u,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_32f_C1R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pValue: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_32f_C3R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiNormRel_L2_32f_C4R(pSrc1: *const Ipp32f,
                                  src1Step: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32f,
                                  src2Step: ipp_ctypes::c_int,
                                  roiSize: IppiSize, value: *mut Ipp64f,
                                  hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, pSum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, sum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, sum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, sum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, sum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, sum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, sum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSum: *mut Ipp64f,
                           hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, sum: *mut Ipp64f,
                           hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiSum_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, sum: *mut Ipp64f,
                           hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, mean: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, mean: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, mean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, mean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, mean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, mean: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMean_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMean: *mut Ipp64f,
                            hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, mean: *mut Ipp64f,
                            hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiMean_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, mean: *mut Ipp64f,
                            hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_8u32f_C1R(pSrc1: *const Ipp8u,
                                      src1Step: ipp_ctypes::c_int,
                                      pSrc2: *const Ipp8u,
                                      src2Step: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      pQualityIndex: *mut Ipp32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_8u32f_C3R(pSrc1: *const Ipp8u,
                                      src1Step: ipp_ctypes::c_int,
                                      pSrc2: *const Ipp8u,
                                      src2Step: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      pQualityIndex: *mut Ipp32f,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_8u32f_AC4R(pSrc1: *const Ipp8u,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp8u,
                                       src2Step: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       pQualityIndex: *mut Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_16u32f_C1R(pSrc1: *const Ipp16u,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp16u,
                                       src2Step: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       pQualityIndex: *mut Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_16u32f_C3R(pSrc1: *const Ipp16u,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp16u,
                                       src2Step: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       pQualityIndex: *mut Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_16u32f_AC4R(pSrc1: *const Ipp16u,
                                        src1Step: ipp_ctypes::c_int,
                                        pSrc2: *const Ipp16u,
                                        src2Step: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        pQualityIndex: *mut Ipp32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_32f_C1R(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    pQualityIndex: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_32f_C3R(pSrc1: *const Ipp32f,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp32f,
                                    src2Step: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    pQualityIndex: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndex_32f_AC4R(pSrc1: *const Ipp32f,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp32f,
                                     src2Step: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     pQualityIndex: *mut Ipp32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiQualityIndexGetBufferSize(srcType: IppDataType,
                                         ippChan: IppChannels,
                                         roiSize: IppiSize,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHistogramGetBufferSize(dataType: IppDataType,
                                      roiSize: IppiSize,
                                      nLevels: *const ipp_ctypes::c_int,
                                      numChannels: ipp_ctypes::c_int,
                                      uniform: ipp_ctypes::c_int,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHistogramInit(dataType: IppDataType,
                             pLevels: *mut *const Ipp32f,
                             nLevels: *mut ipp_ctypes::c_int,
                             numChannels: ipp_ctypes::c_int,
                             pSpec: *mut IppiHistogramSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogramUniformInit(dataType: IppDataType,
                                    lowerLevel: *mut Ipp32f,
                                    upperLevel: *mut Ipp32f,
                                    nLevels: *mut ipp_ctypes::c_int,
                                    numChannels: ipp_ctypes::c_int,
                                    pSpec: *mut IppiHistogramSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHistogramGetLevels(pSpec: *const IppiHistogramSpec,
                                  pLevels: *mut *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_8u_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                pHist: *mut Ipp32u,
                                pSpec: *const IppiHistogramSpec,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_8u_C3R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                pHist: *mut *mut Ipp32u,
                                pSpec: *const IppiHistogramSpec,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_8u_C4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                pHist: *mut *mut Ipp32u,
                                pSpec: *const IppiHistogramSpec,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_16s_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_16s_C3R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_16s_C4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_16u_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_16u_C3R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_16u_C4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_32f_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_32f_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHistogram_32f_C4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pHist: *mut *mut Ipp32u,
                                 pSpec: *const IppiHistogramSpec,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_C1IR(pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_C3IR(pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_C4IR(pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_8u_AC4IR(pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_C1IR(pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_C3IR(pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_C4IR(pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16u_AC4IR(pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_AC4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_C1IR(pSrcDst: *mut Ipp16s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_C3IR(pSrcDst: *mut Ipp16s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_C4IR(pSrcDst: *mut Ipp16s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_16s_AC4IR(pSrcDst: *mut Ipp16s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pSpec: *mut IppiLUT_Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_C1IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_C3IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_C4IR(pSrcDst: *mut Ipp32f,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_32f_AC4IR(pSrcDst: *mut Ipp32f,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_GetSize(interp: IppiInterpolationType,
                           dataType: IppDataType, ippChan: IppChannels,
                           roiSize: IppiSize,
                           nLevels: *const ipp_ctypes::c_int,
                           pSpecSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_Init_8u(interp: IppiInterpolationType,
                           ippChan: IppChannels, roiSize: IppiSize,
                           pValues: *mut *const Ipp32s,
                           pLevels: *mut *const Ipp32s,
                           nLevels: *mut ipp_ctypes::c_int,
                           pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_Init_16u(interp: IppiInterpolationType,
                            ippChan: IppChannels, roiSize: IppiSize,
                            pValues: *mut *const Ipp32s,
                            pLevels: *mut *const Ipp32s,
                            nLevels: *mut ipp_ctypes::c_int,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_Init_16s(interp: IppiInterpolationType,
                            ippChan: IppChannels, roiSize: IppiSize,
                            pValues: *mut *const Ipp32s,
                            pLevels: *mut *const Ipp32s,
                            nLevels: *mut ipp_ctypes::c_int,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUT_Init_32f(interp: IppiInterpolationType,
                            ippChan: IppChannels, roiSize: IppiSize,
                            pValues: *mut *const Ipp32f,
                            pLevels: *mut *const Ipp32f,
                            nLevels: *mut ipp_ctypes::c_int,
                            pSpec: *mut IppiLUT_Spec) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u32u_C1R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pTable: *const Ipp32u,
                                     nBitSize: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u24u_C1R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pTable: *const Ipp8u,
                                     nBitSize: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u8u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pTable: *const Ipp8u,
                                    nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_8u32u_C1R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pTable: *const Ipp32u,
                                    nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_8u24u_C1R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pTable: *const Ipp8u,
                                    nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pTable: *const Ipp8u,
                                 nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pTable: *const Ipp16u,
                                  nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_8u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 pTable: *const *const Ipp8u,
                                 nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pTable: *const *const Ipp16u,
                                  nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_8u_C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize,
                                 pTable: *const *const Ipp8u,
                                 nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u_C4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pTable: *const *const Ipp16u,
                                  nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_8u_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize,
                                  pTable: *const *const Ipp8u,
                                  nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiLUTPalette_16u_AC4R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   pTable: *const *const Ipp16u,
                                   nBitSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCountInRange_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   counts: *mut ipp_ctypes::c_int,
                                   lowerBound: Ipp8u, upperBound: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCountInRange_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   counts: *mut ipp_ctypes::c_int,
                                   lowerBound: *mut Ipp8u,
                                   upperBound: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCountInRange_8u_AC4R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    counts: *mut ipp_ctypes::c_int,
                                    lowerBound: *mut Ipp8u,
                                    upperBound: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCountInRange_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    counts: *mut ipp_ctypes::c_int,
                                    lowerBound: Ipp32f, upperBound: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCountInRange_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    counts: *mut ipp_ctypes::c_int,
                                    lowerBound: *mut Ipp32f,
                                    upperBound: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCountInRange_32f_AC4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     counts: *mut ipp_ctypes::c_int,
                                     lowerBound: *mut Ipp32f,
                                     upperBound: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianGetBufferSize_32f(dstRoiSize: IppiSize,
                                             maskSize: IppiSize,
                                             nChannels: Ipp32u,
                                             bufferSize: *mut Ipp32u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianGetBufferSize_64f(dstRoiSize: IppiSize,
                                             maskSize: IppiSize,
                                             nChannels: Ipp32u,
                                             bufferSize: *mut Ipp32u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedian_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedian_32f_C4R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedian_64f_C1R(pSrc: *const Ipp64f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp64f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_8u_C1R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_8u_C3R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_8u_AC4R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_16s_C1R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_16s_C3R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_16s_AC4R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_16u_C1R(pSrc: *const Ipp16u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_16u_C3R(pSrc: *const Ipp16u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianCross_16u_AC4R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianColor_8u_C3R(pSrc: *const Ipp8u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianColor_8u_AC4R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianColor_16s_C3R(pSrc: *const Ipp16s,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16s,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianColor_16s_AC4R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianColor_32f_C3R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianColor_32f_AC4R(pSrc: *const Ipp32f,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianWeightedCenter3x3_8u_C1R(pSrc: *const Ipp8u,
                                                    srcStep:
                                                        ipp_ctypes::c_int,
                                                    pDst: *mut Ipp8u,
                                                    dstStep:
                                                        ipp_ctypes::c_int,
                                                    dstRoiSize: IppiSize,
                                                    weight: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorderGetBufferSize(dstRoiSize: IppiSize,
                                               maskSize: IppiSize,
                                               dataType: IppDataType,
                                               numChannels: ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_8u_C1R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         maskSize: IppiSize,
                                         borderType: IppiBorderType,
                                         borderValue: Ipp8u,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16s_C1R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp16s,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16u_C1R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp16u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_32f_C1R(pSrc: *const Ipp32f,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_8u_C3R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         maskSize: IppiSize,
                                         borderType: IppiBorderType,
                                         pBorderValue: *const Ipp8u,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16s_C3R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp16s,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16u_C3R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp16u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_8u_AC4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16s_AC4R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           maskSize: IppiSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16u_AC4R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           maskSize: IppiSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16u,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_8u_C4R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         maskSize: IppiSize,
                                         borderType: IppiBorderType,
                                         pBorderValue: *const Ipp8u,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16s_C4R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp16s,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMedianBorder_16u_C4R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: IppiSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp16u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorderGetBufferSize(dstRoiSize: IppiSize,
                                            maskSize: IppiSize,
                                            dataType: IppDataType,
                                            numChannels: ipp_ctypes::c_int,
                                            pBufferSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorderGetBufferSize(dstRoiSize: IppiSize,
                                            maskSize: IppiSize,
                                            dataType: IppDataType,
                                            numChannels: ipp_ctypes::c_int,
                                            pBufferSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiSize,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp8u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiSize,
                                      borderType: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_8u_AC4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp8u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiSize,
                                      borderType: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16s_AC4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        maskSize: IppiSize,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp16s,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16u_AC4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        maskSize: IppiSize,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp16u,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_32f_AC4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        maskSize: IppiSize,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMaxBorder_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiSize,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp8u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiSize,
                                      borderType: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_8u_AC4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp8u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiSize,
                                      borderType: IppiBorderType,
                                      pBorderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16s_AC4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        maskSize: IppiSize,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp16s,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16u_AC4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        maskSize: IppiSize,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp16u,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       borderValue: Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_32f_AC4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        maskSize: IppiSize,
                                        borderType: IppiBorderType,
                                        pBorderValue: *const Ipp32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterMinBorder_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: IppiSize,
                                       borderType: IppiBorderType,
                                       pBorderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorderGetBufferSize(roiSize: IppiSize,
                                            maskSize: IppiSize,
                                            dataType: IppDataType,
                                            numChannels: ipp_ctypes::c_int,
                                            pBufferSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp32f,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_32f_AC4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, maskSize: IppiSize,
                                        border: IppiBorderType,
                                        borderValue: *const Ipp32f,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp16u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16u_AC4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, maskSize: IppiSize,
                                        border: IppiBorderType,
                                        borderValue: *const Ipp16u,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp16s,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_16s_AC4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, maskSize: IppiSize,
                                        border: IppiBorderType,
                                        borderValue: *const Ipp16s,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, maskSize: IppiSize,
                                      border: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, maskSize: IppiSize,
                                      border: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, maskSize: IppiSize,
                                      border: IppiBorderType,
                                      borderValue: *const Ipp8u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBoxBorder_8u_AC4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, maskSize: IppiSize,
                                       border: IppiBorderType,
                                       borderValue: *const Ipp8u,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBox_64f_C1R(pSrc: *const Ipp64f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 dstRoiSize: IppiSize, maskSize: IppiSize,
                                 anchor: IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_8u32f_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: ipp_ctypes::c_int,
                                      anchor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_8u32f_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: ipp_ctypes::c_int,
                                      anchor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_8u32f_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: ipp_ctypes::c_int,
                                      anchor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_16u32f_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: ipp_ctypes::c_int,
                                       anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_16u32f_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: ipp_ctypes::c_int,
                                       anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_16u32f_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: ipp_ctypes::c_int,
                                       anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_16s32f_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: ipp_ctypes::c_int,
                                       anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_16s32f_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: ipp_ctypes::c_int,
                                       anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowRow_16s32f_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       maskSize: ipp_ctypes::c_int,
                                       anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_8u32f_C1R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         maskSize: ipp_ctypes::c_int,
                                         anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_8u32f_C3R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         maskSize: ipp_ctypes::c_int,
                                         anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_8u32f_C4R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         maskSize: ipp_ctypes::c_int,
                                         anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_16u32f_C1R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: ipp_ctypes::c_int,
                                          anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_16u32f_C3R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: ipp_ctypes::c_int,
                                          anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_16u32f_C4R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: ipp_ctypes::c_int,
                                          anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_16s32f_C1R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: ipp_ctypes::c_int,
                                          anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_16s32f_C3R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: ipp_ctypes::c_int,
                                          anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSumWindowColumn_16s32f_C4R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          maskSize: ipp_ctypes::c_int,
                                          anchor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizBorderGetBufferSize(dstRoiSize: IppiSize,
                                                   mask: IppiMaskSize,
                                                   srcDataType: IppDataType,
                                                   dstDataType: IppDataType,
                                                   numChannels:
                                                       ipp_ctypes::c_int,
                                                   pBufferSize:
                                                       *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertBorderGetBufferSize(dstRoiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  srcDataType: IppDataType,
                                                  dstDataType: IppDataType,
                                                  numChannels:
                                                      ipp_ctypes::c_int,
                                                  pBufferSize:
                                                      *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrHorizMaskBorderGetBufferSize(dstRoiSize: IppiSize,
                                                        mask: IppiMaskSize,
                                                        srcDataType:
                                                            IppDataType,
                                                        dstDataType:
                                                            IppDataType,
                                                        numChannels:
                                                            ipp_ctypes::c_int,
                                                        pBufferSize:
                                                            *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrVertMaskBorderGetBufferSize(dstRoiSize: IppiSize,
                                                       mask: IppiMaskSize,
                                                       srcDataType:
                                                           IppDataType,
                                                       dstDataType:
                                                           IppDataType,
                                                       numChannels:
                                                           ipp_ctypes::c_int,
                                                       pBufferSize:
                                                           *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittHorizBorderGetBufferSize(dstRoiSize: IppiSize,
                                                     mask: IppiMaskSize,
                                                     srcDataType: IppDataType,
                                                     dstDataType: IppDataType,
                                                     numChannels:
                                                         ipp_ctypes::c_int,
                                                     pBufferSize:
                                                         *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittVertBorderGetBufferSize(dstRoiSize: IppiSize,
                                                    mask: IppiMaskSize,
                                                    srcDataType: IppDataType,
                                                    dstDataType: IppDataType,
                                                    numChannels:
                                                        ipp_ctypes::c_int,
                                                    pBufferSize:
                                                        *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsDownBorderGetBufferSize(dstRoiSize: IppiSize,
                                                    mask: IppiMaskSize,
                                                    srcDataType: IppDataType,
                                                    dstDataType: IppDataType,
                                                    numChannels:
                                                        ipp_ctypes::c_int,
                                                    pBufferSize:
                                                        *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsUpBorderGetBufferSize(dstRoiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  srcDataType: IppDataType,
                                                  dstDataType: IppDataType,
                                                  numChannels:
                                                      ipp_ctypes::c_int,
                                                  pBufferSize:
                                                      *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizSecondBorderGetBufferSize(dstRoiSize: IppiSize,
                                                         mask: IppiMaskSize,
                                                         srcDataType:
                                                             IppDataType,
                                                         dstDataType:
                                                             IppDataType,
                                                         numChannels:
                                                             ipp_ctypes::c_int,
                                                         pBufferSize:
                                                             *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertSecondBorderGetBufferSize(dstRoiSize: IppiSize,
                                                        mask: IppiMaskSize,
                                                        srcDataType:
                                                            IppDataType,
                                                        dstDataType:
                                                            IppDataType,
                                                        numChannels:
                                                            ipp_ctypes::c_int,
                                                        pBufferSize:
                                                            *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelNegVertBorderGetBufferSize(dstRoiSize: IppiSize,
                                                     mask: IppiMaskSize,
                                                     srcDataType: IppDataType,
                                                     dstDataType: IppDataType,
                                                     numChannels:
                                                         ipp_ctypes::c_int,
                                                     pBufferSize:
                                                         *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorderGetBufferSize(dstRoiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                srcDataType: IppDataType,
                                                dstDataType: IppDataType,
                                                numChannels:
                                                    ipp_ctypes::c_int,
                                                pBufferSize:
                                                    *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorderGetBufferSize(dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               srcDataType: IppDataType,
                                               dstDataType: IppDataType,
                                               numChannels: ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorderGetBufferSize(dstRoiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                srcDataType: IppDataType,
                                                dstDataType: IppDataType,
                                                numChannels:
                                                    ipp_ctypes::c_int,
                                                pBufferSize:
                                                    *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16s,
                                               dstStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp8u,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                srcStep: ipp_ctypes::c_int,
                                                pDst: *mut Ipp16s,
                                                dstStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp8u,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrVertMaskBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                    srcStep:
                                                        ipp_ctypes::c_int,
                                                    pDst: *mut Ipp16s,
                                                    dstStep:
                                                        ipp_ctypes::c_int,
                                                    dstRoiSize: IppiSize,
                                                    mask: IppiMaskSize,
                                                    borderType:
                                                        IppiBorderType,
                                                    borderValue: Ipp8u,
                                                    pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrHorizMaskBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                     srcStep:
                                                         ipp_ctypes::c_int,
                                                     pDst: *mut Ipp16s,
                                                     dstStep:
                                                         ipp_ctypes::c_int,
                                                     dstRoiSize: IppiSize,
                                                     mask: IppiMaskSize,
                                                     borderType:
                                                         IppiBorderType,
                                                     borderValue: Ipp8u,
                                                     pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittVertBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 pDst: *mut Ipp16s,
                                                 dstStep: ipp_ctypes::c_int,
                                                 dstRoiSize: IppiSize,
                                                 mask: IppiMaskSize,
                                                 borderType: IppiBorderType,
                                                 borderValue: Ipp8u,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittHorizBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                  srcStep: ipp_ctypes::c_int,
                                                  pDst: *mut Ipp16s,
                                                  dstStep: ipp_ctypes::c_int,
                                                  dstRoiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  borderType: IppiBorderType,
                                                  borderValue: Ipp8u,
                                                  pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsDownBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 pDst: *mut Ipp16s,
                                                 dstStep: ipp_ctypes::c_int,
                                                 dstRoiSize: IppiSize,
                                                 mask: IppiMaskSize,
                                                 borderType: IppiBorderType,
                                                 borderValue: Ipp8u,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsUpBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16s,
                                               dstStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp8u,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertSecondBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                     srcStep:
                                                         ipp_ctypes::c_int,
                                                     pDst: *mut Ipp16s,
                                                     dstStep:
                                                         ipp_ctypes::c_int,
                                                     dstRoiSize: IppiSize,
                                                     mask: IppiMaskSize,
                                                     borderType:
                                                         IppiBorderType,
                                                     borderValue: Ipp8u,
                                                     pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizSecondBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                      srcStep:
                                                          ipp_ctypes::c_int,
                                                      pDst: *mut Ipp16s,
                                                      dstStep:
                                                          ipp_ctypes::c_int,
                                                      dstRoiSize: IppiSize,
                                                      mask: IppiMaskSize,
                                                      borderType:
                                                          IppiBorderType,
                                                      borderValue: Ipp8u,
                                                      pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelNegVertBorder_8u16s_C1R(pSrc: *const Ipp8u,
                                                  srcStep: ipp_ctypes::c_int,
                                                  pDst: *mut Ipp16s,
                                                  dstStep: ipp_ctypes::c_int,
                                                  dstRoiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  borderType: IppiBorderType,
                                                  borderValue: Ipp8u,
                                                  pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertBorder_32f_C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             mask: IppiMaskSize,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp32f,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizBorder_32f_C1R(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp32f,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              mask: IppiMaskSize,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp32f,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrVertMaskBorder_32f_C1R(pSrc: *const Ipp32f,
                                                  srcStep: ipp_ctypes::c_int,
                                                  pDst: *mut Ipp32f,
                                                  dstStep: ipp_ctypes::c_int,
                                                  dstRoiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  borderType: IppiBorderType,
                                                  borderValue: Ipp32f,
                                                  pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrHorizMaskBorder_32f_C1R(pSrc: *const Ipp32f,
                                                   srcStep: ipp_ctypes::c_int,
                                                   pDst: *mut Ipp32f,
                                                   dstStep: ipp_ctypes::c_int,
                                                   dstRoiSize: IppiSize,
                                                   mask: IppiMaskSize,
                                                   borderType: IppiBorderType,
                                                   borderValue: Ipp32f,
                                                   pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittVertBorder_32f_C1R(pSrc: *const Ipp32f,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp32f,
                                               dstStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp32f,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittHorizBorder_32f_C1R(pSrc: *const Ipp32f,
                                                srcStep: ipp_ctypes::c_int,
                                                pDst: *mut Ipp32f,
                                                dstStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp32f,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsDownBorder_32f_C1R(pSrc: *const Ipp32f,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp32f,
                                               dstStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp32f,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsUpBorder_32f_C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             mask: IppiMaskSize,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp32f,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertSecondBorder_32f_C1R(pSrc: *const Ipp32f,
                                                   srcStep: ipp_ctypes::c_int,
                                                   pDst: *mut Ipp32f,
                                                   dstStep: ipp_ctypes::c_int,
                                                   dstRoiSize: IppiSize,
                                                   mask: IppiMaskSize,
                                                   borderType: IppiBorderType,
                                                   borderValue: Ipp32f,
                                                   pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizSecondBorder_32f_C1R(pSrc: *const Ipp32f,
                                                    srcStep:
                                                        ipp_ctypes::c_int,
                                                    pDst: *mut Ipp32f,
                                                    dstStep:
                                                        ipp_ctypes::c_int,
                                                    dstRoiSize: IppiSize,
                                                    mask: IppiMaskSize,
                                                    borderType:
                                                        IppiBorderType,
                                                    borderValue: Ipp32f,
                                                    pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelNegVertBorder_32f_C1R(pSrc: *const Ipp32f,
                                                srcStep: ipp_ctypes::c_int,
                                                pDst: *mut Ipp32f,
                                                dstStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp32f,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelVertBorder_16s_C1R(pSrc: *const Ipp16s,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16s,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             mask: IppiMaskSize,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp16s,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelHorizBorder_16s_C1R(pSrc: *const Ipp16s,
                                              srcStep: ipp_ctypes::c_int,
                                              pDst: *mut Ipp16s,
                                              dstStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              mask: IppiMaskSize,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp16s,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrVertMaskBorder_16s_C1R(pSrc: *const Ipp16s,
                                                  srcStep: ipp_ctypes::c_int,
                                                  pDst: *mut Ipp16s,
                                                  dstStep: ipp_ctypes::c_int,
                                                  dstRoiSize: IppiSize,
                                                  mask: IppiMaskSize,
                                                  borderType: IppiBorderType,
                                                  borderValue: Ipp16s,
                                                  pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterScharrHorizMaskBorder_16s_C1R(pSrc: *const Ipp16s,
                                                   srcStep: ipp_ctypes::c_int,
                                                   pDst: *mut Ipp16s,
                                                   dstStep: ipp_ctypes::c_int,
                                                   dstRoiSize: IppiSize,
                                                   mask: IppiMaskSize,
                                                   borderType: IppiBorderType,
                                                   borderValue: Ipp16s,
                                                   pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittVertBorder_16s_C1R(pSrc: *const Ipp16s,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16s,
                                               dstStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp16s,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterPrewittHorizBorder_16s_C1R(pSrc: *const Ipp16s,
                                                srcStep: ipp_ctypes::c_int,
                                                pDst: *mut Ipp16s,
                                                dstStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                mask: IppiMaskSize,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp16s,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsDownBorder_16s_C1R(pSrc: *const Ipp16s,
                                               srcStep: ipp_ctypes::c_int,
                                               pDst: *mut Ipp16s,
                                               dstStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               mask: IppiMaskSize,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp16s,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterRobertsUpBorder_16s_C1R(pSrc: *const Ipp16s,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16s,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             mask: IppiMaskSize,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp16s,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_8u_C3R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_8u_AC4R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp8u,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_8u_C4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_16s_C1R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_16s_C3R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_16s_AC4R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            mask: IppiMaskSize,
                                            borderType: IppiBorderType,
                                            pBorderValue: *const Ipp16s,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_16s_C4R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_32f_C3R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_32f_AC4R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            mask: IppiMaskSize,
                                            borderType: IppiBorderType,
                                            pBorderValue: *const Ipp32f,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterLaplaceBorder_32f_C4R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_8u_C1R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize,
                                         borderType: IppiBorderType,
                                         borderValue: Ipp8u,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_8u_C3R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize,
                                         borderType: IppiBorderType,
                                         pBorderValue: *const Ipp8u,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_8u_AC4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_8u_C4R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mask: IppiMaskSize,
                                         borderType: IppiBorderType,
                                         pBorderValue: *const Ipp8u,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_16s_C1R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp16s,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_16s_C3R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp16s,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_16s_AC4R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_16s_C4R(pSrc: *const Ipp16s,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp16s,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_32f_C1R(pSrc: *const Ipp32f,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_32f_C3R(pSrc: *const Ipp32f,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_32f_AC4R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterHipassBorder_32f_C4R(pSrc: *const Ipp32f,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          borderValue: Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_8u_C3R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_8u_AC4R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp8u,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_8u_C4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mask: IppiMaskSize,
                                          borderType: IppiBorderType,
                                          pBorderValue: *const Ipp8u,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_16s_C1R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_16s_C3R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_16s_AC4R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            mask: IppiMaskSize,
                                            borderType: IppiBorderType,
                                            pBorderValue: *const Ipp16s,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_16s_C4R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp16s,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_32f_C3R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_32f_AC4R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            mask: IppiMaskSize,
                                            borderType: IppiBorderType,
                                            pBorderValue: *const Ipp32f,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSharpenBorder_32f_C4R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           borderType: IppiBorderType,
                                           pBorderValue: *const Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobelGetBufferSize(dstRoiSize: IppiSize,
                                        mask: IppiMaskSize,
                                        normType: IppNormType,
                                        srcDataType: IppDataType,
                                        dstDataType: IppDataType,
                                        numChannels: ipp_ctypes::c_int,
                                        pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobel_8u16s_C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize,
                                     maskSize: IppiMaskSize,
                                     normType: IppNormType,
                                     borderType: IppiBorderType,
                                     borderValue: Ipp8u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobel_16s32f_C1R(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiMaskSize,
                                      normType: IppNormType,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp16s,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobel_16u32f_C1R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      maskSize: IppiMaskSize,
                                      normType: IppNormType,
                                      borderType: IppiBorderType,
                                      borderValue: Ipp16u,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterSobel_32f_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize,
                                   maskSize: IppiMaskSize,
                                   normType: IppNormType,
                                   borderType: IppiBorderType,
                                   borderValue: Ipp32f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWienerGetBufferSize(dstRoiSize: IppiSize,
                                         maskSize: IppiSize,
                                         channels: ipp_ctypes::c_int,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize, maskSize: IppiSize,
                                   anchor: IppiPoint, noise: *mut Ipp32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize, maskSize: IppiSize,
                                   anchor: IppiPoint, noise: *mut Ipp32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_8u_AC4R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_8u_C4R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize, maskSize: IppiSize,
                                   anchor: IppiPoint, noise: *mut Ipp32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_16s_C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_16s_C3R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_16s_AC4R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize, maskSize: IppiSize,
                                     anchor: IppiPoint, noise: *mut Ipp32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_16s_C4R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_32f_AC4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     dstRoiSize: IppiSize, maskSize: IppiSize,
                                     anchor: IppiPoint, noise: *mut Ipp32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterWiener_32f_C4R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize, maskSize: IppiSize,
                                    anchor: IppiPoint, noise: *mut Ipp32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiConvGetBufferSize(src1Size: IppiSize, src2Size: IppiSize,
                                 dataType: IppDataType,
                                 numChannels: ipp_ctypes::c_int,
                                 algType: IppEnum,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConv_32f_C1R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            src1Size: IppiSize, pSrc2: *const Ipp32f,
                            src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConv_32f_C3R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            src1Size: IppiSize, pSrc2: *const Ipp32f,
                            src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConv_32f_C4R(pSrc1: *const Ipp32f, src1Step: ipp_ctypes::c_int,
                            src1Size: IppiSize, pSrc2: *const Ipp32f,
                            src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConv_16s_C1R(pSrc1: *const Ipp16s, src1Step: ipp_ctypes::c_int,
                            src1Size: IppiSize, pSrc2: *const Ipp16s,
                            src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            divisor: ipp_ctypes::c_int, algType: IppEnum,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiConv_16s_C3R(pSrc1: *const Ipp16s, src1Step: ipp_ctypes::c_int,
                            src1Size: IppiSize, pSrc2: *const Ipp16s,
                            src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            divisor: ipp_ctypes::c_int, algType: IppEnum,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiConv_16s_C4R(pSrc1: *const Ipp16s, src1Step: ipp_ctypes::c_int,
                            src1Size: IppiSize, pSrc2: *const Ipp16s,
                            src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            divisor: ipp_ctypes::c_int, algType: IppEnum,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiConv_8u_C1R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                           src1Size: IppiSize, pSrc2: *const Ipp8u,
                           src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           divisor: ipp_ctypes::c_int, algType: IppEnum,
                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiConv_8u_C3R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                           src1Size: IppiSize, pSrc2: *const Ipp8u,
                           src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           divisor: ipp_ctypes::c_int, algType: IppEnum,
                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiConv_8u_C4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                           src1Size: IppiSize, pSrc2: *const Ipp8u,
                           src2Step: ipp_ctypes::c_int, src2Size: IppiSize,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           divisor: ipp_ctypes::c_int, algType: IppEnum,
                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCrossCorrNormGetBufferSize(srcRoiSize: IppiSize,
                                          tplRoiSize: IppiSize,
                                          algType: IppEnum,
                                          pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCrossCorrNorm_32f_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     srcRoiSize: IppiSize,
                                     pTpl: *const Ipp32f,
                                     tplStep: ipp_ctypes::c_int,
                                     tplRoiSize: IppiSize, pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCrossCorrNorm_16u32f_C1R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pTpl: *const Ipp16u,
                                        tplStep: ipp_ctypes::c_int,
                                        tplRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCrossCorrNorm_8u32f_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pTpl: *const Ipp8u,
                                       tplStep: ipp_ctypes::c_int,
                                       tplRoiSize: IppiSize,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCrossCorrNorm_8u_C1RSfs(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pTpl: *const Ipp8u,
                                       tplStep: ipp_ctypes::c_int,
                                       tplRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       scaleFactor: ipp_ctypes::c_int,
                                       algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrDistanceNormGetBufferSize(srcRoiSize: IppiSize,
                                            tplRoiSize: IppiSize,
                                            algType: IppEnum,
                                            pBufferSize:
                                                *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrDistanceNorm_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pTpl: *const Ipp32f,
                                       tplStep: ipp_ctypes::c_int,
                                       tplRoiSize: IppiSize,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       algType: IppEnum, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSqrDistanceNorm_16u32f_C1R(pSrc: *const Ipp16u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcRoiSize: IppiSize,
                                          pTpl: *const Ipp16u,
                                          tplStep: ipp_ctypes::c_int,
                                          tplRoiSize: IppiSize,
                                          pDst: *mut Ipp32f,
                                          dstStep: ipp_ctypes::c_int,
                                          algType: IppEnum,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrDistanceNorm_8u32f_C1R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         pTpl: *const Ipp8u,
                                         tplStep: ipp_ctypes::c_int,
                                         tplRoiSize: IppiSize,
                                         pDst: *mut Ipp32f,
                                         dstStep: ipp_ctypes::c_int,
                                         algType: IppEnum,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSqrDistanceNorm_8u_C1RSfs(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         pTpl: *const Ipp8u,
                                         tplStep: ipp_ctypes::c_int,
                                         tplRoiSize: IppiSize,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         scaleFactor: ipp_ctypes::c_int,
                                         algType: IppEnum,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_8u_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                threshold: Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16s_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: Ipp16s,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_32f_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: Ipp32f,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_8u_C3R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                threshold: *const Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16s_C3R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: *const Ipp16s,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_32f_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: *const Ipp32f,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_8u_AC4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: *const Ipp8u,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16s_AC4R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp16s,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_32f_AC4R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp32f,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_8u_C1IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: Ipp8u,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16s_C1IR(pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: Ipp16s,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_32f_C1IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: Ipp32f,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_8u_C3IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: *const Ipp8u,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16s_C3IR(pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp16s,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_32f_C3IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp32f,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp8u,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   threshold: *const Ipp16s,
                                   ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   threshold: *const Ipp32f,
                                   ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16u_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: Ipp16u,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16u_C3R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, threshold: *const Ipp16u,
                                 ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16u_AC4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp16u,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16u_C1IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: Ipp16u,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16u_C3IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: *const Ipp16u,
                                  ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   threshold: *const Ipp16u,
                                   ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16s_C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16s_C3R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_8u_AC4R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16s_AC4R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_32f_AC4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_8u_C1IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16s_C1IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_32f_C1IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_8u_C3IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16s_C3IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_32f_C3IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16u_C3R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16u_AC4R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16u_C1IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16u_C3IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GT_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16s_C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16s_C3R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_8u_AC4R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16s_AC4R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_32f_AC4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_8u_C1IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16s_C1IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_32f_C1IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_8u_C3IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16s_C3IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_32f_C3IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16u_C3R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16u_AC4R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16u_C1IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16u_C3IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LT_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_8u_C1R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, threshold: Ipp8u,
                                    value: Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16s_C1R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp16s,
                                     value: Ipp16s, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_32f_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp32f,
                                     value: Ipp32f, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_8u_C3R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    threshold: *const Ipp8u,
                                    value: *const Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16s_C3R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16s,
                                     value: *const Ipp16s, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_32f_C3R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp32f,
                                     value: *const Ipp32f, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_8u_AC4R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp8u,
                                     value: *const Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16s_AC4R(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16s,
                                      value: *const Ipp16s,
                                      ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_32f_AC4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp32f,
                                      value: *const Ipp32f,
                                      ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_8u_C1IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp8u,
                                     value: Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16s_C1IR(pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, threshold: Ipp16s,
                                      value: Ipp16s, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_32f_C1IR(pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, threshold: Ipp32f,
                                      value: Ipp32f, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_8u_C3IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp8u,
                                     value: *const Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16s_C3IR(pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16s,
                                      value: *const Ipp16s,
                                      ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_32f_C3IR(pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp32f,
                                      value: *const Ipp32f,
                                      ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp8u,
                                      value: *const Ipp8u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16s,
                                       value: *const Ipp16s,
                                       ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp32f,
                                       value: *const Ipp32f,
                                       ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16u_C1R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, threshold: Ipp16u,
                                     value: Ipp16u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16u_C3R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     threshold: *const Ipp16u,
                                     value: *const Ipp16u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16u_AC4R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16u,
                                      value: *const Ipp16u,
                                      ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16u_C1IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, threshold: Ipp16u,
                                      value: Ipp16u, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16u_C3IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp16u,
                                      value: *const Ipp16u,
                                      ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_Val_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16u,
                                       value: *const Ipp16u,
                                       ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, threshold: Ipp8u,
                                      value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp16s,
                                       value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp32f,
                                       value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp8u,
                                      value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16s,
                                       value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp32f,
                                       value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_AC4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp8u,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_AC4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16s,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_AC4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp32f,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_C1IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp8u,
                                       value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_C1IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, threshold: Ipp16s,
                                        value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_C1IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, threshold: Ipp32f,
                                        value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_C3IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp8u,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_C3IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16s,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_C3IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp32f,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp8u,
                                        value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         threshold: *const Ipp16s,
                                         value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                         srcDstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         threshold: *const Ipp32f,
                                         value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp8u,
                                      value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16s,
                                       value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp32f,
                                       value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_8u_C4IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp8u,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16s_C4IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16s,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_32f_C4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp32f,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp16u,
                                       value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16u,
                                       value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_AC4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16u,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_C1IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, threshold: Ipp16u,
                                        value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_C3IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16u,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                         srcDstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         threshold: *const Ipp16u,
                                         value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16u,
                                       value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_GTVal_16u_C4IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16u,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, threshold: Ipp8u,
                                      value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp16s,
                                       value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp32f,
                                       value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp8u,
                                      value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16s,
                                       value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp32f,
                                       value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_AC4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp8u,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_AC4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16s,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_AC4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp32f,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_C1IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp8u,
                                       value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_C1IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, threshold: Ipp16s,
                                        value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_C1IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, threshold: Ipp32f,
                                        value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_C3IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp8u,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_C3IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16s,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_C3IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp32f,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp8u,
                                        value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         threshold: *const Ipp16s,
                                         value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                         srcDstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         threshold: *const Ipp32f,
                                         value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      threshold: *const Ipp8u,
                                      value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16s,
                                       value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp32f,
                                       value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_8u_C4IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp8u,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16s_C4IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16s,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_32f_C4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp32f,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, threshold: Ipp16u,
                                       value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16u,
                                       value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_AC4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16u,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_C1IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, threshold: Ipp16u,
                                        value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_C3IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16u,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                         srcDstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         threshold: *const Ipp16u,
                                         value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize,
                                       threshold: *const Ipp16u,
                                       value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTVal_16u_C4IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize,
                                        threshold: *const Ipp16u,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_8u_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           thresholdLT: Ipp8u, valueLT: Ipp8u,
                                           thresholdGT: Ipp8u, valueGT: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16s_C1R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: Ipp16s,
                                            valueLT: Ipp16s,
                                            thresholdGT: Ipp16s,
                                            valueGT: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_32f_C1R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: Ipp32f,
                                            valueLT: Ipp32f,
                                            thresholdGT: Ipp32f,
                                            valueGT: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_8u_C3R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           thresholdLT: *const Ipp8u,
                                           valueLT: *const Ipp8u,
                                           thresholdGT: *const Ipp8u,
                                           valueGT: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16s_C3R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: *const Ipp16s,
                                            valueLT: *const Ipp16s,
                                            thresholdGT: *const Ipp16s,
                                            valueGT: *const Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_32f_C3R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: *const Ipp32f,
                                            valueLT: *const Ipp32f,
                                            thresholdGT: *const Ipp32f,
                                            valueGT: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_8u_AC4R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: *const Ipp8u,
                                            valueLT: *const Ipp8u,
                                            thresholdGT: *const Ipp8u,
                                            valueGT: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16s_AC4R(pSrc: *const Ipp16s,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16s,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp16s,
                                             valueLT: *const Ipp16s,
                                             thresholdGT: *const Ipp16s,
                                             valueGT: *const Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_32f_AC4R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp32f,
                                             valueLT: *const Ipp32f,
                                             thresholdGT: *const Ipp32f,
                                             valueGT: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_8u_C1IR(pSrcDst: *mut Ipp8u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: Ipp8u,
                                            valueLT: Ipp8u,
                                            thresholdGT: Ipp8u,
                                            valueGT: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16s_C1IR(pSrcDst: *mut Ipp16s,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: Ipp16s,
                                             valueLT: Ipp16s,
                                             thresholdGT: Ipp16s,
                                             valueGT: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_32f_C1IR(pSrcDst: *mut Ipp32f,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: Ipp32f,
                                             valueLT: Ipp32f,
                                             thresholdGT: Ipp32f,
                                             valueGT: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_8u_C3IR(pSrcDst: *mut Ipp8u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: *const Ipp8u,
                                            valueLT: *const Ipp8u,
                                            thresholdGT: *const Ipp8u,
                                            valueGT: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16s_C3IR(pSrcDst: *mut Ipp16s,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp16s,
                                             valueLT: *const Ipp16s,
                                             thresholdGT: *const Ipp16s,
                                             valueGT: *const Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_32f_C3IR(pSrcDst: *mut Ipp32f,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp32f,
                                             valueLT: *const Ipp32f,
                                             thresholdGT: *const Ipp32f,
                                             valueGT: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp8u,
                                             valueLT: *const Ipp8u,
                                             thresholdGT: *const Ipp8u,
                                             valueGT: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              thresholdLT: *const Ipp16s,
                                              valueLT: *const Ipp16s,
                                              thresholdGT: *const Ipp16s,
                                              valueGT: *const Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              thresholdLT: *const Ipp32f,
                                              valueLT: *const Ipp32f,
                                              thresholdGT: *const Ipp32f,
                                              valueGT: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16u_C1R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: Ipp16u,
                                            valueLT: Ipp16u,
                                            thresholdGT: Ipp16u,
                                            valueGT: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16u_C3R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            thresholdLT: *const Ipp16u,
                                            valueLT: *const Ipp16u,
                                            thresholdGT: *const Ipp16u,
                                            valueGT: *const Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16u_AC4R(pSrc: *const Ipp16u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp16u,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp16u,
                                             valueLT: *const Ipp16u,
                                             thresholdGT: *const Ipp16u,
                                             valueGT: *const Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16u_C1IR(pSrcDst: *mut Ipp16u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: Ipp16u,
                                             valueLT: Ipp16u,
                                             thresholdGT: Ipp16u,
                                             valueGT: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16u_C3IR(pSrcDst: *mut Ipp16u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize,
                                             thresholdLT: *const Ipp16u,
                                             valueLT: *const Ipp16u,
                                             thresholdGT: *const Ipp16u,
                                             valueGT: *const Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThreshold_LTValGTVal_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              thresholdLT: *const Ipp16u,
                                              valueLT: *const Ipp16u,
                                              thresholdGT: *const Ipp16u,
                                              valueGT: *const Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiComputeThreshold_Otsu_8u_C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            pThreshold: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveBoxGetBufferSize(roiSize: IppiSize,
                                                 maskSize: IppiSize,
                                                 dataType: IppDataType,
                                                 numChannels:
                                                     ipp_ctypes::c_int,
                                                 pBufferSize:
                                                     *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveGaussGetBufferSize(roiSize: IppiSize,
                                                   maskSize: IppiSize,
                                                   dataType: IppDataType,
                                                   numChannels:
                                                       ipp_ctypes::c_int,
                                                   pSpecSize:
                                                       *mut ipp_ctypes::c_int,
                                                   pBufferSize:
                                                       *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveGaussInit(roiSize: IppiSize,
                                          maskSize: IppiSize,
                                          dataType: IppDataType,
                                          numChannels: ipp_ctypes::c_int,
                                          sigma: Ipp32f,
                                          pSpec:
                                              *mut IppiThresholdAdaptiveSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveBox_8u_C1R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           roiSize: IppiSize,
                                           maskSize: IppiSize, delta: Ipp32f,
                                           valGT: Ipp8u, valLE: Ipp8u,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp8u,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveGauss_8u_C1R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp8u,
                                             dstStep: ipp_ctypes::c_int,
                                             roiSize: IppiSize, delta: Ipp32f,
                                             valGT: Ipp8u, valLE: Ipp8u,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp8u,
                                             pSpec:
                                                 *mut IppiThresholdAdaptiveSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveBox_8u_C1IR(pSrcDst: *mut Ipp8u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            roiSize: IppiSize,
                                            maskSize: IppiSize, delta: Ipp32f,
                                            valGT: Ipp8u, valLE: Ipp8u,
                                            borderType: IppiBorderType,
                                            borderValue: Ipp8u,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiThresholdAdaptiveGauss_8u_C1IR(pSrcDst: *mut Ipp8u,
                                              srcDstStep: ipp_ctypes::c_int,
                                              roiSize: IppiSize,
                                              delta: Ipp32f, valGT: Ipp8u,
                                              valLE: Ipp8u,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp8u,
                                              pSpec:
                                                  *mut IppiThresholdAdaptiveSpec,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyManaged_8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, flags: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C1C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C4C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C1C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3CR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C4CR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_AC4C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C1MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMask: *const Ipp8u,
                            maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMask: *const Ipp8u,
                            maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C4MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, pMask: *const Ipp8u,
                            maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_AC4MR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C3C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C1C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C4C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C1C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C3CR(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C4CR(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_AC4C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C3AC4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_AC4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C1MR(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C3MR(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C4MR(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_AC4MR(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C1C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C4C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C1C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3CR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C4CR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_AC4C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3AC4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C1MR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3MR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C4MR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_AC4MR(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C3P3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *const *const Ipp8u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_P3C3R(pSrc: *const *const Ipp8u,
                             srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_C4P4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             pDst: *const *const Ipp8u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_8u_P4C4R(pSrc: *const *const Ipp8u,
                             srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C3P3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_P3C3R(pSrc: *const *const Ipp16s,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_C4P4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16s_P4C4R(pSrc: *const *const Ipp16s,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C3P3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp32f,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_P3C3R(pSrc: *const *const Ipp32f,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_C4P4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp32f,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32f_P4C4R(pSrc: *const *const Ipp32f,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C3C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C1C3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C4C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C1C4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C3CR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C4CR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_AC4C3R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C3AC4R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_AC4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C1MR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C3MR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C4MR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_AC4MR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C3P3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp32s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_P3C3R(pSrc: *const *const Ipp32s,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_C4P4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp32s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_32s_P4C4R(pSrc: *const *const Ipp32s,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C3C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C1C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C4C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C1C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C3CR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C4CR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_AC4C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C3AC4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C1MR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C3MR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C4MR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMask: *const Ipp8u,
                             maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_AC4MR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMask: *const Ipp8u,
                              maskStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C3P3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_P3C3R(pSrc: *const *const Ipp16u,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_C4P4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopy_16u_P4C4R(pSrc: *const *const Ipp16u,
                              srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C1R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcRoiSize: IppiSize,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          topBorderHeight: ipp_ctypes::c_int,
                                          leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C3R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcRoiSize: IppiSize,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          topBorderHeight: ipp_ctypes::c_int,
                                          leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_AC4R(pSrc: *const Ipp8u,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp8u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C4R(pSrc: *const Ipp8u,
                                          srcStep: ipp_ctypes::c_int,
                                          srcRoiSize: IppiSize,
                                          pDst: *mut Ipp8u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          topBorderHeight: ipp_ctypes::c_int,
                                          leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C1R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C3R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_AC4R(pSrc: *const Ipp16s,
                                            srcStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            pDst: *mut Ipp16s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftBorderWidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C4R(pSrc: *const Ipp16s,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C1R(pSrc: *const Ipp32s,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C3R(pSrc: *const Ipp32s,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_AC4R(pSrc: *const Ipp32s,
                                            srcStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            pDst: *mut Ipp32s,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftBorderWidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C4R(pSrc: *const Ipp32s,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32s,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C1IR(pSrc: *const Ipp8u,
                                           srcDstStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C3IR(pSrc: *const Ipp8u,
                                           srcDstStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_AC4IR(pSrc: *const Ipp8u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_8u_C4IR(pSrc: *const Ipp8u,
                                           srcDstStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C1IR(pSrc: *const Ipp16s,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C3IR(pSrc: *const Ipp16s,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_AC4IR(pSrc: *const Ipp16s,
                                             srcDstStep: ipp_ctypes::c_int,
                                             srcRoiSize: IppiSize,
                                             dstRoiSize: IppiSize,
                                             topBorderHeight:
                                                 ipp_ctypes::c_int,
                                             leftborderwidth:
                                                 ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16s_C4IR(pSrc: *const Ipp16s,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C1IR(pSrc: *const Ipp32s,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C3IR(pSrc: *const Ipp32s,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_AC4IR(pSrc: *const Ipp32s,
                                             srcDstStep: ipp_ctypes::c_int,
                                             srcRoiSize: IppiSize,
                                             dstRoiSize: IppiSize,
                                             topBorderHeight:
                                                 ipp_ctypes::c_int,
                                             leftborderwidth:
                                                 ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32s_C4IR(pSrc: *const Ipp32s,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C1IR(pSrc: *const Ipp16u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C3IR(pSrc: *const Ipp16u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_AC4IR(pSrc: *const Ipp16u,
                                             srcDstStep: ipp_ctypes::c_int,
                                             srcRoiSize: IppiSize,
                                             dstRoiSize: IppiSize,
                                             topBorderHeight:
                                                 ipp_ctypes::c_int,
                                             leftborderwidth:
                                                 ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C4IR(pSrc: *const Ipp16u,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C1R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C3R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_AC4R(pSrc: *const Ipp16u,
                                            srcStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            pDst: *mut Ipp16u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftBorderWidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_16u_C4R(pSrc: *const Ipp16u,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp16u,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C3R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_AC4R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            pDst: *mut Ipp32f,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftBorderWidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C4R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           srcRoiSize: IppiSize,
                                           pDst: *mut Ipp32f,
                                           dstStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           topBorderHeight: ipp_ctypes::c_int,
                                           leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C1IR(pSrc: *const Ipp32f,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C3IR(pSrc: *const Ipp32f,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_AC4IR(pSrc: *const Ipp32f,
                                             srcDstStep: ipp_ctypes::c_int,
                                             srcRoiSize: IppiSize,
                                             dstRoiSize: IppiSize,
                                             topBorderHeight:
                                                 ipp_ctypes::c_int,
                                             leftborderwidth:
                                                 ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyReplicateBorder_32f_C4IR(pSrc: *const Ipp32f,
                                            srcDstStep: ipp_ctypes::c_int,
                                            srcRoiSize: IppiSize,
                                            dstRoiSize: IppiSize,
                                            topBorderHeight:
                                                ipp_ctypes::c_int,
                                            leftborderwidth:
                                                ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      topBorderHeight: ipp_ctypes::c_int,
                                      leftBorderWidth: ipp_ctypes::c_int,
                                      value: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C3R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      topBorderHeight: ipp_ctypes::c_int,
                                      leftBorderWidth: ipp_ctypes::c_int,
                                      value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_AC4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_8u_C4R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      topBorderHeight: ipp_ctypes::c_int,
                                      leftBorderWidth: ipp_ctypes::c_int,
                                      value: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C1R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C3R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_AC4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int,
                                        value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16s_C4R(pSrc: *const Ipp16s,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp16s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C1R(pSrc: *const Ipp32s,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp32s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C3R(pSrc: *const Ipp32s,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp32s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_AC4R(pSrc: *const Ipp32s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int,
                                        value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32s_C4R(pSrc: *const Ipp32s,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp32s,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C1R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C3R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_AC4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int,
                                        value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_16u_C4R(pSrc: *const Ipp16u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp16u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C1R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C3R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_AC4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int,
                                        value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyConstBorder_32f_C4R(pSrc: *const Ipp32f,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       pDst: *mut Ipp32f,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int,
                                       value: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C1R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C3R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C4R(pSrc: *const Ipp8u,
                                       srcStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize, pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C1R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C3R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C4R(pSrc: *const Ipp16s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C1R(pSrc: *const Ipp32s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C3R(pSrc: *const Ipp32s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C4R(pSrc: *const Ipp32s,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32s,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C1IR(pSrc: *const Ipp8u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C3IR(pSrc: *const Ipp8u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_8u_C4IR(pSrc: *const Ipp8u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C1IR(pSrc: *const Ipp16s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C3IR(pSrc: *const Ipp16s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16s_C4IR(pSrc: *const Ipp16s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C1IR(pSrc: *const Ipp32s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C3IR(pSrc: *const Ipp32s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32s_C4IR(pSrc: *const Ipp32s,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C1IR(pSrc: *const Ipp16u,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C3IR(pSrc: *const Ipp16u,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C4IR(pSrc: *const Ipp16u,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C1R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C3R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_16u_C4R(pSrc: *const Ipp16u,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp16u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C3R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        srcRoiSize: IppiSize,
                                        pDst: *mut Ipp32f,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        topBorderHeight: ipp_ctypes::c_int,
                                        leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C1IR(pSrc: *const Ipp32f,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C3IR(pSrc: *const Ipp32f,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyMirrorBorder_32f_C4IR(pSrc: *const Ipp32f,
                                         srcDstStep: ipp_ctypes::c_int,
                                         srcRoiSize: IppiSize,
                                         dstRoiSize: IppiSize,
                                         topBorderHeight: ipp_ctypes::c_int,
                                         leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32s_C1R(pSrc: *const Ipp32s,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp32s,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      topBorderHeight: ipp_ctypes::c_int,
                                      leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32s_C1IR(pSrc: *const Ipp32s,
                                       srcDstStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      srcRoiSize: IppiSize, pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      topBorderHeight: ipp_ctypes::c_int,
                                      leftBorderWidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCopyWrapBorder_32f_C1IR(pSrc: *const Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       srcRoiSize: IppiSize,
                                       dstRoiSize: IppiSize,
                                       topBorderHeight: ipp_ctypes::c_int,
                                       leftborderwidth: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDup_8u_C1C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDup_8u_C1C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C1R(value: Ipp8u, pDst: *mut Ipp8u,
                          dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C3CR(value: Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C4CR(value: Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C3R(value: *const Ipp8u, pDst: *mut Ipp8u,
                          dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C4R(value: *const Ipp8u, pDst: *mut Ipp8u,
                          dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_AC4R(value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C1MR(value: Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                           pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C3MR(value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                           pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_C4MR(value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                           pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_8u_AC4MR(value: *const Ipp8u, pDst: *mut Ipp8u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C1R(value: Ipp16s, pDst: *mut Ipp16s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C3CR(value: Ipp16s, pDst: *mut Ipp16s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C4CR(value: Ipp16s, pDst: *mut Ipp16s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C3R(value: *const Ipp16s, pDst: *mut Ipp16s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C4R(value: *const Ipp16s, pDst: *mut Ipp16s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_AC4R(value: *const Ipp16s, pDst: *mut Ipp16s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C1MR(value: Ipp16s, pDst: *mut Ipp16s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C3MR(value: *const Ipp16s, pDst: *mut Ipp16s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_C4MR(value: *const Ipp16s, pDst: *mut Ipp16s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16s_AC4MR(value: *const Ipp16s, pDst: *mut Ipp16s,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C1R(value: Ipp32f, pDst: *mut Ipp32f,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C3CR(value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C4CR(value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C3R(value: *const Ipp32f, pDst: *mut Ipp32f,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C4R(value: *const Ipp32f, pDst: *mut Ipp32f,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_AC4R(value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C1MR(value: Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C3MR(value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_C4MR(value: *const Ipp32f, pDst: *mut Ipp32f,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32f_AC4MR(value: *const Ipp32f, pDst: *mut Ipp32f,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C1R(value: Ipp32s, pDst: *mut Ipp32s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C3CR(value: Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C4CR(value: Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C3R(value: *const Ipp32s, pDst: *mut Ipp32s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C4R(value: *const Ipp32s, pDst: *mut Ipp32s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_AC4R(value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C1MR(value: Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C3MR(value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_C4MR(value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_32s_AC4MR(value: *const Ipp32s, pDst: *mut Ipp32s,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C1R(value: Ipp16u, pDst: *mut Ipp16u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C3CR(value: Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C4CR(value: Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C3R(value: *const Ipp16u, pDst: *mut Ipp16u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C4R(value: *const Ipp16u, pDst: *mut Ipp16u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_AC4R(value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C1MR(value: Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C3MR(value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_C4MR(value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                            pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSet_16u_AC4MR(value: *const Ipp16u, pDst: *mut Ipp16u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             pMask: *const Ipp8u, maskStep: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_8u_C1IR(pSrcDst: *mut Ipp8u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, low: Ipp8u,
                                      high: Ipp8u,
                                      pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_8u_C3IR(pSrcDst: *mut Ipp8u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, low: Ipp8u,
                                      high: Ipp8u,
                                      pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_8u_C4IR(pSrcDst: *mut Ipp8u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, low: Ipp8u,
                                      high: Ipp8u,
                                      pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp8u,
                                       high: Ipp8u,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16s_C1IR(pSrcDst: *mut Ipp16s,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp16s,
                                       high: Ipp16s,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16s_C3IR(pSrcDst: *mut Ipp16s,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp16s,
                                       high: Ipp16s,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16s_C4IR(pSrcDst: *mut Ipp16s,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp16s,
                                       high: Ipp16s,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, low: Ipp16s,
                                        high: Ipp16s,
                                        pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_32f_C1IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp32f,
                                       high: Ipp32f,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_32f_C3IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp32f,
                                       high: Ipp32f,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_32f_C4IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp32f,
                                       high: Ipp32f,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, low: Ipp32f,
                                        high: Ipp32f,
                                        pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16u_C1IR(pSrcDst: *mut Ipp16u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp16u,
                                       high: Ipp16u,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16u_C3IR(pSrcDst: *mut Ipp16u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp16u,
                                       high: Ipp16u,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16u_C4IR(pSrcDst: *mut Ipp16u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, low: Ipp16u,
                                       high: Ipp16u,
                                       pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandUniform_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                        srcDstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, low: Ipp16u,
                                        high: Ipp16u,
                                        pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_8u_C1IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, mean: Ipp8u,
                                    stdev: Ipp8u,
                                    pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_8u_C3IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, mean: Ipp8u,
                                    stdev: Ipp8u,
                                    pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_8u_C4IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, mean: Ipp8u,
                                    stdev: Ipp8u,
                                    pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_8u_AC4IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp8u,
                                     stdev: Ipp8u,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16s_C1IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp16s,
                                     stdev: Ipp16s,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16s_C3IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp16s,
                                     stdev: Ipp16s,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16s_C4IR(pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp16s,
                                     stdev: Ipp16s,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16s_AC4IR(pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, mean: Ipp16s,
                                      stdev: Ipp16s,
                                      pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_32f_C1IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp32f,
                                     stdev: Ipp32f,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_32f_C3IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp32f,
                                     stdev: Ipp32f,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_32f_C4IR(pSrcDst: *mut Ipp32f,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp32f,
                                     stdev: Ipp32f,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_32f_AC4IR(pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, mean: Ipp32f,
                                      stdev: Ipp32f,
                                      pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16u_C1IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp16u,
                                     stdev: Ipp16u,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16u_C3IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp16u,
                                     stdev: Ipp16u,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16u_C4IR(pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, mean: Ipp16u,
                                     stdev: Ipp16u,
                                     pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAddRandGauss_16u_AC4IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, mean: Ipp16u,
                                      stdev: Ipp16u,
                                      pSeed: *mut ipp_ctypes::c_uint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_8u_C1R(pDst: *mut Ipp8u,
                                  DstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_8u_C3R(pDst: *mut Ipp8u,
                                  DstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_8u_C4R(pDst: *mut Ipp8u,
                                  DstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_8u_AC4R(pDst: *mut Ipp8u,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16u_C1R(pDst: *mut Ipp16u,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16u_C3R(pDst: *mut Ipp16u,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16u_C4R(pDst: *mut Ipp16u,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16u_AC4R(pDst: *mut Ipp16u,
                                    DstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16s_C1R(pDst: *mut Ipp16s,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16s_C3R(pDst: *mut Ipp16s,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16s_C4R(pDst: *mut Ipp16s,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_16s_AC4R(pDst: *mut Ipp16s,
                                    DstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_32f_C1R(pDst: *mut Ipp32f,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_32f_C3R(pDst: *mut Ipp32f,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_32f_C4R(pDst: *mut Ipp32f,
                                   DstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageJaehne_32f_AC4R(pDst: *mut Ipp32f,
                                    DstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_8u_C1R(pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, offset: f32, slope: f32,
                                axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_8u_C3R(pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, offset: f32, slope: f32,
                                axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_8u_C4R(pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, offset: f32, slope: f32,
                                axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_8u_AC4R(pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16u_C1R(pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16u_C3R(pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16u_C4R(pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16u_AC4R(pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, offset: f32, slope: f32,
                                  axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16s_C1R(pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16s_C3R(pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16s_C4R(pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_16s_AC4R(pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, offset: f32, slope: f32,
                                  axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_32f_C1R(pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_32f_C3R(pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_32f_C4R(pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, offset: f32, slope: f32,
                                 axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiImageRamp_32f_AC4R(pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, offset: f32, slope: f32,
                                  axis: IppiAxis) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u8s_C1RSfs(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8s,
                                   dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                   rndMode: IppRoundMode,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16u_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16u_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16u_C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16s_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16s_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16s_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u16s_C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32s_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32s_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32s_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32s_C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32f_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32f_C3R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32f_AC4R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8u32f_C4R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s8u_C1Rs(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s16s_C1R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s16u_C1Rs(pSrc: *const Ipp8s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32u_C1Rs(pSrc: *const Ipp8s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32u,
                                  dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32s_C1R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32s_C3R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32s_AC4R(pSrc: *const Ipp8s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32s_C4R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32f_C1R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32f_C3R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32f_AC4R(pSrc: *const Ipp8s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s32f_C4R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u8u_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u8u_C3R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u8u_AC4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u8u_C4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u8s_C1RSfs(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8s,
                                    dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                    rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u16s_C1RSfs(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32u,
                                  dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32s_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32s_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32s_AC4R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32s_C4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32f_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32f_C3R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32f_AC4R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16u32f_C4R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s8s_C1RSfs(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8s,
                                    dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                    rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s8u_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s8u_C3R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s8u_AC4R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s8u_C4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s16u_C1Rs(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32u_C1Rs(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32u,
                                   dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32s_C1R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32s_C3R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32s_AC4R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32s_C4R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32f_C1R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32f_C3R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32f_AC4R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_16s32f_C4R(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32u8u_C1RSfs(pSrc: *const Ipp32u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                    rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32u8s_C1RSfs(pSrc: *const Ipp32u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8s,
                                    dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                    rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32u16u_C1RSfs(pSrc: *const Ipp32u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32u16s_C1RSfs(pSrc: *const Ipp32u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32u32s_C1RSfs(pSrc: *const Ipp32u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32u32f_C1R(pSrc: *const Ipp32u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8u_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8u_C3R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8u_AC4R(pSrc: *const Ipp32s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8u_C4R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8s_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8s_C3R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8s_AC4R(pSrc: *const Ipp32s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s8s_C4R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s16u_C1RSfs(pSrc: *const Ipp32s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s16s_C1RSfs(pSrc: *const Ipp32s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s32u_C1Rs(pSrc: *const Ipp32s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32u,
                                   dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32s32f_C1R(pSrc: *const Ipp32s,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int, roi: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8u_C1RSfs(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                    round: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8u_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8u_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8u_AC4R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8u_C4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8s_C1RSfs(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8s,
                                    dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                    round: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8s_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8s_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8s_AC4R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f8s_C4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16u_C1RSfs(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, round: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16u_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16u_C3R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16u_AC4R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16u_C4R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16s_C1RSfs(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, round: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16s_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16s_C3R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16s_AC4R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f16s_C4R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16s,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, roundMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f32u_C1RSfs(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32u,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f32u_C1IRSfs(pSrcDst: *mut Ipp32u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roi: IppiSize, rndMode: IppRoundMode,
                                      scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_32f32s_C1RSfs(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32s,
                                     dstStep: ipp_ctypes::c_int,
                                     roi: IppiSize, round: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_64f8u_C1RSfs(pSrc: *const Ipp64f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    roundMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_64f8s_C1RSfs(pSrc: *const Ipp64f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    roundMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_64f16u_C1RSfs(pSrc: *const Ipp64f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     roundMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_64f16s_C1RSfs(pSrc: *const Ipp64f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     roundMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiConvert_8s64f_C1R(pSrc: *const Ipp8s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp8u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u8s_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp8s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u16u_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u16s_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u32s_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp32s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u32f_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u64f_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp64f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s8u_C1R(pSrc: *const Ipp8s, srcStep: ipp_ctypes::c_int,
                               mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s_C1R(pSrc: *const Ipp8s, srcStep: ipp_ctypes::c_int,
                             mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp8s,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                             hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s16u_C1R(pSrc: *const Ipp8s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s16s_C1R(pSrc: *const Ipp8s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s32s_C1R(pSrc: *const Ipp8s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp32s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s32f_C1R(pSrc: *const Ipp8s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s64f_C1R(pSrc: *const Ipp8s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp64f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u8u_C1R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u8s_C1R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u16s_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u32s_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u32f_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u64f_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s8u_C1R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s8s_C1R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s16u_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp16s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s32s_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s32f_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s64f_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s8u_C1R(pSrc: *const Ipp32s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s8s_C1R(pSrc: *const Ipp32s,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s16u_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s16s_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s_C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                              mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp32s,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s32f_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s64f_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f8u_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f8s_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f16u_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f16s_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f32s_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp32f,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f64f_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f8u_C1R(pSrc: *const Ipp64f,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f8s_C1R(pSrc: *const Ipp64f,
                                srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                aVal: Ipp64f, pDst: *mut Ipp8s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f16u_C1R(pSrc: *const Ipp64f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f16s_C1R(pSrc: *const Ipp64f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f32s_C1R(pSrc: *const Ipp64f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f32f_C1R(pSrc: *const Ipp64f,
                                 srcStep: ipp_ctypes::c_int, mVal: Ipp64f,
                                 aVal: Ipp64f, pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f_C1R(pSrc: *const Ipp64f, srcStep: ipp_ctypes::c_int,
                              mVal: Ipp64f, aVal: Ipp64f, pDst: *mut Ipp64f,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8u_C1IR(pSrcDst: *const Ipp8u,
                              srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                              aVal: Ipp64f, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_8s_C1IR(pSrcDst: *const Ipp8s,
                              srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                              aVal: Ipp64f, roiSize: IppiSize,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16u_C1IR(pSrcDst: *const Ipp16u,
                               srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                               aVal: Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_16s_C1IR(pSrcDst: *const Ipp16s,
                               srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                               aVal: Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32s_C1IR(pSrcDst: *const Ipp32s,
                               srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                               aVal: Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_32f_C1IR(pSrcDst: *const Ipp32f,
                               srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                               aVal: Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScaleC_64f_C1IR(pSrcDst: *const Ipp64f,
                               srcDstStep: ipp_ctypes::c_int, mVal: Ipp64f,
                               aVal: Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiBinToGray_1u8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  srcBitOffset: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, loVal: Ipp8u,
                                  hiVal: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiBinToGray_1u16u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   srcBitOffset: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, loVal: Ipp16u,
                                   hiVal: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiBinToGray_1u16s_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   srcBitOffset: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16s,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, loVal: Ipp16s,
                                   hiVal: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiBinToGray_1u32f_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   srcBitOffset: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, loVal: Ipp32f,
                                   hiVal: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToBin_8u1u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  dstBitOffset: ipp_ctypes::c_int,
                                  roiSize: IppiSize, threshold: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToBin_16u1u_C1R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstBitOffset: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToBin_16s1u_C1R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstBitOffset: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGrayToBin_32f1u_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstBitOffset: ipp_ctypes::c_int,
                                   roiSize: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiPolarToCart_32fc_C1R(pSrcMagn: *const Ipp32f,
                                    pSrcPhase: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pDst: *mut Ipp32fc,
                                    dstStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiPolarToCart_32fc_C3R(pSrcMagn: *const Ipp32f,
                                    pSrcPhase: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pDst: *mut Ipp32fc,
                                    dstStep: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_AC4R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_C4R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize,
                                   dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16u_C3R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16u_AC4R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16u_C4R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16s_C3R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16s_AC4R(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16s_C4R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32s_C3R(pSrc: *const Ipp32s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32s_AC4R(pSrc: *const Ipp32s,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32s_C4R(pSrc: *const Ipp32s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32f_AC4R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32f_C4R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_C3IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_C4IR(pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize,
                                    dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_C3C4R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     dstOrder: *const ipp_ctypes::c_int,
                                     val: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_8u_C4C3R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize,
                                     dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16s_C3C4R(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int,
                                      val: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16s_C4C3R(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16u_C3C4R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int,
                                      val: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_16u_C4C3R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32s_C3C4R(pSrc: *const Ipp32s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int,
                                      val: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32s_C4C3R(pSrc: *const Ipp32s,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32s,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32f_C3C4R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int,
                                      val: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiSwapChannels_32f_C4C3R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      dstOrder: *const ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16s_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16s_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16s_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u16s_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32s_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32s_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32s_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32s_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32f_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, vMin: Ipp32f, vMax: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32f_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, vMin: Ipp32f, vMax: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32f_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, vMin: Ipp32f, vMax: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiScale_8u32f_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16u8u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16u8u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16u8u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16u8u_AC4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16s8u_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16s8u_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16s8u_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_16s8u_AC4R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32s8u_C1R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32s8u_C3R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32s8u_C4R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32s8u_AC4R(pSrc: *const Ipp32s,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32f8u_C1R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32f8u_C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32f8u_C4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiScale_32f8u_AC4R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                vMin: Ipp32f, vMax: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, pMin: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, min: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, min: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMin: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16s_AC4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, min: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMin: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, min: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMin: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, min: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMin_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, min: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMin: *mut Ipp8u,
                              pIndexX: *mut ipp_ctypes::c_int,
                              pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp8u,
                              indexX: *mut ipp_ctypes::c_int,
                              indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, min: *mut Ipp8u,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp8u,
                              indexX: *mut ipp_ctypes::c_int,
                              indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16s_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pMin: *mut Ipp16s,
                               pIndexX: *mut ipp_ctypes::c_int,
                               pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16s_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp16s,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16s_AC4R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                min: *mut Ipp16s,
                                indexX: *mut ipp_ctypes::c_int,
                                indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16s_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp16s,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pMin: *mut Ipp16u,
                               pIndexX: *mut ipp_ctypes::c_int,
                               pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp16u,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16u_AC4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                min: *mut Ipp16u,
                                indexX: *mut ipp_ctypes::c_int,
                                indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp16u,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_32f_C1R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pMin: *mut Ipp32f,
                               pIndexX: *mut ipp_ctypes::c_int,
                               pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_32f_C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp32f,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_32f_AC4R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                min: *mut Ipp32f,
                                indexX: *mut ipp_ctypes::c_int,
                                indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinIndx_32f_C4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp32f,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, pMax: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, max: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          roiSize: IppiSize, max: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMax: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16s_AC4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, max: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMax: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, max: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pMax: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_32f_AC4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                            roiSize: IppiSize, max: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMax_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, max: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMax: *mut Ipp8u,
                              pIndexX: *mut ipp_ctypes::c_int,
                              pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, max: *mut Ipp8u,
                              indexX: *mut ipp_ctypes::c_int,
                              indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               roiSize: IppiSize, max: *mut Ipp8u,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, max: *mut Ipp8u,
                              indexX: *mut ipp_ctypes::c_int,
                              indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16s_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pMax: *mut Ipp16s,
                               pIndexX: *mut ipp_ctypes::c_int,
                               pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16s_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               max: *mut Ipp16s,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16s_AC4R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                max: *mut Ipp16s,
                                indexX: *mut ipp_ctypes::c_int,
                                indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16s_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               max: *mut Ipp16s,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pMax: *mut Ipp16u,
                               pIndexX: *mut ipp_ctypes::c_int,
                               pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               max: *mut Ipp16u,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16u_AC4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                max: *mut Ipp16u,
                                indexX: *mut ipp_ctypes::c_int,
                                indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               max: *mut Ipp16u,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_32f_C1R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               pMax: *mut Ipp32f,
                               pIndexX: *mut ipp_ctypes::c_int,
                               pIndexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_32f_C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               max: *mut Ipp32f,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_32f_AC4R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                max: *mut Ipp32f,
                                indexX: *mut ipp_ctypes::c_int,
                                indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxIndx_32f_C4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               max: *mut Ipp32f,
                               indexX: *mut ipp_ctypes::c_int,
                               indexY: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pMin: *mut Ipp8u,
                             pMax: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, min: *mut Ipp8u,
                             max: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp8u,
                              max: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, min: *mut Ipp8u,
                             max: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16s_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMin: *mut Ipp16s,
                              pMax: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16s_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp16s,
                              max: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16s_AC4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp16s, max: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16s_C4R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp16s,
                              max: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMin: *mut Ipp16u,
                              pMax: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp16u,
                              max: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16u_AC4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp16u, max: *mut Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp16u,
                              max: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pMin: *mut Ipp32f,
                              pMax: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp32f,
                              max: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_32f_AC4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               min: *mut Ipp32f, max: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinMax_32f_C4R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, min: *mut Ipp32f,
                              max: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiBlockMinMax_32f_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   srcSize: IppiSize, pDstMin: *mut Ipp32f,
                                   dstMinStep: ipp_ctypes::c_int,
                                   pDstMax: *mut Ipp32f,
                                   dstMaxStep: ipp_ctypes::c_int,
                                   blockSize: IppiSize,
                                   pDstGlobalMin: *mut Ipp32f,
                                   pDstGlobalMax: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiBlockMinMax_16s_C1R(pSrc: *const Ipp16s,
                                   srcStep: ipp_ctypes::c_int,
                                   srcSize: IppiSize, pDstMin: *mut Ipp16s,
                                   dstMinStep: ipp_ctypes::c_int,
                                   pDstMax: *mut Ipp16s,
                                   dstMaxStep: ipp_ctypes::c_int,
                                   blockSize: IppiSize,
                                   pDstGlobalMin: *mut Ipp16s,
                                   pDstGlobalMax: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippiBlockMinMax_16u_C1R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   srcSize: IppiSize, pDstMin: *mut Ipp16u,
                                   dstMinStep: ipp_ctypes::c_int,
                                   pDstMax: *mut Ipp16u,
                                   dstMaxStep: ipp_ctypes::c_int,
                                   blockSize: IppiSize,
                                   pDstGlobalMin: *mut Ipp16u,
                                   pDstGlobalMax: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippiBlockMinMax_8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  srcSize: IppiSize, pDstMin: *mut Ipp8u,
                                  dstMinStep: ipp_ctypes::c_int,
                                  pDstMax: *mut Ipp8u,
                                  dstMaxStep: ipp_ctypes::c_int,
                                  blockSize: IppiSize,
                                  pDstGlobalMin: *mut Ipp8u,
                                  pDstGlobalMax: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_8u_C1IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_8u_C1IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16s_C1IR(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16s_C1IR(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16u_C1IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16u_C1IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_32f_C1IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_32f_C1IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_8u_C3IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_8u_C3IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16s_C3IR(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16s_C3IR(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16u_C3IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16u_C3IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_32f_C3IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_32f_C3IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_8u_C4IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_8u_C4IR(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16s_C4IR(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16s_C4IR(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16u_C4IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16u_C4IR(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_32f_C4IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_32f_C4IR(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp32f,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_8u_AC4IR(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_8u_AC4IR(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int,
                                 pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16s_AC4IR(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16s_AC4IR(pSrc: *const Ipp16s,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16u_AC4IR(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16u_AC4IR(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_32f_AC4IR(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_32f_AC4IR(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_8u_C1R(pSrc1: *const Ipp8u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp8u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_16u_C1R(pSrc1: *const Ipp16u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16u,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMinEvery_32f_C1R(pSrc1: *const Ipp32f,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp32f,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_8u_C1R(pSrc1: *const Ipp8u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp8u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_16u_C1R(pSrc1: *const Ipp16u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16u,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiMaxEvery_32f_C1R(pSrc1: *const Ipp32f,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp32f,
                                src2Step: ipp_ctypes::c_int,
                                pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_C1R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_C3R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_C4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_AC4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_C1IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_C3IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_C4IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_8u_AC4IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp8u, pDst: *mut Ipp8u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_C1IR(value: Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_C3IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_C4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_8u_AC4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_C1R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_C3R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_C4R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_AC4R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_C1IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_C3IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_C4IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_16u_AC4IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp16u, pDst: *mut Ipp16u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_C1IR(value: Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_C3IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_C4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_16u_AC4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_C1R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_C3R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_C4R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_AC4R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_C1IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_C3IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_C4IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAnd_32s_AC4IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_C3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_C4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_AC4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp32s, pDst: *mut Ipp32s,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_C1IR(value: Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_C3IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_C4IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAndC_32s_AC4IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_C1R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                         pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_C3R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                         pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_C4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                         pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                         roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_AC4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_C1IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_C3IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_C4IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_8u_AC4IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          value: Ipp8u, pDst: *mut Ipp8u,
                          dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          value: *const Ipp8u, pDst: *mut Ipp8u,
                          dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          value: *const Ipp8u, pDst: *mut Ipp8u,
                          dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_C1IR(value: Ipp8u, pSrcDst: *mut Ipp8u,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_C3IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_C4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_8u_AC4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_C1R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_C3R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_C4R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_AC4R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_C1IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp16u,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_C3IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp16u,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_C4IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp16u,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_16u_AC4IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           value: Ipp16u, pDst: *mut Ipp16u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp16u, pDst: *mut Ipp16u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp16u, pDst: *mut Ipp16u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_C1IR(value: Ipp16u, pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_C3IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_C4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_16u_AC4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_C1R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_C3R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_C4R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_AC4R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_C1IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp32s,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_C3IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp32s,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_C4IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp32s,
                           srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOr_32s_AC4IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                           value: Ipp32s, pDst: *mut Ipp32s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_C3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp32s, pDst: *mut Ipp32s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_C4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp32s, pDst: *mut Ipp32s,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_AC4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_C1IR(value: Ipp32s, pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_C3IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_C4IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiOrC_32s_AC4IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_C1R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_C3R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_C4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                          pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_AC4R(pSrc1: *const Ipp8u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp8u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_C1IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_C3IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_C4IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_8u_AC4IR(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           value: *const Ipp8u, pDst: *mut Ipp8u,
                           dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp8u, pDst: *mut Ipp8u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_C1IR(value: Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_C3IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_C4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_8u_AC4IR(value: *const Ipp8u, pSrcDst: *mut Ipp8u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_C1R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_C3R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_C4R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_AC4R(pSrc1: *const Ipp16u, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp16u, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_C1IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_C3IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_C4IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp16u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_16u_AC4IR(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_C4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp16u, pDst: *mut Ipp16u,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_AC4R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp16u, pDst: *mut Ipp16u,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_C1IR(value: Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_C3IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_C4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_16u_AC4IR(value: *const Ipp16u, pSrcDst: *mut Ipp16u,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_C1R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_C3R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_C4R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                           pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_AC4R(pSrc1: *const Ipp32s, src1Step: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32s, src2Step: ipp_ctypes::c_int,
                            pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_C1IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_C3IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_C4IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            pSrcDst: *mut Ipp32s,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXor_32s_AC4IR(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_C1R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_C3R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_C4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                            value: *const Ipp32s, pDst: *mut Ipp32s,
                            dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_AC4R(pSrc: *const Ipp32s, srcStep: ipp_ctypes::c_int,
                             value: *const Ipp32s, pDst: *mut Ipp32s,
                             dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_C1IR(value: Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_C3IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_C4IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                             srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiXorC_32s_AC4IR(value: *const Ipp32s, pSrcDst: *mut Ipp32s,
                              srcDstStep: ipp_ctypes::c_int,
                              roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                          roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                           pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_C1IR(pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_C3IR(pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_C4IR(pSrcDst: *mut Ipp8u, srcDstStep: ipp_ctypes::c_int,
                           roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiNot_8u_AC4IR(pSrcDst: *mut Ipp8u,
                            srcDstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: Ipp32u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp32u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp32u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_C1IR(value: Ipp32u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_8u_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, value: Ipp32u,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_AC4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32u, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_C1IR(value: Ipp32u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_16u_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_C1R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, value: Ipp32u,
                               pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_C3R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_C4R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_AC4R(pSrc: *const Ipp32s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32u, pDst: *mut Ipp32s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_C1IR(value: Ipp32u, pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiLShiftC_32s_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp32s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: Ipp32u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp32u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp32u, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_AC4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_C1IR(value: Ipp32u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_8u_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp8u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int, value: Ipp32u,
                               pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_AC4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32u, pDst: *mut Ipp16u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_C1IR(value: Ipp32u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16u_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp16u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int, value: Ipp32u,
                               pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_AC4R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32u, pDst: *mut Ipp16s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_C1IR(value: Ipp32u, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_16s_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp16s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_C1R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int, value: Ipp32u,
                               pDst: *mut Ipp32s, dstStep: ipp_ctypes::c_int,
                               roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_C3R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_C4R(pSrc: *const Ipp32s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp32u, pDst: *mut Ipp32s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_AC4R(pSrc: *const Ipp32s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32u, pDst: *mut Ipp32s,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_C1IR(value: Ipp32u, pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_C3IR(value: *const Ipp32u, pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_C4IR(value: *const Ipp32u, pSrcDst: *mut Ipp32s,
                                srcDstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiRShiftC_32s_AC4IR(value: *const Ipp32u, pSrcDst: *mut Ipp32s,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_8u_C1R(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_8u_C3R(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_8u_AC4R(pSrc1: *const Ipp8u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp8u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_8u_C4R(pSrc1: *const Ipp8u,
                              src1Step: ipp_ctypes::c_int,
                              pSrc2: *const Ipp8u,
                              src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_8u_AC4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp8u, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                               value: *const Ipp8u, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16s_C1R(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16s_C3R(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16s_AC4R(pSrc1: *const Ipp16s,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16s,
                                src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16s_C4R(pSrc1: *const Ipp16s,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16s,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16s_C1R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int, value: Ipp16s,
                                pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16s_C3R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16s, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16s_AC4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 value: *const Ipp16s, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16s_C4R(pSrc: *const Ipp16s,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16s, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16u_C1R(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16u_C3R(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16u_AC4R(pSrc1: *const Ipp16u,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp16u,
                                src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_16u_C4R(pSrc1: *const Ipp16u,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp16u,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16u_C1R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int, value: Ipp16u,
                                pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16u_C3R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16u, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16u_AC4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 value: *const Ipp16u, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_16u_C4R(pSrc: *const Ipp16u,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp16u, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_32f_C1R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_32f_C3R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_32f_AC4R(pSrc1: *const Ipp32f,
                                src1Step: ipp_ctypes::c_int,
                                pSrc2: *const Ipp32f,
                                src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompare_32f_C4R(pSrc1: *const Ipp32f,
                               src1Step: ipp_ctypes::c_int,
                               pSrc2: *const Ipp32f,
                               src2Step: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_32f_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, value: Ipp32f,
                                pDst: *mut Ipp8u, dstStep: ipp_ctypes::c_int,
                                roiSize: IppiSize, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_32f_AC4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 value: *const Ipp32f, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, ippCmpOp: IppCmpOp)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareC_32f_C4R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int,
                                value: *const Ipp32f, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                                ippCmpOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEps_32f_C1R(pSrc1: *const Ipp32f,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp32f,
                                       src2Step: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEps_32f_C3R(pSrc1: *const Ipp32f,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp32f,
                                       src2Step: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEps_32f_AC4R(pSrc1: *const Ipp32f,
                                        src1Step: ipp_ctypes::c_int,
                                        pSrc2: *const Ipp32f,
                                        src2Step: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEps_32f_C4R(pSrc1: *const Ipp32f,
                                       src1Step: ipp_ctypes::c_int,
                                       pSrc2: *const Ipp32f,
                                       src2Step: ipp_ctypes::c_int,
                                       pDst: *mut Ipp8u,
                                       dstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEpsC_32f_C1R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        value: Ipp32f, pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEpsC_32f_C3R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        value: *const Ipp32f,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEpsC_32f_AC4R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         value: *const Ipp32f,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompareEqualEpsC_32f_C4R(pSrc: *const Ipp32f,
                                        srcStep: ipp_ctypes::c_int,
                                        value: *const Ipp32f,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        roiSize: IppiSize, eps: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiErode3x3_64f_C1R(pSrc: *const Ipp64f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp64f,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDilate3x3_64f_C1R(pSrc: *const Ipp64f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp64f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiZigzagInv8x8_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiZigzagFwd8x8_16s_C1(pSrc: *const Ipp16s, pDst: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlett_8u_C1R(pSrc: *const Ipp8u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlett_16u_C1R(pSrc: *const Ipp16u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlett_32f_C1R(pSrc: *const Ipp32f,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlett_8u_C1IR(pSrcDst: *mut Ipp8u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlett_16u_C1IR(pSrcDst: *mut Ipp16u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlett_32f_C1IR(pSrcDst: *mut Ipp32f,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSep_8u_C1R(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp8u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSep_16u_C1R(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp16u,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSep_32f_C1R(pSrc: *const Ipp32f,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp32f,
                                      dstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSep_8u_C1IR(pSrcDst: *mut Ipp8u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSep_16u_C1IR(pSrcDst: *mut Ipp16u,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSep_32f_C1IR(pSrcDst: *mut Ipp32f,
                                       srcDstStep: ipp_ctypes::c_int,
                                       roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettGetBufferSize(dataType: IppDataType,
                                        roiSize: IppiSize,
                                        pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinBartlettSepGetBufferSize(dataType: IppDataType,
                                           roiSize: IppiSize,
                                           pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHamming_8u_C1R(pSrc: *const Ipp8u,
                                 srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHamming_16u_C1R(pSrc: *const Ipp16u,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHamming_32f_C1R(pSrc: *const Ipp32f,
                                  srcStep: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHamming_8u_C1IR(pSrcDst: *mut Ipp8u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHamming_16u_C1IR(pSrcDst: *mut Ipp16u,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHamming_32f_C1IR(pSrcDst: *mut Ipp32f,
                                   srcDstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSep_8u_C1R(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSep_16u_C1R(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSep_32f_C1R(pSrc: *const Ipp32f,
                                     srcStep: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSep_8u_C1IR(pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSep_16u_C1IR(pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSep_32f_C1IR(pSrcDst: *mut Ipp32f,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingGetBufferSize(dataType: IppDataType,
                                       roiSize: IppiSize,
                                       pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiWinHammingSepGetBufferSize(dataType: IppDataType,
                                          roiSize: IppiSize,
                                          pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_8u_C1R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_8u_C3R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_8u_C4R(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                                dstStep: ipp_ctypes::c_int, roiSize: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_8u_C1IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_8u_C3IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_8u_C4IR(pSrcDst: *mut Ipp8u,
                                 srcDstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16u_C1R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16u_C3R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16u_C4R(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16u,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16u_C1IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16u_C3IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16u_C4IR(pSrcDst: *mut Ipp16u,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16s_C1R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16s_C3R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16s_C4R(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp16s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16s_C1IR(pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16s_C3IR(pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_16s_C4IR(pSrcDst: *mut Ipp16s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32s_C1R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32s_C3R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32s_C4R(pSrc: *const Ipp32s,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32s_C1IR(pSrcDst: *mut Ipp32s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32s_C3IR(pSrcDst: *mut Ipp32s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32s_C4IR(pSrcDst: *mut Ipp32s,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32f_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32f_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32f_C4R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int,
                                 roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32f_C1IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32f_C3IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiTranspose_32f_C4IR(pSrcDst: *mut Ipp32f,
                                  srcDstStep: ipp_ctypes::c_int,
                                  roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvFFTGetSize_32f(nChannels: ipp_ctypes::c_int,
                                    kernelSize: ipp_ctypes::c_int,
                                    FFTorder: ipp_ctypes::c_int,
                                    pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvFFTInit_32f_C1R(pDeconvFFTState:
                                         *mut IppiDeconvFFTState_32f_C1R,
                                     pKernel: *const Ipp32f,
                                     kernelSize: ipp_ctypes::c_int,
                                     FFTorder: ipp_ctypes::c_int,
                                     threshold: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvFFTInit_32f_C3R(pDeconvFFTState:
                                         *mut IppiDeconvFFTState_32f_C3R,
                                     pKernel: *const Ipp32f,
                                     kernelSize: ipp_ctypes::c_int,
                                     FFTorder: ipp_ctypes::c_int,
                                     threshold: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvFFT_32f_C1R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                 pDeconvFFTState:
                                     *mut IppiDeconvFFTState_32f_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvFFT_32f_C3R(pSrc: *const Ipp32f,
                                 srcStep: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f,
                                 dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                 pDeconvFFTState:
                                     *mut IppiDeconvFFTState_32f_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvLRGetSize_32f(numChannels: ipp_ctypes::c_int,
                                   kernelSize: ipp_ctypes::c_int,
                                   maxroi: IppiSize,
                                   pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvLRInit_32f_C1R(pDeconvLR: *mut IppiDeconvLR_32f_C1R,
                                    pKernel: *const Ipp32f,
                                    kernelSize: ipp_ctypes::c_int,
                                    maxroi: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvLRInit_32f_C3R(pDeconvLR: *mut IppiDeconvLR_32f_C3R,
                                    pKernel: *const Ipp32f,
                                    kernelSize: ipp_ctypes::c_int,
                                    maxroi: IppiSize, threshold: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvLR_32f_C1R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                numiter: ipp_ctypes::c_int,
                                pDeconvLR: *mut IppiDeconvLR_32f_C1R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeconvLR_32f_C3R(pSrc: *const Ipp32f,
                                srcStep: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstStep: ipp_ctypes::c_int, roi: IppiSize,
                                numiter: ipp_ctypes::c_int,
                                pDeconvLR: *mut IppiDeconvLR_32f_C3R)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_8u_C1R(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, colorKey: Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_8u_C3R(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, colorKey: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_8u_C4R(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, colorKey: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_16u_C1R(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, colorKey: Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_16u_C3R(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, colorKey: *mut Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_16u_C4R(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, colorKey: *mut Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_16s_C1R(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, colorKey: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_16s_C3R(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, colorKey: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiCompColorKey_16s_C4R(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, colorkey: *mut Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippiAlphaCompColorKey_8u_AC4R(pSrc1: *const Ipp8u,
                                         src1Step: ipp_ctypes::c_int,
                                         alpha1: Ipp8u, pSrc2: *const Ipp8u,
                                         src2Step: ipp_ctypes::c_int,
                                         alpha2: Ipp8u, pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         roiSize: IppiSize,
                                         colorKey: *mut Ipp8u,
                                         alphaType: IppiAlphaType)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMedian_8u_P3C1R(pSrc: *mut *const Ipp8u,
                               srcStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                               dstStep: ipp_ctypes::c_int, size: IppiSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDeinterlaceFilterCAVT_8u_C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            threshold: Ipp16u,
                                            roiSize: IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorderGetBufferSize(filter:
                                                      IppiFilterBilateralType,
                                                  dstRoiSize: IppiSize,
                                                  radius: ipp_ctypes::c_int,
                                                  dataType: IppDataType,
                                                  numChannels:
                                                      ipp_ctypes::c_int,
                                                  distMethodType:
                                                      IppiDistanceMethodType,
                                                  pSpecSize:
                                                      *mut ipp_ctypes::c_int,
                                                  pBufferSize:
                                                      *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorderInit(filter: IppiFilterBilateralType,
                                         dstRoiSize: IppiSize,
                                         radius: ipp_ctypes::c_int,
                                         dataType: IppDataType,
                                         numChannels: ipp_ctypes::c_int,
                                         distMethod: IppiDistanceMethodType,
                                         valSquareSigma: Ipp32f,
                                         posSquareSigma: Ipp32f,
                                         pSpec: *mut IppiFilterBilateralSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorder_8u_C1R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            borderType: IppiBorderType,
                                            pBorderValue: *mut Ipp8u,
                                            pSpec:
                                                *mut IppiFilterBilateralSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorder_8u_C3R(pSrc: *const Ipp8u,
                                            srcStep: ipp_ctypes::c_int,
                                            pDst: *mut Ipp8u,
                                            dstStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            borderType: IppiBorderType,
                                            pBorderValue: *mut Ipp8u,
                                            pSpec:
                                                *mut IppiFilterBilateralSpec,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorder_32f_C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             borderType: IppiBorderType,
                                             pBorderValue: *mut Ipp32f,
                                             pSpec:
                                                 *mut IppiFilterBilateralSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBilateralBorder_32f_C3R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pDst: *mut Ipp32f,
                                             dstStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             borderType: IppiBorderType,
                                             pBorderValue: *mut Ipp32f,
                                             pSpec:
                                                 *mut IppiFilterBilateralSpec,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterGetBufSize_64f_C1R(kernelSize: IppiSize,
                                        roiWidth: ipp_ctypes::c_int,
                                        pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilter_64f_C1R(pSrc: *const Ipp64f, srcStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp64f, dstStep: ipp_ctypes::c_int,
                              dstRoiSize: IppiSize, pKernel: *const Ipp64f,
                              kernelSize: IppiSize, anchor: IppiPoint,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_C1RSfs(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_C3RSfs(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_C4RSfs(pSrc1: *const Ipp16s,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16s,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_AC4RSfs(pSrc1: *const Ipp16s,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp16s,
                                     src2Step: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_C1RSfs(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, rndMode: IppRoundMode,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_C3RSfs(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, rndMode: IppRoundMode,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_C4RSfs(pSrc1: *const Ipp8u,
                                   src1Step: ipp_ctypes::c_int,
                                   pSrc2: *const Ipp8u,
                                   src2Step: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   roiSize: IppiSize, rndMode: IppRoundMode,
                                   ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_AC4RSfs(pSrc1: *const Ipp8u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp8u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp8u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_C1RSfs(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_C3RSfs(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_C4RSfs(pSrc1: *const Ipp16u,
                                    src1Step: ipp_ctypes::c_int,
                                    pSrc2: *const Ipp16u,
                                    src2Step: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_AC4RSfs(pSrc1: *const Ipp16u,
                                     src1Step: ipp_ctypes::c_int,
                                     pSrc2: *const Ipp16u,
                                     src2Step: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16u,
                                     dstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_C1IRSfs(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_C3IRSfs(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_C4IRSfs(pSrc: *const Ipp16s,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp16s,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16s_AC4IRSfs(pSrc: *const Ipp16s,
                                      srcStep: ipp_ctypes::c_int,
                                      pSrcDst: *mut Ipp16s,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      rndMode: IppRoundMode,
                                      ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_C1IRSfs(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_C3IRSfs(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_C4IRSfs(pSrc: *const Ipp8u,
                                    srcStep: ipp_ctypes::c_int,
                                    pSrcDst: *mut Ipp8u,
                                    srcDstStep: ipp_ctypes::c_int,
                                    roiSize: IppiSize, rndMode: IppRoundMode,
                                    ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_8u_AC4IRSfs(pSrc: *const Ipp8u,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp8u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_C1IRSfs(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_C3IRSfs(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_C4IRSfs(pSrc: *const Ipp16u,
                                     srcStep: ipp_ctypes::c_int,
                                     pSrcDst: *mut Ipp16u,
                                     srcDstStep: ipp_ctypes::c_int,
                                     roiSize: IppiSize, rndMode: IppRoundMode,
                                     ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiDiv_Round_16u_AC4IRSfs(pSrc: *const Ipp16u,
                                      srcStep: ipp_ctypes::c_int,
                                      pSrcDst: *mut Ipp16u,
                                      srcDstStep: ipp_ctypes::c_int,
                                      roiSize: IppiSize,
                                      rndMode: IppRoundMode,
                                      ScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSize_8u(srcSize: IppiSize, dstSize: IppiSize,
                                interpolation: IppiInterpolationType,
                                antialiasing: Ipp32u,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSize_16u(srcSize: IppiSize, dstSize: IppiSize,
                                 interpolation: IppiInterpolationType,
                                 antialiasing: Ipp32u,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSize_16s(srcSize: IppiSize, dstSize: IppiSize,
                                 interpolation: IppiInterpolationType,
                                 antialiasing: Ipp32u,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pInitBufSize: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSize_32f(srcSize: IppiSize, dstSize: IppiSize,
                                 interpolation: IppiInterpolationType,
                                 antialiasing: Ipp32u,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSize_64f(srcSize: IppiSize, dstSize: IppiSize,
                                 interpolation: IppiInterpolationType,
                                 antialiasing: Ipp32u,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pInitBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBufferSize_8u(pSpec: *const IppiResizeSpec_32f,
                                      dstSize: IppiSize, numChannels: Ipp32u,
                                      pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBufferSize_16u(pSpec: *const IppiResizeSpec_32f,
                                       dstSize: IppiSize, numChannels: Ipp32u,
                                       pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBufferSize_16s(pSpec: *const IppiResizeSpec_32f,
                                       dstSize: IppiSize, numChannels: Ipp32u,
                                       pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBufferSize_32f(pSpec: *const IppiResizeSpec_32f,
                                       dstSize: IppiSize, numChannels: Ipp32u,
                                       pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBufferSize_64f(pSpec: *const IppiResizeSpec_64f,
                                       dstSize: IppiSize, numChannels: Ipp32u,
                                       pBufSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBorderSize_8u(pSpec: *const IppiResizeSpec_32f,
                                      borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBorderSize_16u(pSpec: *const IppiResizeSpec_32f,
                                       borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBorderSize_16s(pSpec: *const IppiResizeSpec_32f,
                                       borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBorderSize_32f(pSpec: *const IppiResizeSpec_32f,
                                       borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetBorderSize_64f(pSpec: *const IppiResizeSpec_64f,
                                       borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcOffset_8u(pSpec: *const IppiResizeSpec_32f,
                                     dstOffset: IppiPoint,
                                     srcOffset: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcOffset_16u(pSpec: *const IppiResizeSpec_32f,
                                      dstOffset: IppiPoint,
                                      srcOffset: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcOffset_16s(pSpec: *const IppiResizeSpec_32f,
                                      dstOffset: IppiPoint,
                                      srcOffset: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcOffset_32f(pSpec: *const IppiResizeSpec_32f,
                                      dstOffset: IppiPoint,
                                      srcOffset: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcOffset_64f(pSpec: *const IppiResizeSpec_64f,
                                      dstOffset: IppiPoint,
                                      srcOffset: *mut IppiPoint) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcRoi_8u(pSpec: *const IppiResizeSpec_32f,
                                  dstRoiOffset: IppiPoint,
                                  dstRoiSize: IppiSize,
                                  srcRoiOffset: *mut IppiPoint,
                                  srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcRoi_16u(pSpec: *const IppiResizeSpec_32f,
                                   dstRoiOffset: IppiPoint,
                                   dstRoiSize: IppiSize,
                                   srcRoiOffset: *mut IppiPoint,
                                   srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcRoi_16s(pSpec: *const IppiResizeSpec_32f,
                                   dstRoiOffset: IppiPoint,
                                   dstRoiSize: IppiSize,
                                   srcRoiOffset: *mut IppiPoint,
                                   srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcRoi_32f(pSpec: *const IppiResizeSpec_32f,
                                   dstRoiOffset: IppiPoint,
                                   dstRoiSize: IppiSize,
                                   srcRoiOffset: *mut IppiPoint,
                                   srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeGetSrcRoi_64f(pSpec: *const IppiResizeSpec_64f,
                                   dstRoiOffset: IppiPoint,
                                   dstRoiSize: IppiSize,
                                   srcRoiOffset: *mut IppiPoint,
                                   srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearestInit_8u(srcSize: IppiSize, dstSize: IppiSize,
                                    pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearestInit_16u(srcSize: IppiSize, dstSize: IppiSize,
                                     pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearestInit_16s(srcSize: IppiSize, dstSize: IppiSize,
                                     pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearestInit_32f(srcSize: IppiSize, dstSize: IppiSize,
                                     pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinearInit_8u(srcSize: IppiSize, dstSize: IppiSize,
                                   pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinearInit_16u(srcSize: IppiSize, dstSize: IppiSize,
                                    pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinearInit_16s(srcSize: IppiSize, dstSize: IppiSize,
                                    pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinearInit_32f(srcSize: IppiSize, dstSize: IppiSize,
                                    pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinearInit_64f(srcSize: IppiSize, dstSize: IppiSize,
                                    pSpec: *mut IppiResizeSpec_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubicInit_8u(srcSize: IppiSize, dstSize: IppiSize,
                                  valueB: Ipp32f, valueC: Ipp32f,
                                  pSpec: *mut IppiResizeSpec_32f,
                                  pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubicInit_16u(srcSize: IppiSize, dstSize: IppiSize,
                                   valueB: Ipp32f, valueC: Ipp32f,
                                   pSpec: *mut IppiResizeSpec_32f,
                                   pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubicInit_16s(srcSize: IppiSize, dstSize: IppiSize,
                                   valueB: Ipp32f, valueC: Ipp32f,
                                   pSpec: *mut IppiResizeSpec_32f,
                                   pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubicInit_32f(srcSize: IppiSize, dstSize: IppiSize,
                                   valueB: Ipp32f, valueC: Ipp32f,
                                   pSpec: *mut IppiResizeSpec_32f,
                                   pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczosInit_8u(srcSize: IppiSize, dstSize: IppiSize,
                                    numLobes: Ipp32u,
                                    pSpec: *mut IppiResizeSpec_32f,
                                    pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczosInit_16u(srcSize: IppiSize, dstSize: IppiSize,
                                     numLobes: Ipp32u,
                                     pSpec: *mut IppiResizeSpec_32f,
                                     pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczosInit_16s(srcSize: IppiSize, dstSize: IppiSize,
                                     numLobes: Ipp32u,
                                     pSpec: *mut IppiResizeSpec_32f,
                                     pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczosInit_32f(srcSize: IppiSize, dstSize: IppiSize,
                                     numLobes: Ipp32u,
                                     pSpec: *mut IppiResizeSpec_32f,
                                     pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuperInit_8u(srcSize: IppiSize, dstSize: IppiSize,
                                  pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuperInit_16u(srcSize: IppiSize, dstSize: IppiSize,
                                   pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuperInit_16s(srcSize: IppiSize, dstSize: IppiSize,
                                   pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuperInit_32f(srcSize: IppiSize, dstSize: IppiSize,
                                   pSpec: *mut IppiResizeSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_8u_C1R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                    pDst: *mut Ipp8u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_8u_C3R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                    pDst: *mut Ipp8u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_8u_C4R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                    pDst: *mut Ipp8u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16u_C1R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                     pDst: *mut Ipp16u, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16u_C3R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                     pDst: *mut Ipp16u, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16u_C4R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                     pDst: *mut Ipp16u, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16s_C1R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                     pDst: *mut Ipp16s, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16s_C3R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                     pDst: *mut Ipp16s, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_16s_C4R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                     pDst: *mut Ipp16s, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_32f_C1R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                     pDst: *mut Ipp32f, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_32f_C3R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                     pDst: *mut Ipp32f, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeNearest_32f_C4R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                     pDst: *mut Ipp32f, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_8u_C1R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                   pDst: *mut Ipp8u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp8u,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_8u_C3R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                   pDst: *mut Ipp8u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp8u,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_8u_C4R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                   pDst: *mut Ipp8u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp8u,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16u_C1R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                    pDst: *mut Ipp16u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp16u,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16u_C3R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                    pDst: *mut Ipp16u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp16u,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16u_C4R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                    pDst: *mut Ipp16u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp16u,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16s_C1R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                    pDst: *mut Ipp16s, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp16s,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16s_C3R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                    pDst: *mut Ipp16s, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp16s,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_16s_C4R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                    pDst: *mut Ipp16s, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp16s,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_32f_C1R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                    pDst: *mut Ipp32f, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp32f,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_32f_C3R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                    pDst: *mut Ipp32f, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp32f,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_32f_C4R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                    pDst: *mut Ipp32f, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp32f,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_64f_C1R(pSrc: *const Ipp64f, srcStep: Ipp32s,
                                    pDst: *mut Ipp64f, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp64f,
                                    pSpec: *const IppiResizeSpec_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_64f_C3R(pSrc: *const Ipp64f, srcStep: Ipp32s,
                                    pDst: *mut Ipp64f, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp64f,
                                    pSpec: *const IppiResizeSpec_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLinear_64f_C4R(pSrc: *const Ipp64f, srcStep: Ipp32s,
                                    pDst: *mut Ipp64f, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp64f,
                                    pSpec: *const IppiResizeSpec_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_8u_C1R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                  pDst: *mut Ipp8u, dstStep: Ipp32s,
                                  dstOffset: IppiPoint, dstSize: IppiSize,
                                  border: IppiBorderType,
                                  pBorderValue: *const Ipp8u,
                                  pSpec: *const IppiResizeSpec_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_8u_C3R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                  pDst: *mut Ipp8u, dstStep: Ipp32s,
                                  dstOffset: IppiPoint, dstSize: IppiSize,
                                  border: IppiBorderType,
                                  pBorderValue: *const Ipp8u,
                                  pSpec: *const IppiResizeSpec_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_8u_C4R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                  pDst: *mut Ipp8u, dstStep: Ipp32s,
                                  dstOffset: IppiPoint, dstSize: IppiSize,
                                  border: IppiBorderType,
                                  pBorderValue: *const Ipp8u,
                                  pSpec: *const IppiResizeSpec_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16u_C1R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                   pDst: *mut Ipp16u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp16u,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16u_C3R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                   pDst: *mut Ipp16u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp16u,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16u_C4R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                   pDst: *mut Ipp16u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp16u,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16s_C1R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                   pDst: *mut Ipp16s, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp16s,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16s_C3R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                   pDst: *mut Ipp16s, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp16s,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_16s_C4R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                   pDst: *mut Ipp16s, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp16s,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_32f_C1R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                   pDst: *mut Ipp32f, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp32f,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_32f_C3R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                   pDst: *mut Ipp32f, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp32f,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeCubic_32f_C4R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                   pDst: *mut Ipp32f, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   border: IppiBorderType,
                                   pBorderValue: *const Ipp32f,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_8u_C1R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                    pDst: *mut Ipp8u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp8u,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_8u_C3R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                    pDst: *mut Ipp8u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp8u,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_8u_C4R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                    pDst: *mut Ipp8u, dstStep: Ipp32s,
                                    dstOffset: IppiPoint, dstSize: IppiSize,
                                    border: IppiBorderType,
                                    pBorderValue: *const Ipp8u,
                                    pSpec: *const IppiResizeSpec_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16u_C1R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                     pDst: *mut Ipp16u, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16u,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16u_C3R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                     pDst: *mut Ipp16u, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16u,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16u_C4R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                     pDst: *mut Ipp16u, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16u,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16s_C1R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                     pDst: *mut Ipp16s, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16s,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16s_C3R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                     pDst: *mut Ipp16s, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16s,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_16s_C4R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                     pDst: *mut Ipp16s, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp16s,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_32f_C1R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                     pDst: *mut Ipp32f, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp32f,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_32f_C3R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                     pDst: *mut Ipp32f, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp32f,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeLanczos_32f_C4R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                     pDst: *mut Ipp32f, dstStep: Ipp32s,
                                     dstOffset: IppiPoint, dstSize: IppiSize,
                                     border: IppiBorderType,
                                     pBorderValue: *const Ipp32f,
                                     pSpec: *const IppiResizeSpec_32f,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_8u_C1R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                  pDst: *mut Ipp8u, dstStep: Ipp32s,
                                  dstOffset: IppiPoint, dstSize: IppiSize,
                                  pSpec: *const IppiResizeSpec_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_8u_C3R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                  pDst: *mut Ipp8u, dstStep: Ipp32s,
                                  dstOffset: IppiPoint, dstSize: IppiSize,
                                  pSpec: *const IppiResizeSpec_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_8u_C4R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                  pDst: *mut Ipp8u, dstStep: Ipp32s,
                                  dstOffset: IppiPoint, dstSize: IppiSize,
                                  pSpec: *const IppiResizeSpec_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16u_C1R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                   pDst: *mut Ipp16u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16u_C3R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                   pDst: *mut Ipp16u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16u_C4R(pSrc: *const Ipp16u, srcStep: Ipp32s,
                                   pDst: *mut Ipp16u, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16s_C1R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                   pDst: *mut Ipp16s, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16s_C3R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                   pDst: *mut Ipp16s, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_16s_C4R(pSrc: *const Ipp16s, srcStep: Ipp32s,
                                   pDst: *mut Ipp16s, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_32f_C1R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                   pDst: *mut Ipp32f, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_32f_C3R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                   pDst: *mut Ipp32f, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeSuper_32f_C4R(pSrc: *const Ipp32f, srcStep: Ipp32s,
                                   pDst: *mut Ipp32f, dstStep: Ipp32s,
                                   dstOffset: IppiPoint, dstSize: IppiSize,
                                   pSpec: *const IppiResizeSpec_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasingLinearInit(srcSize: IppiSize,
                                            dstSize: IppiSize,
                                            pSpec: *mut IppiResizeSpec_32f,
                                            pInitBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasingCubicInit(srcSize: IppiSize,
                                           dstSize: IppiSize, valueB: Ipp32f,
                                           valueC: Ipp32f,
                                           pSpec: *mut IppiResizeSpec_32f,
                                           pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasingLanczosInit(srcSize: IppiSize,
                                             dstSize: IppiSize,
                                             numLobes: Ipp32u,
                                             pSpec: *mut IppiResizeSpec_32f,
                                             pInitBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_8u_C1R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                         pDst: *mut Ipp8u, dstStep: Ipp32s,
                                         dstOffset: IppiPoint,
                                         dstSize: IppiSize,
                                         border: IppiBorderType,
                                         pBorderValue: *mut Ipp8u,
                                         pSpec: *const IppiResizeSpec_32f,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_8u_C3R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                         pDst: *mut Ipp8u, dstStep: Ipp32s,
                                         dstOffset: IppiPoint,
                                         dstSize: IppiSize,
                                         border: IppiBorderType,
                                         pBorderValue: *mut Ipp8u,
                                         pSpec: *const IppiResizeSpec_32f,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_8u_C4R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                         pDst: *mut Ipp8u, dstStep: Ipp32s,
                                         dstOffset: IppiPoint,
                                         dstSize: IppiSize,
                                         border: IppiBorderType,
                                         pBorderValue: *mut Ipp8u,
                                         pSpec: *const IppiResizeSpec_32f,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16u_C1R(pSrc: *const Ipp16u,
                                          srcStep: Ipp32s, pDst: *mut Ipp16u,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp16u,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16u_C3R(pSrc: *const Ipp16u,
                                          srcStep: Ipp32s, pDst: *mut Ipp16u,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp16u,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16u_C4R(pSrc: *const Ipp16u,
                                          srcStep: Ipp32s, pDst: *mut Ipp16u,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp16u,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16s_C1R(pSrc: *const Ipp16s,
                                          srcStep: Ipp32s, pDst: *mut Ipp16s,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp16s,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16s_C3R(pSrc: *const Ipp16s,
                                          srcStep: Ipp32s, pDst: *mut Ipp16s,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp16s,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_16s_C4R(pSrc: *const Ipp16s,
                                          srcStep: Ipp32s, pDst: *mut Ipp16s,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp16s,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_32f_C1R(pSrc: *const Ipp32f,
                                          srcStep: Ipp32s, pDst: *mut Ipp32f,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp32f,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_32f_C3R(pSrc: *const Ipp32f,
                                          srcStep: Ipp32s, pDst: *mut Ipp32f,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp32f,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeAntialiasing_32f_C4R(pSrc: *const Ipp32f,
                                          srcStep: Ipp32s, pDst: *mut Ipp32f,
                                          dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          pBorderValue: *mut Ipp32f,
                                          pSpec: *const IppiResizeSpec_32f,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422GetSize(srcSize: IppiSize, dstSize: IppiSize,
                                   interpolation: IppiInterpolationType,
                                   antialiasing: Ipp32u,
                                   pSpecSize: *mut Ipp32s,
                                   pInitBufSize: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422GetBufSize(pSpec: *const IppiResizeYUV422Spec,
                                      dstSize: IppiSize,
                                      pBufSize: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422GetBorderSize(pSpec: *const IppiResizeYUV422Spec,
                                         borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422GetSrcOffset(pSpec: *const IppiResizeYUV422Spec,
                                        dstOffset: IppiPoint,
                                        srcOffset: *mut IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422GetSrcRoi(pSpec: *const IppiResizeYUV422Spec,
                                     dstRoiOffset: IppiPoint,
                                     dstRoiSize: IppiSize,
                                     srcRoiOffset: *mut IppiPoint,
                                     srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422NearestInit(srcSize: IppiSize, dstSize: IppiSize,
                                       pSpec: *mut IppiResizeYUV422Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422LinearInit(srcSize: IppiSize, dstSize: IppiSize,
                                      pSpec: *mut IppiResizeYUV422Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422Nearest_8u_C2R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                          pDst: *mut Ipp8u, dstStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          pSpec: *const IppiResizeYUV422Spec,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV422Linear_8u_C2R(pSrc: *const Ipp8u, srcStep: Ipp32s,
                                         pDst: *mut Ipp8u, dstStep: Ipp32s,
                                         dstOffset: IppiPoint,
                                         dstSize: IppiSize,
                                         border: IppiBorderType,
                                         pBorderValue: *const Ipp8u,
                                         pSpec: *const IppiResizeYUV422Spec,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420GetSize(srcSize: IppiSize, dstSize: IppiSize,
                                   interpolation: IppiInterpolationType,
                                   antialiasing: Ipp32u,
                                   pSpecSize: *mut Ipp32s,
                                   pInitBufSize: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420GetBufferSize(pSpec: *const IppiResizeYUV420Spec,
                                         dstSize: IppiSize,
                                         pBufSize: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420GetBorderSize(pSpec: *const IppiResizeYUV420Spec,
                                         borderSize: *mut IppiBorderSize)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420GetSrcOffset(pSpec: *const IppiResizeYUV420Spec,
                                        dstOffset: IppiPoint,
                                        srcOffset: *mut IppiPoint)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420GetSrcRoi(pSpec: *const IppiResizeYUV420Spec,
                                     dstRoiOffset: IppiPoint,
                                     dstRoiSize: IppiSize,
                                     srcRoiOffset: *mut IppiPoint,
                                     srcRoiSize: *mut IppiSize) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420LanczosInit(srcSize: IppiSize, dstSize: IppiSize,
                                       numLobes: Ipp32u,
                                       pSpec: *mut IppiResizeYUV420Spec,
                                       pInitBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420SuperInit(srcSize: IppiSize, dstSize: IppiSize,
                                     pSpec: *mut IppiResizeYUV420Spec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420Lanczos_8u_P2R(pSrcY: *const Ipp8u,
                                          srcYStep: Ipp32s,
                                          pSrcUV: *const Ipp8u,
                                          srcUVStep: Ipp32s,
                                          pDstY: *mut Ipp8u, dstYStep: Ipp32s,
                                          pDstUV: *mut Ipp8u,
                                          dstUVStep: Ipp32s,
                                          dstOffset: IppiPoint,
                                          dstSize: IppiSize,
                                          border: IppiBorderType,
                                          borderValue: *const Ipp8u,
                                          pSpec: *const IppiResizeYUV420Spec,
                                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiResizeYUV420Super_8u_P2R(pSrcY: *const Ipp8u, srcYStep: Ipp32s,
                                        pSrcUV: *const Ipp8u,
                                        srcUVStep: Ipp32s, pDstY: *mut Ipp8u,
                                        dstYStep: Ipp32s, pDstUV: *mut Ipp8u,
                                        dstUVStep: Ipp32s,
                                        dstOffset: IppiPoint,
                                        dstSize: IppiSize,
                                        pSpec: *const IppiResizeYUV420Spec,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorderGetSize(kernelSize: IppiSize, dstRoiSize: IppiSize,
                                   dataType: IppDataType,
                                   kernelType: IppDataType,
                                   numChannels: ipp_ctypes::c_int,
                                   pSpecSize: *mut ipp_ctypes::c_int,
                                   pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorderInit_16s(pKernel: *const Ipp16s,
                                    kernelSize: IppiSize,
                                    divisor: ipp_ctypes::c_int,
                                    dataType: IppDataType,
                                    numChannels: ipp_ctypes::c_int,
                                    roundMode: IppRoundMode,
                                    pSpec: *mut IppiFilterBorderSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorderInit_32f(pKernel: *const Ipp32f,
                                    kernelSize: IppiSize,
                                    dataType: IppDataType,
                                    numChannels: ipp_ctypes::c_int,
                                    roundMode: IppRoundMode,
                                    pSpec: *mut IppiFilterBorderSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_8u_C1R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize,
                                   border: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pSpec: *const IppiFilterBorderSpec,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_8u_C3R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize,
                                   border: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pSpec: *const IppiFilterBorderSpec,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_8u_C4R(pSrc: *const Ipp8u,
                                   srcStep: ipp_ctypes::c_int,
                                   pDst: *mut Ipp8u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstRoiSize: IppiSize,
                                   border: IppiBorderType,
                                   borderValue: *const Ipp8u,
                                   pSpec: *const IppiFilterBorderSpec,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_16u_C1R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp16u,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_16u_C3R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp16u,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_16u_C4R(pSrc: *const Ipp16u,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16u,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp16u,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_16s_C1R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp16s,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_16s_C3R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp16s,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_16s_C4R(pSrc: *const Ipp16s,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp16s,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp16s,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_32f_C1R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_32f_C3R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorder_32f_C4R(pSrc: *const Ipp32f,
                                    srcStep: ipp_ctypes::c_int,
                                    pDst: *mut Ipp32f,
                                    dstStep: ipp_ctypes::c_int,
                                    dstRoiSize: IppiSize,
                                    border: IppiBorderType,
                                    borderValue: *const Ipp32f,
                                    pSpec: *const IppiFilterBorderSpec,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiFilterBorderSetMode(hint: IppHintAlgorithm,
                                   offset: ipp_ctypes::c_int,
                                   pSpec: *mut IppiFilterBorderSpec)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageMode3x3_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      mode: ipp_ctypes::c_int,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageMode5x5_8u_C1R(pSrc: *const Ipp8u,
                                      srcStep: ipp_ctypes::c_int,
                                      pDst: *mut Ipp8u,
                                      dstStep: ipp_ctypes::c_int,
                                      dstRoiSize: IppiSize,
                                      mode: ipp_ctypes::c_int,
                                      borderType: IppiBorderType,
                                      borderValue: *const Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageMode5x5_8u16u_C1R(pSrc: *const Ipp8u,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mode: ipp_ctypes::c_int,
                                         borderType: IppiBorderType,
                                         borderValue: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageMode3x3_32f8u_C1R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mode: ipp_ctypes::c_int,
                                         borderType: IppiBorderType,
                                         borderValue: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageMode5x5_32f8u_C1R(pSrc: *const Ipp32f,
                                         srcStep: ipp_ctypes::c_int,
                                         pDst: *mut Ipp8u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         mode: ipp_ctypes::c_int,
                                         borderType: IppiBorderType,
                                         borderValue: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageMode5x5_32f16u_C1R(pSrc: *const Ipp32f,
                                          srcStep: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16u,
                                          dstStep: ipp_ctypes::c_int,
                                          dstRoiSize: IppiSize,
                                          mode: ipp_ctypes::c_int,
                                          borderType: IppiBorderType,
                                          borderValue: *const Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageHorizCorr_8u_C1R(pSrc1: *const Ipp8u,
                                        src1Step: ipp_ctypes::c_int,
                                        pSrc2: *const Ipp8u,
                                        src2Step: ipp_ctypes::c_int,
                                        pDst: *mut Ipp8u,
                                        dstStep: ipp_ctypes::c_int,
                                        dstRoiSize: IppiSize,
                                        horShift: ipp_ctypes::c_int,
                                        borderType: IppiBorderType,
                                        borderValue: *const Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiLBPImageHorizCorr_16u_C1R(pSrc1: *const Ipp16u,
                                         src1Step: ipp_ctypes::c_int,
                                         pSrc2: *const Ipp16u,
                                         src2Step: ipp_ctypes::c_int,
                                         pDst: *mut Ipp16u,
                                         dstStep: ipp_ctypes::c_int,
                                         dstRoiSize: IppiSize,
                                         horShift: ipp_ctypes::c_int,
                                         borderType: IppiBorderType,
                                         borderValue: *const Ipp16u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSADGetBufferSize(srcRoiSize: IppiSize, tplRoiSize: IppiSize,
                                dataType: IppDataType,
                                numChannels: ipp_ctypes::c_int,
                                shape: IppiROIShape,
                                pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiSAD_8u32s_C1RSfs(pSrc: *const Ipp8u,
                                srcStep: ipp_ctypes::c_int,
                                srcRoiSize: IppiSize, pTpl: *const Ipp8u,
                                tplStep: ipp_ctypes::c_int,
                                tplRoiSize: IppiSize, pDst: *mut Ipp32s,
                                dstStep: ipp_ctypes::c_int,
                                shape: IppiROIShape,
                                scaleFactor: ipp_ctypes::c_int,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSAD_16u32s_C1RSfs(pSrc: *const Ipp16u,
                                 srcStep: ipp_ctypes::c_int,
                                 srcRoiSize: IppiSize, pTpl: *const Ipp16u,
                                 tplStep: ipp_ctypes::c_int,
                                 tplRoiSize: IppiSize, pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 shape: IppiROIShape,
                                 scaleFactor: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSAD_16s32s_C1RSfs(pSrc: *const Ipp16s,
                                 srcStep: ipp_ctypes::c_int,
                                 srcRoiSize: IppiSize, pTpl: *const Ipp16s,
                                 tplStep: ipp_ctypes::c_int,
                                 tplRoiSize: IppiSize, pDst: *mut Ipp32s,
                                 dstStep: ipp_ctypes::c_int,
                                 shape: IppiROIShape,
                                 scaleFactor: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiSAD_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           srcRoiSize: IppiSize, pTpl: *const Ipp32f,
                           tplStep: ipp_ctypes::c_int, tplRoiSize: IppiSize,
                           pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                           shape: IppiROIShape, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorGetBufferSize(roiSize: IppiSize,
                                           mask: IppiMaskSize,
                                           dataType: IppDataType,
                                           numChannels: ipp_ctypes::c_int,
                                           pBufferSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_8u16s_C1R(pSrc: *const Ipp8u,
                                             srcStep: ipp_ctypes::c_int,
                                             pGx: *mut Ipp16s,
                                             gxStep: ipp_ctypes::c_int,
                                             pGy: *mut Ipp16s,
                                             gyStep: ipp_ctypes::c_int,
                                             pMag: *mut Ipp16s,
                                             magStep: ipp_ctypes::c_int,
                                             pAngle: *mut Ipp32f,
                                             angleStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             maskSize: IppiMaskSize,
                                             normType: IppNormType,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp8u,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_16u32f_C1R(pSrc: *const Ipp16u,
                                              srcStep: ipp_ctypes::c_int,
                                              pGx: *mut Ipp32f,
                                              gxStep: ipp_ctypes::c_int,
                                              pGy: *mut Ipp32f,
                                              gyStep: ipp_ctypes::c_int,
                                              pMag: *mut Ipp32f,
                                              magStep: ipp_ctypes::c_int,
                                              pAngle: *mut Ipp32f,
                                              angleStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              maskSize: IppiMaskSize,
                                              normType: IppNormType,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp16u,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_16s32f_C1R(pSrc: *const Ipp16s,
                                              srcStep: ipp_ctypes::c_int,
                                              pGx: *mut Ipp32f,
                                              gxStep: ipp_ctypes::c_int,
                                              pGy: *mut Ipp32f,
                                              gyStep: ipp_ctypes::c_int,
                                              pMag: *mut Ipp32f,
                                              magStep: ipp_ctypes::c_int,
                                              pAngle: *mut Ipp32f,
                                              angleStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              maskSize: IppiMaskSize,
                                              normType: IppNormType,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp16s,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_32f_C1R(pSrc: *const Ipp32f,
                                           srcStep: ipp_ctypes::c_int,
                                           pGx: *mut Ipp32f,
                                           gxStep: ipp_ctypes::c_int,
                                           pGy: *mut Ipp32f,
                                           gyStep: ipp_ctypes::c_int,
                                           pMag: *mut Ipp32f,
                                           magStep: ipp_ctypes::c_int,
                                           pAngle: *mut Ipp32f,
                                           angleStep: ipp_ctypes::c_int,
                                           dstRoiSize: IppiSize,
                                           maskSize: IppiMaskSize,
                                           normType: IppNormType,
                                           borderType: IppiBorderType,
                                           borderValue: Ipp32f,
                                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_8u16s_C1R(pSrc: *const Ipp8u,
                                              srcStep: ipp_ctypes::c_int,
                                              pGx: *mut Ipp16s,
                                              gxStep: ipp_ctypes::c_int,
                                              pGy: *mut Ipp16s,
                                              gyStep: ipp_ctypes::c_int,
                                              pMag: *mut Ipp16s,
                                              magStep: ipp_ctypes::c_int,
                                              pAngle: *mut Ipp32f,
                                              angleStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              maskSize: IppiMaskSize,
                                              normType: IppNormType,
                                              borderType: IppiBorderType,
                                              borderValue: Ipp8u,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_16u32f_C1R(pSrc: *const Ipp16u,
                                               srcStep: ipp_ctypes::c_int,
                                               pGx: *mut Ipp32f,
                                               gxStep: ipp_ctypes::c_int,
                                               pGy: *mut Ipp32f,
                                               gyStep: ipp_ctypes::c_int,
                                               pMag: *mut Ipp32f,
                                               magStep: ipp_ctypes::c_int,
                                               pAngle: *mut Ipp32f,
                                               angleStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               maskSize: IppiMaskSize,
                                               normType: IppNormType,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp16u,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_16s32f_C1R(pSrc: *const Ipp16s,
                                               srcStep: ipp_ctypes::c_int,
                                               pGx: *mut Ipp32f,
                                               gxStep: ipp_ctypes::c_int,
                                               pGy: *mut Ipp32f,
                                               gyStep: ipp_ctypes::c_int,
                                               pMag: *mut Ipp32f,
                                               magStep: ipp_ctypes::c_int,
                                               pAngle: *mut Ipp32f,
                                               angleStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               maskSize: IppiMaskSize,
                                               normType: IppNormType,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp16s,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_32f_C1R(pSrc: *const Ipp32f,
                                            srcStep: ipp_ctypes::c_int,
                                            pGx: *mut Ipp32f,
                                            gxStep: ipp_ctypes::c_int,
                                            pGy: *mut Ipp32f,
                                            gyStep: ipp_ctypes::c_int,
                                            pMag: *mut Ipp32f,
                                            magStep: ipp_ctypes::c_int,
                                            pAngle: *mut Ipp32f,
                                            angleStep: ipp_ctypes::c_int,
                                            dstRoiSize: IppiSize,
                                            maskSize: IppiMaskSize,
                                            normType: IppNormType,
                                            borderType: IppiBorderType,
                                            borderValue: Ipp32f,
                                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_8u16s_C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pGx: *mut Ipp16s,
                                               gxStep: ipp_ctypes::c_int,
                                               pGy: *mut Ipp16s,
                                               gyStep: ipp_ctypes::c_int,
                                               pMag: *mut Ipp16s,
                                               magStep: ipp_ctypes::c_int,
                                               pAngle: *mut Ipp32f,
                                               angleStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               maskSize: IppiMaskSize,
                                               normType: IppNormType,
                                               borderType: IppiBorderType,
                                               borderValue: Ipp8u,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_16u32f_C1R(pSrc: *const Ipp16u,
                                                srcStep: ipp_ctypes::c_int,
                                                pGx: *mut Ipp32f,
                                                gxStep: ipp_ctypes::c_int,
                                                pGy: *mut Ipp32f,
                                                gyStep: ipp_ctypes::c_int,
                                                pMag: *mut Ipp32f,
                                                magStep: ipp_ctypes::c_int,
                                                pAngle: *mut Ipp32f,
                                                angleStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                maskSize: IppiMaskSize,
                                                normType: IppNormType,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp16u,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_16s32f_C1R(pSrc: *const Ipp16s,
                                                srcStep: ipp_ctypes::c_int,
                                                pGx: *mut Ipp32f,
                                                gxStep: ipp_ctypes::c_int,
                                                pGy: *mut Ipp32f,
                                                gyStep: ipp_ctypes::c_int,
                                                pMag: *mut Ipp32f,
                                                magStep: ipp_ctypes::c_int,
                                                pAngle: *mut Ipp32f,
                                                angleStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                maskSize: IppiMaskSize,
                                                normType: IppNormType,
                                                borderType: IppiBorderType,
                                                borderValue: Ipp16s,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_32f_C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pGx: *mut Ipp32f,
                                             gxStep: ipp_ctypes::c_int,
                                             pGy: *mut Ipp32f,
                                             gyStep: ipp_ctypes::c_int,
                                             pMag: *mut Ipp32f,
                                             magStep: ipp_ctypes::c_int,
                                             pAngle: *mut Ipp32f,
                                             angleStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             maskSize: IppiMaskSize,
                                             normType: IppNormType,
                                             borderType: IppiBorderType,
                                             borderValue: Ipp32f,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_8u16s_C3C1R(pSrc: *const Ipp8u,
                                               srcStep: ipp_ctypes::c_int,
                                               pGx: *mut Ipp16s,
                                               gxStep: ipp_ctypes::c_int,
                                               pGy: *mut Ipp16s,
                                               gyStep: ipp_ctypes::c_int,
                                               pMag: *mut Ipp16s,
                                               magStep: ipp_ctypes::c_int,
                                               pAngle: *mut Ipp32f,
                                               angleStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               maskSize: IppiMaskSize,
                                               normType: IppNormType,
                                               borderType: IppiBorderType,
                                               borderValue: *const Ipp8u,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_16u32f_C3C1R(pSrc: *const Ipp16u,
                                                srcStep: ipp_ctypes::c_int,
                                                pGx: *mut Ipp32f,
                                                gxStep: ipp_ctypes::c_int,
                                                pGy: *mut Ipp32f,
                                                gyStep: ipp_ctypes::c_int,
                                                pMag: *mut Ipp32f,
                                                magStep: ipp_ctypes::c_int,
                                                pAngle: *mut Ipp32f,
                                                angleStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                maskSize: IppiMaskSize,
                                                normType: IppNormType,
                                                borderType: IppiBorderType,
                                                borderValue: *const Ipp16u,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_16s32f_C3C1R(pSrc: *const Ipp16s,
                                                srcStep: ipp_ctypes::c_int,
                                                pGx: *mut Ipp32f,
                                                gxStep: ipp_ctypes::c_int,
                                                pGy: *mut Ipp32f,
                                                gyStep: ipp_ctypes::c_int,
                                                pMag: *mut Ipp32f,
                                                magStep: ipp_ctypes::c_int,
                                                pAngle: *mut Ipp32f,
                                                angleStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                maskSize: IppiMaskSize,
                                                normType: IppNormType,
                                                borderType: IppiBorderType,
                                                borderValue: *const Ipp16s,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorSobel_32f_C3C1R(pSrc: *const Ipp32f,
                                             srcStep: ipp_ctypes::c_int,
                                             pGx: *mut Ipp32f,
                                             gxStep: ipp_ctypes::c_int,
                                             pGy: *mut Ipp32f,
                                             gyStep: ipp_ctypes::c_int,
                                             pMag: *mut Ipp32f,
                                             magStep: ipp_ctypes::c_int,
                                             pAngle: *mut Ipp32f,
                                             angleStep: ipp_ctypes::c_int,
                                             dstRoiSize: IppiSize,
                                             maskSize: IppiMaskSize,
                                             normType: IppNormType,
                                             borderType: IppiBorderType,
                                             borderValue: *const Ipp32f,
                                             pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_8u16s_C3C1R(pSrc: *const Ipp8u,
                                                srcStep: ipp_ctypes::c_int,
                                                pGx: *mut Ipp16s,
                                                gxStep: ipp_ctypes::c_int,
                                                pGy: *mut Ipp16s,
                                                gyStep: ipp_ctypes::c_int,
                                                pMag: *mut Ipp16s,
                                                magStep: ipp_ctypes::c_int,
                                                pAngle: *mut Ipp32f,
                                                angleStep: ipp_ctypes::c_int,
                                                dstRoiSize: IppiSize,
                                                maskSize: IppiMaskSize,
                                                normType: IppNormType,
                                                borderType: IppiBorderType,
                                                borderValue: *const Ipp8u,
                                                pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_16u32f_C3C1R(pSrc: *const Ipp16u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 pGx: *mut Ipp32f,
                                                 gxStep: ipp_ctypes::c_int,
                                                 pGy: *mut Ipp32f,
                                                 gyStep: ipp_ctypes::c_int,
                                                 pMag: *mut Ipp32f,
                                                 magStep: ipp_ctypes::c_int,
                                                 pAngle: *mut Ipp32f,
                                                 angleStep: ipp_ctypes::c_int,
                                                 dstRoiSize: IppiSize,
                                                 maskSize: IppiMaskSize,
                                                 normType: IppNormType,
                                                 borderType: IppiBorderType,
                                                 borderValue: *const Ipp16u,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_16s32f_C3C1R(pSrc: *const Ipp16s,
                                                 srcStep: ipp_ctypes::c_int,
                                                 pGx: *mut Ipp32f,
                                                 gxStep: ipp_ctypes::c_int,
                                                 pGy: *mut Ipp32f,
                                                 gyStep: ipp_ctypes::c_int,
                                                 pMag: *mut Ipp32f,
                                                 magStep: ipp_ctypes::c_int,
                                                 pAngle: *mut Ipp32f,
                                                 angleStep: ipp_ctypes::c_int,
                                                 dstRoiSize: IppiSize,
                                                 maskSize: IppiMaskSize,
                                                 normType: IppNormType,
                                                 borderType: IppiBorderType,
                                                 borderValue: *const Ipp16s,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorScharr_32f_C3C1R(pSrc: *const Ipp32f,
                                              srcStep: ipp_ctypes::c_int,
                                              pGx: *mut Ipp32f,
                                              gxStep: ipp_ctypes::c_int,
                                              pGy: *mut Ipp32f,
                                              gyStep: ipp_ctypes::c_int,
                                              pMag: *mut Ipp32f,
                                              magStep: ipp_ctypes::c_int,
                                              pAngle: *mut Ipp32f,
                                              angleStep: ipp_ctypes::c_int,
                                              dstRoiSize: IppiSize,
                                              maskSize: IppiMaskSize,
                                              normType: IppNormType,
                                              borderType: IppiBorderType,
                                              borderValue: *const Ipp32f,
                                              pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_8u16s_C3C1R(pSrc: *const Ipp8u,
                                                 srcStep: ipp_ctypes::c_int,
                                                 pGx: *mut Ipp16s,
                                                 gxStep: ipp_ctypes::c_int,
                                                 pGy: *mut Ipp16s,
                                                 gyStep: ipp_ctypes::c_int,
                                                 pMag: *mut Ipp16s,
                                                 magStep: ipp_ctypes::c_int,
                                                 pAngle: *mut Ipp32f,
                                                 angleStep: ipp_ctypes::c_int,
                                                 dstRoiSize: IppiSize,
                                                 maskSize: IppiMaskSize,
                                                 normType: IppNormType,
                                                 borderType: IppiBorderType,
                                                 borderValue: *const Ipp8u,
                                                 pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_16u32f_C3C1R(pSrc: *const Ipp16u,
                                                  srcStep: ipp_ctypes::c_int,
                                                  pGx: *mut Ipp32f,
                                                  gxStep: ipp_ctypes::c_int,
                                                  pGy: *mut Ipp32f,
                                                  gyStep: ipp_ctypes::c_int,
                                                  pMag: *mut Ipp32f,
                                                  magStep: ipp_ctypes::c_int,
                                                  pAngle: *mut Ipp32f,
                                                  angleStep:
                                                      ipp_ctypes::c_int,
                                                  dstRoiSize: IppiSize,
                                                  maskSize: IppiMaskSize,
                                                  normType: IppNormType,
                                                  borderType: IppiBorderType,
                                                  borderValue: *const Ipp16u,
                                                  pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_16s32f_C3C1R(pSrc: *const Ipp16s,
                                                  srcStep: ipp_ctypes::c_int,
                                                  pGx: *mut Ipp32f,
                                                  gxStep: ipp_ctypes::c_int,
                                                  pGy: *mut Ipp32f,
                                                  gyStep: ipp_ctypes::c_int,
                                                  pMag: *mut Ipp32f,
                                                  magStep: ipp_ctypes::c_int,
                                                  pAngle: *mut Ipp32f,
                                                  angleStep:
                                                      ipp_ctypes::c_int,
                                                  dstRoiSize: IppiSize,
                                                  maskSize: IppiMaskSize,
                                                  normType: IppNormType,
                                                  borderType: IppiBorderType,
                                                  borderValue: *const Ipp16s,
                                                  pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiGradientVectorPrewitt_32f_C3C1R(pSrc: *const Ipp32f,
                                               srcStep: ipp_ctypes::c_int,
                                               pGx: *mut Ipp32f,
                                               gxStep: ipp_ctypes::c_int,
                                               pGy: *mut Ipp32f,
                                               gyStep: ipp_ctypes::c_int,
                                               pMag: *mut Ipp32f,
                                               magStep: ipp_ctypes::c_int,
                                               pAngle: *mut Ipp32f,
                                               angleStep: ipp_ctypes::c_int,
                                               dstRoiSize: IppiSize,
                                               maskSize: IppiMaskSize,
                                               normType: IppNormType,
                                               borderType: IppiBorderType,
                                               borderValue: *const Ipp32f,
                                               pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHOGGetSize(pConfig: *const IppiHOGConfig,
                          pHOGSpecSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiHOGInit(pConfig: *const IppiHOGConfig,
                       pHOGSpec: *mut IppiHOGSpec) -> IppStatus;
}
extern "C" {
    pub fn ippiHOGGetBufferSize(pHOGSpec: *const IppiHOGSpec,
                                roiSize: IppiSize,
                                pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHOGGetDescriptorSize(pHOGSpec: *const IppiHOGSpec,
                                    pWinDescriptorSize:
                                        *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_8u32f_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pLocation: *const IppiPoint,
                             nLocations: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                             pHOGSpec: *const IppiHOGSpec,
                             borderID: IppiBorderType, borderValue: Ipp8u,
                             pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_16u32f_C1R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pLocation: *const IppiPoint,
                              nLocations: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, pHOGSpec: *const IppiHOGSpec,
                              borderID: IppiBorderType, borderValue: Ipp16u,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_16s32f_C1R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pLocation: *const IppiPoint,
                              nLocations: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, pHOGSpec: *const IppiHOGSpec,
                              borderID: IppiBorderType, borderValue: Ipp16s,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_32f_C1R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pLocation: *const IppiPoint,
                           nLocations: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                           pHOGSpec: *const IppiHOGSpec,
                           borderID: IppiBorderType, borderValue: Ipp32f,
                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_8u32f_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                             roiSize: IppiSize, pLocation: *const IppiPoint,
                             nLocations: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                             pHOGCtx: *const IppiHOGSpec,
                             borderID: IppiBorderType,
                             borderValue: *mut Ipp8u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_16u32f_C3R(pSrc: *const Ipp16u, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pLocation: *const IppiPoint,
                              nLocations: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, pHOGCtx: *const IppiHOGSpec,
                              borderID: IppiBorderType,
                              borderValue: *mut Ipp16u, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_16s32f_C3R(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              roiSize: IppiSize, pLocation: *const IppiPoint,
                              nLocations: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f, pHOGCtx: *const IppiHOGSpec,
                              borderID: IppiBorderType,
                              borderValue: *mut Ipp16s, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiHOG_32f_C3R(pSrc: *const Ipp32f, srcStep: ipp_ctypes::c_int,
                           roiSize: IppiSize, pLocation: *const IppiPoint,
                           nLocations: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                           pHOGCtx: *const IppiHOGSpec,
                           borderID: IppiBorderType, borderValue: *mut Ipp32f,
                           pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprResizeGetBufSize(srcVOI: IpprCuboid, dstVOI: IpprCuboid,
                                nChannel: ipp_ctypes::c_int,
                                interpolation: ipp_ctypes::c_int,
                                pSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprGetResizeCuboid(srcVOI: IpprCuboid,
                               pDstCuboid: *mut IpprCuboid, xFactor: f64,
                               yFactor: f64, zFactor: f64, xShift: f64,
                               yShift: f64, zShift: f64,
                               interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprResize_8u_C1V(pSrc: *const Ipp8u, srcVolume: IpprVolume,
                             srcStep: ipp_ctypes::c_int,
                             srcPlaneStep: ipp_ctypes::c_int,
                             srcVOI: IpprCuboid, pDst: *mut Ipp8u,
                             dstStep: ipp_ctypes::c_int,
                             dstPlaneStep: ipp_ctypes::c_int,
                             dstVOI: IpprCuboid, xFactor: f64, yFactor: f64,
                             zFactor: f64, xShift: f64, yShift: f64,
                             zShift: f64, interpolation: ipp_ctypes::c_int,
                             pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprResize_16u_C1V(pSrc: *const Ipp16u, srcVolume: IpprVolume,
                              srcStep: ipp_ctypes::c_int,
                              srcPlaneStep: ipp_ctypes::c_int,
                              srcVOI: IpprCuboid, pDst: *mut Ipp16u,
                              dstStep: ipp_ctypes::c_int,
                              dstPlaneStep: ipp_ctypes::c_int,
                              dstVOI: IpprCuboid, xFactor: f64, yFactor: f64,
                              zFactor: f64, xShift: f64, yShift: f64,
                              zShift: f64, interpolation: ipp_ctypes::c_int,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprResize_32f_C1V(pSrc: *const Ipp32f, srcVolume: IpprVolume,
                              srcStep: ipp_ctypes::c_int,
                              srcPlaneStep: ipp_ctypes::c_int,
                              srcVOI: IpprCuboid, pDst: *mut Ipp32f,
                              dstStep: ipp_ctypes::c_int,
                              dstPlaneStep: ipp_ctypes::c_int,
                              dstVOI: IpprCuboid, xFactor: f64, yFactor: f64,
                              zFactor: f64, xShift: f64, yShift: f64,
                              zShift: f64, interpolation: ipp_ctypes::c_int,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprResize_8u_C1PV(pSrc: *const *const Ipp8u,
                              srcVolume: IpprVolume,
                              srcStep: ipp_ctypes::c_int, srcVOI: IpprCuboid,
                              pDst: *const *const Ipp8u,
                              dstStep: ipp_ctypes::c_int, dstVOI: IpprCuboid,
                              xFactor: f64, yFactor: f64, zFactor: f64,
                              xShift: f64, yShift: f64, zShift: f64,
                              interpolation: ipp_ctypes::c_int,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprResize_16u_C1PV(pSrc: *const *const Ipp16u,
                               srcVolume: IpprVolume,
                               srcStep: ipp_ctypes::c_int, srcVOI: IpprCuboid,
                               pDst: *const *const Ipp16u,
                               dstStep: ipp_ctypes::c_int, dstVOI: IpprCuboid,
                               xFactor: f64, yFactor: f64, zFactor: f64,
                               xShift: f64, yShift: f64, zShift: f64,
                               interpolation: ipp_ctypes::c_int,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprResize_32f_C1PV(pSrc: *const *const Ipp32f,
                               srcVolume: IpprVolume,
                               srcStep: ipp_ctypes::c_int, srcVOI: IpprCuboid,
                               pDst: *const *const Ipp32f,
                               dstStep: ipp_ctypes::c_int, dstVOI: IpprCuboid,
                               xFactor: f64, yFactor: f64, zFactor: f64,
                               xShift: f64, yShift: f64, zShift: f64,
                               interpolation: ipp_ctypes::c_int,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffineGetBufSize(srcVolume: IpprVolume, srcVOI: IpprCuboid,
                                    dstVOI: IpprCuboid,
                                    coeffs: *mut [f64; 4usize],
                                    nChannel: ipp_ctypes::c_int,
                                    interpolation: ipp_ctypes::c_int,
                                    pSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffine_8u_C1PV(pSrc: *const *const Ipp8u,
                                  srcVolume: IpprVolume,
                                  srcStep: ipp_ctypes::c_int,
                                  srcVOI: IpprCuboid,
                                  pDst: *const *const Ipp8u,
                                  dstStep: ipp_ctypes::c_int,
                                  dstVOI: IpprCuboid,
                                  coeffs: *mut [f64; 4usize],
                                  interpolation: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffine_16u_C1PV(pSrc: *const *const Ipp16u,
                                   srcVolume: IpprVolume,
                                   srcStep: ipp_ctypes::c_int,
                                   srcVOI: IpprCuboid,
                                   pDst: *const *const Ipp16u,
                                   dstStep: ipp_ctypes::c_int,
                                   dstVOI: IpprCuboid,
                                   coeffs: *mut [f64; 4usize],
                                   interpolation: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffine_32f_C1PV(pSrc: *const *const Ipp32f,
                                   srcVolume: IpprVolume,
                                   srcStep: ipp_ctypes::c_int,
                                   srcVOI: IpprCuboid,
                                   pDst: *const *const Ipp32f,
                                   dstStep: ipp_ctypes::c_int,
                                   dstVOI: IpprCuboid,
                                   coeffs: *mut [f64; 4usize],
                                   interpolation: ipp_ctypes::c_int,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffine_8u_C1V(pSrc: *const Ipp8u, srcVolume: IpprVolume,
                                 srcStep: ipp_ctypes::c_int,
                                 srcPlaneStep: ipp_ctypes::c_int,
                                 srcVOI: IpprCuboid, pDst: *mut Ipp8u,
                                 dstStep: ipp_ctypes::c_int,
                                 dstPlaneStep: ipp_ctypes::c_int,
                                 dstVOI: IpprCuboid,
                                 coeffs: *mut [f64; 4usize],
                                 interpolation: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffine_16u_C1V(pSrc: *const Ipp16u, srcVolume: IpprVolume,
                                  srcStep: ipp_ctypes::c_int,
                                  srcPlaneStep: ipp_ctypes::c_int,
                                  srcVOI: IpprCuboid, pDst: *mut Ipp16u,
                                  dstStep: ipp_ctypes::c_int,
                                  dstPlaneStep: ipp_ctypes::c_int,
                                  dstVOI: IpprCuboid,
                                  coeffs: *mut [f64; 4usize],
                                  interpolation: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprWarpAffine_32f_C1V(pSrc: *const Ipp32f, srcVolume: IpprVolume,
                                  srcStep: ipp_ctypes::c_int,
                                  srcPlaneStep: ipp_ctypes::c_int,
                                  srcVOI: IpprCuboid, pDst: *mut Ipp32f,
                                  dstStep: ipp_ctypes::c_int,
                                  dstPlaneStep: ipp_ctypes::c_int,
                                  dstVOI: IpprCuboid,
                                  coeffs: *mut [f64; 4usize],
                                  interpolation: ipp_ctypes::c_int,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprRemap_8u_C1PV(pSrc: *const *const Ipp8u, srcVolume: IpprVolume,
                             srcStep: ipp_ctypes::c_int, srcVOI: IpprCuboid,
                             pxMap: *const *const Ipp32f,
                             pyMap: *const *const Ipp32f,
                             pzMap: *const *const Ipp32f,
                             mapStep: ipp_ctypes::c_int,
                             pDst: *const *const Ipp8u,
                             dstStep: ipp_ctypes::c_int,
                             dstVolume: IpprVolume,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprRemap_16u_C1PV(pSrc: *const *const Ipp16u,
                              srcVolume: IpprVolume,
                              srcStep: ipp_ctypes::c_int, srcVOI: IpprCuboid,
                              pxMap: *const *const Ipp32f,
                              pyMap: *const *const Ipp32f,
                              pzMap: *const *const Ipp32f,
                              mapStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp16u,
                              dstStep: ipp_ctypes::c_int,
                              dstVolume: IpprVolume,
                              interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprRemap_32f_C1PV(pSrc: *const *const Ipp32f,
                              srcVolume: IpprVolume,
                              srcStep: ipp_ctypes::c_int, srcVOI: IpprCuboid,
                              pxMap: *const *const Ipp32f,
                              pyMap: *const *const Ipp32f,
                              pzMap: *const *const Ipp32f,
                              mapStep: ipp_ctypes::c_int,
                              pDst: *const *const Ipp32f,
                              dstStep: ipp_ctypes::c_int,
                              dstVolume: IpprVolume,
                              interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprRemap_8u_C1V(pSrc: *const Ipp8u, srcVolume: IpprVolume,
                            srcStep: ipp_ctypes::c_int,
                            srcPlaneStep: ipp_ctypes::c_int,
                            srcVOI: IpprCuboid, pxMap: *const Ipp32f,
                            pyMap: *const Ipp32f, pzMap: *const Ipp32f,
                            mapStep: ipp_ctypes::c_int,
                            mapPlaneStep: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                            dstStep: ipp_ctypes::c_int,
                            dstPlaneStep: ipp_ctypes::c_int,
                            dstVolume: IpprVolume,
                            interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprRemap_16u_C1V(pSrc: *const Ipp16u, srcVolume: IpprVolume,
                             srcStep: ipp_ctypes::c_int,
                             srcPlaneStep: ipp_ctypes::c_int,
                             srcVOI: IpprCuboid, pxMap: *const Ipp32f,
                             pyMap: *const Ipp32f, pzMap: *const Ipp32f,
                             mapStep: ipp_ctypes::c_int,
                             mapPlaneStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp16u, dstStep: ipp_ctypes::c_int,
                             dstPlaneStep: ipp_ctypes::c_int,
                             dstVolume: IpprVolume,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprRemap_32f_C1V(pSrc: *const Ipp32f, srcVolume: IpprVolume,
                             srcStep: ipp_ctypes::c_int,
                             srcPlaneStep: ipp_ctypes::c_int,
                             srcVOI: IpprCuboid, pxMap: *const Ipp32f,
                             pyMap: *const Ipp32f, pzMap: *const Ipp32f,
                             mapStep: ipp_ctypes::c_int,
                             mapPlaneStep: ipp_ctypes::c_int,
                             pDst: *mut Ipp32f, dstStep: ipp_ctypes::c_int,
                             dstPlaneStep: ipp_ctypes::c_int,
                             dstVolume: IpprVolume,
                             interpolation: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprFilterGetBufSize(dstVolume: IpprVolume,
                                kernelVolume: IpprVolume,
                                nChannel: ipp_ctypes::c_int,
                                pSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ipprFilter_16s_C1PV(pSrc: *const *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               pDst: *mut *const Ipp16s,
                               dstStep: ipp_ctypes::c_int,
                               dstVolume: IpprVolume, pKernel: *const Ipp32s,
                               kernelVolume: IpprVolume, anchor: IpprPoint,
                               divisor: ipp_ctypes::c_int,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ipprFilter_16s_C1V(pSrc: *const Ipp16s, srcStep: ipp_ctypes::c_int,
                              srcPlaneStep: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s, dstStep: ipp_ctypes::c_int,
                              dstPlaneStep: ipp_ctypes::c_int,
                              dstVolume: IpprVolume, pKernel: *const Ipp32s,
                              kernelVolume: IpprVolume, anchor: IpprPoint,
                              divisor: ipp_ctypes::c_int, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_8u_C1R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp64f, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_8u_C3R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp64f, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_8u_C4R(pSrc: *const Ipp8u, srcStep: ipp_ctypes::c_int,
                              value: *const Ipp64f, pDst: *mut Ipp8u,
                              dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                              hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16u_C1R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16u_C3R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16u_C4R(pSrc: *const Ipp16u,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp16u,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16s_C1R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16s_C3R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16s_C4R(pSrc: *const Ipp16s,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp16s,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_32f_C1R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_32f_C3R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_32f_C4R(pSrc: *const Ipp32f,
                               srcStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, pDst: *mut Ipp32f,
                               dstStep: ipp_ctypes::c_int, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_8u_C1IR(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_8u_C3IR(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_8u_C4IR(pSrcDst: *mut Ipp8u,
                               srcDstStep: ipp_ctypes::c_int,
                               value: *const Ipp64f, roiSize: IppiSize,
                               hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16u_C1IR(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16u_C3IR(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16u_C4IR(pSrcDst: *mut Ipp16u,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16s_C1IR(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16s_C3IR(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_16s_C4IR(pSrcDst: *mut Ipp16s,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_32f_C1IR(pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_32f_C3IR(pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippiMulC64f_32f_C4IR(pSrcDst: *mut Ipp32f,
                                srcDstStep: ipp_ctypes::c_int,
                                value: *const Ipp64f, roiSize: IppiSize,
                                hint: IppHintAlgorithm, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMalloc_8u_L(len: IppSizeL) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippsMalloc_16u_L(len: IppSizeL) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippsMalloc_32u_L(len: IppSizeL) -> *mut Ipp32u;
}
extern "C" {
    pub fn ippsMalloc_8s_L(len: IppSizeL) -> *mut Ipp8s;
}
extern "C" {
    pub fn ippsMalloc_16s_L(len: IppSizeL) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippsMalloc_32s_L(len: IppSizeL) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippsMalloc_64s_L(len: IppSizeL) -> *mut Ipp64s;
}
extern "C" {
    pub fn ippsMalloc_32f_L(len: IppSizeL) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippsMalloc_64f_L(len: IppSizeL) -> *mut Ipp64f;
}
extern "C" {
    pub fn ippsMalloc_8sc_L(len: IppSizeL) -> *mut Ipp8sc;
}
extern "C" {
    pub fn ippsMalloc_16sc_L(len: IppSizeL) -> *mut Ipp16sc;
}
extern "C" {
    pub fn ippsMalloc_32sc_L(len: IppSizeL) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippsMalloc_64sc_L(len: IppSizeL) -> *mut Ipp64sc;
}
extern "C" {
    pub fn ippsMalloc_32fc_L(len: IppSizeL) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippsMalloc_64fc_L(len: IppSizeL) -> *mut Ipp64fc;
}
extern "C" {
    pub fn ippsSortRadixGetBufferSize_L(len: IppSizeL, dataType: IppDataType,
                                        pBufferSize: *mut IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexGetBufferSize_L(len: IppSizeL,
                                             dataType: IppDataType,
                                             pBufferSize: *mut IppSizeL)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_32s_I_L(pSrcDst: *mut Ipp32s, len: IppSizeL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_64s_I_L(pSrcDst: *mut Ipp64s, len: IppSizeL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_64u_I_L(pSrcDst: *mut Ipp64u, len: IppSizeL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_32f_I_L(pSrcDst: *mut Ipp32f, len: IppSizeL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_64f_I_L(pSrcDst: *mut Ipp64f, len: IppSizeL,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_32s_I_L(pSrcDst: *mut Ipp32s, len: IppSizeL,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_64s_I_L(pSrcDst: *mut Ipp64s, len: IppSizeL,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_64u_I_L(pSrcDst: *mut Ipp64u, len: IppSizeL,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_32f_I_L(pSrcDst: *mut Ipp32f, len: IppSizeL,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_64f_I_L(pSrcDst: *mut Ipp64f, len: IppSizeL,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_64s_L(pSrc: *const Ipp64s,
                                          srcStrideBytes: IppSizeL,
                                          pDstIndx: *mut IppSizeL,
                                          len: IppSizeL, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_64u_L(pSrc: *const Ipp64u,
                                          srcStrideBytes: IppSizeL,
                                          pDstIndx: *mut IppSizeL,
                                          len: IppSizeL, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_64s_L(pSrc: *const Ipp64s,
                                           srcStrideBytes: IppSizeL,
                                           pDstIndx: *mut IppSizeL,
                                           len: IppSizeL, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_64u_L(pSrc: *const Ipp64u,
                                           srcStrideBytes: IppSizeL,
                                           pDstIndx: *mut IppSizeL,
                                           len: IppSizeL, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippsMalloc_8u(len: ipp_ctypes::c_int) -> *mut Ipp8u;
}
extern "C" {
    pub fn ippsMalloc_16u(len: ipp_ctypes::c_int) -> *mut Ipp16u;
}
extern "C" {
    pub fn ippsMalloc_32u(len: ipp_ctypes::c_int) -> *mut Ipp32u;
}
extern "C" {
    pub fn ippsMalloc_8s(len: ipp_ctypes::c_int) -> *mut Ipp8s;
}
extern "C" {
    pub fn ippsMalloc_16s(len: ipp_ctypes::c_int) -> *mut Ipp16s;
}
extern "C" {
    pub fn ippsMalloc_32s(len: ipp_ctypes::c_int) -> *mut Ipp32s;
}
extern "C" {
    pub fn ippsMalloc_64s(len: ipp_ctypes::c_int) -> *mut Ipp64s;
}
extern "C" {
    pub fn ippsMalloc_32f(len: ipp_ctypes::c_int) -> *mut Ipp32f;
}
extern "C" {
    pub fn ippsMalloc_64f(len: ipp_ctypes::c_int) -> *mut Ipp64f;
}
extern "C" {
    pub fn ippsMalloc_8sc(len: ipp_ctypes::c_int) -> *mut Ipp8sc;
}
extern "C" {
    pub fn ippsMalloc_16sc(len: ipp_ctypes::c_int) -> *mut Ipp16sc;
}
extern "C" {
    pub fn ippsMalloc_32sc(len: ipp_ctypes::c_int) -> *mut Ipp32sc;
}
extern "C" {
    pub fn ippsMalloc_64sc(len: ipp_ctypes::c_int) -> *mut Ipp64sc;
}
extern "C" {
    pub fn ippsMalloc_32fc(len: ipp_ctypes::c_int) -> *mut Ipp32fc;
}
extern "C" {
    pub fn ippsMalloc_64fc(len: ipp_ctypes::c_int) -> *mut Ipp64fc;
}
extern "C" {
    pub fn ippsFree(ptr: *mut ipp_ctypes::c_void);
}
extern "C" {
    pub fn ippsCopy_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_32sc(pSrc: *const Ipp32sc, pDst: *mut Ipp32sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_64s(pSrc: *const Ipp64s, pDst: *mut Ipp64s,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopy_64sc(pSrc: *const Ipp64sc, pDst: *mut Ipp64sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopyLE_1u(pSrc: *const Ipp8u, srcBitOffset: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, dstBitOffset: ipp_ctypes::c_int,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCopyBE_1u(pSrc: *const Ipp8u, srcBitOffset: ipp_ctypes::c_int,
                         pDst: *mut Ipp8u, dstBitOffset: ipp_ctypes::c_int,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_32sc(pSrc: *const Ipp32sc, pDst: *mut Ipp32sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_64s(pSrc: *const Ipp64s, pDst: *mut Ipp64s,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMove_64sc(pSrc: *const Ipp64sc, pDst: *mut Ipp64sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSet_8u(val: Ipp8u, pDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSet_16s(val: Ipp16s, pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSet_16sc(val: Ipp16sc, pDst: *mut Ipp16sc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSet_32s(val: Ipp32s, pDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSet_32sc(val: Ipp32sc, pDst: *mut Ipp32sc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSet_32f(val: Ipp32f, pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSet_32fc(val: Ipp32fc, pDst: *mut Ipp32fc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSet_64s(val: Ipp64s, pDst: *mut Ipp64s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSet_64sc(val: Ipp64sc, pDst: *mut Ipp64sc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSet_64f(val: Ipp64f, pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSet_64fc(val: Ipp64fc, pDst: *mut Ipp64fc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsZero_8u(pDst: *mut Ipp8u, len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsZero_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_16sc(pDst: *mut Ipp16sc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_32fc(pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_64fc(pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_32s(pDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_32sc(pDst: *mut Ipp32sc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_64s(pDst: *mut Ipp64s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZero_64sc(pDst: *mut Ipp64sc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTone_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                        magn: Ipp16s, rFreq: Ipp32f, pPhase: *mut Ipp32f,
                        hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsTone_16sc(pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                         magn: Ipp16s, rFreq: Ipp32f, pPhase: *mut Ipp32f,
                         hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsTone_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                        magn: Ipp32f, rFreq: Ipp32f, pPhase: *mut Ipp32f,
                        hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsTone_32fc(pDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                         magn: Ipp32f, rFreq: Ipp32f, pPhase: *mut Ipp32f,
                         hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsTone_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                        magn: Ipp64f, rFreq: Ipp64f, pPhase: *mut Ipp64f,
                        hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsTone_64fc(pDst: *mut Ipp64fc, len: ipp_ctypes::c_int,
                         magn: Ipp64f, rFreq: Ipp64f, pPhase: *mut Ipp64f,
                         hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsTriangle_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                            magn: Ipp64f, rFreq: Ipp64f, asym: Ipp64f,
                            pPhase: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsTriangle_64fc(pDst: *mut Ipp64fc, len: ipp_ctypes::c_int,
                             magn: Ipp64f, rFreq: Ipp64f, asym: Ipp64f,
                             pPhase: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsTriangle_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                            magn: Ipp32f, rFreq: Ipp32f, asym: Ipp32f,
                            pPhase: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsTriangle_32fc(pDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                             magn: Ipp32f, rFreq: Ipp32f, asym: Ipp32f,
                             pPhase: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsTriangle_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            magn: Ipp16s, rFreq: Ipp32f, asym: Ipp32f,
                            pPhase: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsTriangle_16sc(pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                             magn: Ipp16s, rFreq: Ipp32f, asym: Ipp32f,
                             pPhase: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniform_8u(pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                              pRandUniState: *mut IppsRandUniState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniform_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               pRandUniState: *mut IppsRandUniState_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniform_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                               pRandUniState: *mut IppsRandUniState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniform_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                               pRandUniState: *mut IppsRandUniState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandGauss_8u(pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                            pRandGaussState: *mut IppsRandGaussState_8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandGauss_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                             pRandGaussState: *mut IppsRandGaussState_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandGauss_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                             pRandGaussState: *mut IppsRandGaussState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandGauss_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                             pRandGaussState: *mut IppsRandGaussState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussGetSize_8u(pRandGaussStateSize:
                                       *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussGetSize_16s(pRandGaussStateSize:
                                        *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussGetSize_32f(pRandGaussStateSize:
                                        *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussGetSize_64f(pRandGaussStateSize:
                                        *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussInit_8u(pRandGaussState: *mut IppsRandGaussState_8u,
                                mean: Ipp8u, stdDev: Ipp8u,
                                seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussInit_16s(pRandGaussState: *mut IppsRandGaussState_16s,
                                 mean: Ipp16s, stdDev: Ipp16s,
                                 seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussInit_32f(pRandGaussState: *mut IppsRandGaussState_32f,
                                 mean: Ipp32f, stdDev: Ipp32f,
                                 seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandGaussInit_64f(pRandGaussState: *mut IppsRandGaussState_64f,
                                 mean: Ipp64f, stdDev: Ipp64f,
                                 seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformGetSize_8u(pRandUniformStateSize:
                                         *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformGetSize_16s(pRandUniformStateSize:
                                          *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformGetSize_32f(pRandUniformStateSize:
                                          *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformGetSize_64f(pRandUniformStateSize:
                                          *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformInit_8u(pRandUniState: *mut IppsRandUniState_8u,
                                  low: Ipp8u, high: Ipp8u,
                                  seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformInit_16s(pRandUniState: *mut IppsRandUniState_16s,
                                   low: Ipp16s, high: Ipp16s,
                                   seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformInit_32f(pRandUniState: *mut IppsRandUniState_32f,
                                   low: Ipp32f, high: Ipp32f,
                                   seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsRandUniformInit_64f(pRandUniState: *mut IppsRandUniState_64f,
                                   low: Ipp64f, high: Ipp64f,
                                   seed: ipp_ctypes::c_uint) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorJaehne_8u(pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                               magn: Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorJaehne_16u(pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                                magn: Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorJaehne_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                                magn: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorJaehne_32s(pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                                magn: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorJaehne_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                                magn: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorJaehne_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                                magn: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_8u(pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                              offset: Ipp32f, slope: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_16u(pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                               offset: Ipp32f, slope: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_16s(pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               offset: Ipp32f, slope: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_32u(pDst: *mut Ipp32u, len: ipp_ctypes::c_int,
                               offset: Ipp64f, slope: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_32s(pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                               offset: Ipp64f, slope: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_32f(pDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                               offset: Ipp32f, slope: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsVectorSlope_64f(pDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                               offset: Ipp64f, slope: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsAndC_8u_I(val: Ipp8u, pSrcDst: *mut Ipp8u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAndC_8u(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAndC_16u_I(val: Ipp16u, pSrcDst: *mut Ipp16u,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAndC_16u(pSrc: *const Ipp16u, val: Ipp16u, pDst: *mut Ipp16u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAndC_32u_I(val: Ipp32u, pSrcDst: *mut Ipp32u,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAndC_32u(pSrc: *const Ipp32u, val: Ipp32u, pDst: *mut Ipp32u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAnd_8u_I(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAnd_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                      pDst: *mut Ipp8u, len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAnd_16u_I(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAnd_16u(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                       pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAnd_32u_I(pSrc: *const Ipp32u, pSrcDst: *mut Ipp32u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAnd_32u(pSrc1: *const Ipp32u, pSrc2: *const Ipp32u,
                       pDst: *mut Ipp32u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsOrC_8u_I(val: Ipp8u, pSrcDst: *mut Ipp8u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOrC_8u(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOrC_16u_I(val: Ipp16u, pSrcDst: *mut Ipp16u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOrC_16u(pSrc: *const Ipp16u, val: Ipp16u, pDst: *mut Ipp16u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOrC_32u_I(val: Ipp32u, pSrcDst: *mut Ipp32u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOrC_32u(pSrc: *const Ipp32u, val: Ipp32u, pDst: *mut Ipp32u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOr_8u_I(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOr_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                     pDst: *mut Ipp8u, len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOr_16u_I(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOr_16u(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                      pDst: *mut Ipp16u, len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOr_32u_I(pSrc: *const Ipp32u, pSrcDst: *mut Ipp32u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsOr_32u(pSrc1: *const Ipp32u, pSrc2: *const Ipp32u,
                      pDst: *mut Ipp32u, len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXorC_8u_I(val: Ipp8u, pSrcDst: *mut Ipp8u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXorC_8u(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXorC_16u_I(val: Ipp16u, pSrcDst: *mut Ipp16u,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXorC_16u(pSrc: *const Ipp16u, val: Ipp16u, pDst: *mut Ipp16u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXorC_32u_I(val: Ipp32u, pSrcDst: *mut Ipp32u,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXorC_32u(pSrc: *const Ipp32u, val: Ipp32u, pDst: *mut Ipp32u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXor_8u_I(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXor_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                      pDst: *mut Ipp8u, len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXor_16u_I(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXor_16u(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                       pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsXor_32u_I(pSrc: *const Ipp32u, pSrcDst: *mut Ipp32u,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsXor_32u(pSrc1: *const Ipp32u, pSrc2: *const Ipp32u,
                       pDst: *mut Ipp32u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNot_8u_I(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNot_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsNot_16u_I(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNot_16u(pSrc: *const Ipp16u, pDst: *mut Ipp16u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsNot_32u_I(pSrcDst: *mut Ipp32u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNot_32u(pSrc: *const Ipp32u, pDst: *mut Ipp32u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_8u_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_8u(pSrc: *const Ipp8u, val: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_16u_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_16u(pSrc: *const Ipp16u, val: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_16s_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_16s(pSrc: *const Ipp16s, val: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_32s_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp32s,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLShiftC_32s(pSrc: *const Ipp32s, val: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_8u_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_8u(pSrc: *const Ipp8u, val: ipp_ctypes::c_int,
                          pDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_16u_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_16u(pSrc: *const Ipp16u, val: ipp_ctypes::c_int,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_16s_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_16s(pSrc: *const Ipp16s, val: ipp_ctypes::c_int,
                           pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_32s_I(val: ipp_ctypes::c_int, pSrcDst: *mut Ipp32s,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRShiftC_32s(pSrc: *const Ipp32s, val: ipp_ctypes::c_int,
                           pDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_8u_ISfs(val: Ipp8u, pSrcDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_8u_Sfs(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16s_I(val: Ipp16s, pSrcDst: *mut Ipp16s,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16s_ISfs(val: Ipp16s, pSrcDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16s_Sfs(pSrc: *const Ipp16s, val: Ipp16s,
                            pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16sc_ISfs(val: Ipp16sc, pSrcDst: *mut Ipp16sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16sc_Sfs(pSrc: *const Ipp16sc, val: Ipp16sc,
                             pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16u_ISfs(val: Ipp16u, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_16u_Sfs(pSrc: *const Ipp16u, val: Ipp16u,
                            pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32s_ISfs(val: Ipp32s, pSrcDst: *mut Ipp32s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32s_Sfs(pSrc: *const Ipp32s, val: Ipp32s,
                            pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32sc_ISfs(val: Ipp32sc, pSrcDst: *mut Ipp32sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32sc_Sfs(pSrc: *const Ipp32sc, val: Ipp32sc,
                             pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_64u_Sfs(pSrc: *const Ipp64u, val: Ipp64u,
                            pDst: *mut Ipp64u, len: Ipp32u,
                            scaleFactor: ipp_ctypes::c_int,
                            rndMode: IppRoundMode) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_64s_Sfs(pSrc: *const Ipp64s, val: Ipp64s,
                            pDst: *mut Ipp64s, len: Ipp32u,
                            scaleFactor: ipp_ctypes::c_int,
                            rndMode: IppRoundMode) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32f_I(val: Ipp32f, pSrcDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32f(pSrc: *const Ipp32f, val: Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32fc_I(val: Ipp32fc, pSrcDst: *mut Ipp32fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_32fc(pSrc: *const Ipp32fc, val: Ipp32fc,
                         pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_64f_I(val: Ipp64f, pSrcDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_64f(pSrc: *const Ipp64f, val: Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_64fc_I(val: Ipp64fc, pSrcDst: *mut Ipp64fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAddC_64fc(pSrc: *const Ipp64fc, val: Ipp64fc,
                         pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_8u_ISfs(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_8u_Sfs(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                          pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_8u16u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                         pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16s_I(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16s(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                       pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16s_ISfs(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                           pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16s32s_I(pSrc: *const Ipp16s, pSrcDst: *mut Ipp32s,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                          pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16sc_ISfs(pSrc: *const Ipp16sc, pSrcDst: *mut Ipp16sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16sc_Sfs(pSrc1: *const Ipp16sc, pSrc2: *const Ipp16sc,
                            pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16u_ISfs(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16u_Sfs(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_16u(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                       pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32s_ISfs(pSrc: *const Ipp32s, pSrcDst: *mut Ipp32s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32s_Sfs(pSrc1: *const Ipp32s, pSrc2: *const Ipp32s,
                           pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32sc_ISfs(pSrc: *const Ipp32sc, pSrcDst: *mut Ipp32sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32sc_Sfs(pSrc1: *const Ipp32sc, pSrc2: *const Ipp32sc,
                            pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32u(pSrc1: *const Ipp32u, pSrc2: *const Ipp32u,
                       pDst: *mut Ipp32u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64s_Sfs(pSrc1: *const Ipp64s, pSrc2: *const Ipp64s,
                           pDst: *mut Ipp64s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                       pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32fc_I(pSrc: *const Ipp32fc, pSrcDst: *mut Ipp32fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                        pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                       pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64fc_I(pSrc: *const Ipp64fc, pSrcDst: *mut Ipp64fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64fc(pSrc1: *const Ipp64fc, pSrc2: *const Ipp64fc,
                        pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProductC_32f(pSrc: *const Ipp32f, val: Ipp32f,
                               pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                                  pSrcDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_16s32s_Sfs(pSrc1: *const Ipp16s,
                                     pSrc2: *const Ipp16s,
                                     pSrcDst: *mut Ipp32s,
                                     len: ipp_ctypes::c_int,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_32s_Sfs(pSrc1: *const Ipp32s, pSrc2: *const Ipp32s,
                                  pSrcDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                              pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_32fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                               pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                              pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAddProduct_64fc(pSrc1: *const Ipp64fc, pSrc2: *const Ipp64fc,
                               pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_8u_ISfs(val: Ipp8u, pSrcDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_8u_Sfs(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16s_I(val: Ipp16s, pSrcDst: *mut Ipp16s,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16s_ISfs(val: Ipp16s, pSrcDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16s_Sfs(pSrc: *const Ipp16s, val: Ipp16s,
                            pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16sc_ISfs(val: Ipp16sc, pSrcDst: *mut Ipp16sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16sc_Sfs(pSrc: *const Ipp16sc, val: Ipp16sc,
                             pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16u_ISfs(val: Ipp16u, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_16u_Sfs(pSrc: *const Ipp16u, val: Ipp16u,
                            pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32s_ISfs(val: Ipp32s, pSrcDst: *mut Ipp32s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32s_Sfs(pSrc: *const Ipp32s, val: Ipp32s,
                            pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32sc_ISfs(val: Ipp32sc, pSrcDst: *mut Ipp32sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32sc_Sfs(pSrc: *const Ipp32sc, val: Ipp32sc,
                             pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_64s_ISfs(val: Ipp64s, pSrcDst: *mut Ipp64s, len: Ipp32u,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32f_I(val: Ipp32f, pSrcDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32f(pSrc: *const Ipp32f, val: Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32fc_I(val: Ipp32fc, pSrcDst: *mut Ipp32fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32fc(pSrc: *const Ipp32fc, val: Ipp32fc,
                         pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_32f16s_Sfs(pSrc: *const Ipp32f, val: Ipp32f,
                               pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_Low_32f16s(pSrc: *const Ipp32f, val: Ipp32f,
                               pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_64f_I(val: Ipp64f, pSrcDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_64f(pSrc: *const Ipp64f, val: Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_64fc_I(val: Ipp64fc, pSrcDst: *mut Ipp64fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_64fc(pSrc: *const Ipp64fc, val: Ipp64fc,
                         pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulC_64f64s_ISfs(val: Ipp64f, pSrcDst: *mut Ipp64s,
                                len: Ipp32u, scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_8u_ISfs(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_8u_Sfs(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                          pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_8u16u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                         pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16s_I(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16s(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                       pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16s_ISfs(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                           pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16sc_ISfs(pSrc: *const Ipp16sc, pSrcDst: *mut Ipp16sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16sc_Sfs(pSrc1: *const Ipp16sc, pSrc2: *const Ipp16sc,
                            pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16s32s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                              pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                          pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16u_ISfs(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16u_Sfs(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_16u16s_Sfs(pSrc1: *const Ipp16u, pSrc2: *const Ipp16s,
                              pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32s_ISfs(pSrc: *const Ipp32s, pSrcDst: *mut Ipp32s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32s_Sfs(pSrc1: *const Ipp32s, pSrc2: *const Ipp32s,
                           pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32sc_ISfs(pSrc: *const Ipp32sc, pSrcDst: *mut Ipp32sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32sc_Sfs(pSrc1: *const Ipp32sc, pSrc2: *const Ipp32sc,
                            pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                       pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32fc_I(pSrc: *const Ipp32fc, pSrcDst: *mut Ipp32fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                        pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32f32fc_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32fc,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32f32fc(pSrc1: *const Ipp32f, pSrc2: *const Ipp32fc,
                           pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                       pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64fc_I(pSrc: *const Ipp64fc, pSrcDst: *mut Ipp64fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64fc(pSrc1: *const Ipp64fc, pSrc2: *const Ipp64fc,
                        pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_8u_ISfs(val: Ipp8u, pSrcDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_8u_Sfs(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16s_I(val: Ipp16s, pSrcDst: *mut Ipp16s,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16s_ISfs(val: Ipp16s, pSrcDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16s_Sfs(pSrc: *const Ipp16s, val: Ipp16s,
                            pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16sc_ISfs(val: Ipp16sc, pSrcDst: *mut Ipp16sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16sc_Sfs(pSrc: *const Ipp16sc, val: Ipp16sc,
                             pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16u_ISfs(val: Ipp16u, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_16u_Sfs(pSrc: *const Ipp16u, val: Ipp16u,
                            pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32s_ISfs(val: Ipp32s, pSrcDst: *mut Ipp32s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32s_Sfs(pSrc: *const Ipp32s, val: Ipp32s,
                            pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32sc_ISfs(val: Ipp32sc, pSrcDst: *mut Ipp32sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32sc_Sfs(pSrc: *const Ipp32sc, val: Ipp32sc,
                             pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32f_I(val: Ipp32f, pSrcDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32f(pSrc: *const Ipp32f, val: Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32fc_I(val: Ipp32fc, pSrcDst: *mut Ipp32fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_32fc(pSrc: *const Ipp32fc, val: Ipp32fc,
                         pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_64f_I(val: Ipp64f, pSrcDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_64f(pSrc: *const Ipp64f, val: Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_64fc_I(val: Ipp64fc, pSrcDst: *mut Ipp64fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubC_64fc(pSrc: *const Ipp64fc, val: Ipp64fc,
                         pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_8u_ISfs(val: Ipp8u, pSrcDst: *mut Ipp8u,
                               len: ipp_ctypes::c_int,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_8u_Sfs(pSrc: *const Ipp8u, val: Ipp8u,
                              pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_16s_ISfs(val: Ipp16s, pSrcDst: *mut Ipp16s,
                                len: ipp_ctypes::c_int,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_16s_Sfs(pSrc: *const Ipp16s, val: Ipp16s,
                               pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_16sc_ISfs(val: Ipp16sc, pSrcDst: *mut Ipp16sc,
                                 len: ipp_ctypes::c_int,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_16sc_Sfs(pSrc: *const Ipp16sc, val: Ipp16sc,
                                pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_16u_ISfs(val: Ipp16u, pSrcDst: *mut Ipp16u,
                                len: ipp_ctypes::c_int,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_16u_Sfs(pSrc: *const Ipp16u, val: Ipp16u,
                               pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32s_ISfs(val: Ipp32s, pSrcDst: *mut Ipp32s,
                                len: ipp_ctypes::c_int,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32s_Sfs(pSrc: *const Ipp32s, val: Ipp32s,
                               pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32sc_ISfs(val: Ipp32sc, pSrcDst: *mut Ipp32sc,
                                 len: ipp_ctypes::c_int,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32sc_Sfs(pSrc: *const Ipp32sc, val: Ipp32sc,
                                pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32f_I(val: Ipp32f, pSrcDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32f(pSrc: *const Ipp32f, val: Ipp32f,
                           pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32fc_I(val: Ipp32fc, pSrcDst: *mut Ipp32fc,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_32fc(pSrc: *const Ipp32fc, val: Ipp32fc,
                            pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_64f_I(val: Ipp64f, pSrcDst: *mut Ipp64f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_64f(pSrc: *const Ipp64f, val: Ipp64f,
                           pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_64fc_I(val: Ipp64fc, pSrcDst: *mut Ipp64fc,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSubCRev_64fc(pSrc: *const Ipp64fc, val: Ipp64fc,
                            pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSub_8u_ISfs(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_8u_Sfs(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                          pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16s_I(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16s(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                       pDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16s_ISfs(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                           pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16sc_ISfs(pSrc: *const Ipp16sc, pSrcDst: *mut Ipp16sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16sc_Sfs(pSrc1: *const Ipp16sc, pSrc2: *const Ipp16sc,
                            pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                          pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16u_ISfs(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_16u_Sfs(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32s_ISfs(pSrc: *const Ipp32s, pSrcDst: *mut Ipp32s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32s_Sfs(pSrc1: *const Ipp32s, pSrc2: *const Ipp32s,
                           pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32sc_ISfs(pSrc: *const Ipp32sc, pSrcDst: *mut Ipp32sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32sc_Sfs(pSrc1: *const Ipp32sc, pSrc2: *const Ipp32sc,
                            pDst: *mut Ipp32sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                       pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32fc_I(pSrc: *const Ipp32fc, pSrcDst: *mut Ipp32fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                        pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSub_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                       pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSub_64fc_I(pSrc: *const Ipp64fc, pSrcDst: *mut Ipp64fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_64fc(pSrc1: *const Ipp64fc, pSrc2: *const Ipp64fc,
                        pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_8u_ISfs(val: Ipp8u, pSrcDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_8u_Sfs(pSrc: *const Ipp8u, val: Ipp8u, pDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_16s_ISfs(val: Ipp16s, pSrcDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_16s_Sfs(pSrc: *const Ipp16s, val: Ipp16s,
                            pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_16sc_ISfs(val: Ipp16sc, pSrcDst: *mut Ipp16sc,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_16sc_Sfs(pSrc: *const Ipp16sc, val: Ipp16sc,
                             pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_16u_ISfs(val: Ipp16u, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_16u_Sfs(pSrc: *const Ipp16u, val: Ipp16u,
                            pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_64s_ISfs(val: Ipp64s, pSrcDst: *mut Ipp64s, len: Ipp32u,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_32f_I(val: Ipp32f, pSrcDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_32f(pSrc: *const Ipp32f, val: Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_32fc_I(val: Ipp32fc, pSrcDst: *mut Ipp32fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_32fc(pSrc: *const Ipp32fc, val: Ipp32fc,
                         pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_64f_I(val: Ipp64f, pSrcDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_64f(pSrc: *const Ipp64f, val: Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_64fc_I(val: Ipp64fc, pSrcDst: *mut Ipp64fc,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivC_64fc(pSrc: *const Ipp64fc, val: Ipp64fc,
                         pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDivCRev_16u_I(val: Ipp16u, pSrcDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivCRev_16u(pSrc: *const Ipp16u, val: Ipp16u,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDivCRev_32f_I(val: Ipp32f, pSrcDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDivCRev_32f(pSrc: *const Ipp32f, val: Ipp32f,
                           pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_8u_ISfs(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_8u_Sfs(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                          pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_16s_ISfs(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                           pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_16sc_ISfs(pSrc: *const Ipp16sc, pSrcDst: *mut Ipp16sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_16sc_Sfs(pSrc1: *const Ipp16sc, pSrc2: *const Ipp16sc,
                            pDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32s_ISfs(pSrc: *const Ipp32s, pSrcDst: *mut Ipp32s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32s_Sfs(pSrc1: *const Ipp32s, pSrc2: *const Ipp32s,
                           pDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32s16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp32s,
                              pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_16u_ISfs(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_16u_Sfs(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                           pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                       pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32fc_I(pSrc: *const Ipp32fc, pSrcDst: *mut Ipp32fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                        pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                       pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64fc_I(pSrc: *const Ipp64fc, pSrcDst: *mut Ipp64fc,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64fc(pSrc1: *const Ipp64fc, pSrc2: *const Ipp64fc,
                        pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_Round_8u_ISfs(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                                 len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_Round_8u_Sfs(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                                pDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                                rndMode: IppRoundMode,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_Round_16s_ISfs(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_Round_16s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                                 pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_Round_16u_ISfs(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_Round_16u_Sfs(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                                 pDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32s_I(pSrcDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_8u_ISfs(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_8u_Sfs(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                          len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_16s_ISfs(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_16sc_ISfs(pSrcDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_16u_ISfs(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_16u_Sfs(pSrc: *const Ipp16u, pDst: *mut Ipp16u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_8u_ISfs(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_8u_Sfs(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_16s_ISfs(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_16sc_ISfs(pSrcDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                             len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_16u_ISfs(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_16u_Sfs(pSrc: *const Ipp16u, pDst: *mut Ipp16u,
                            len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32s16s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp16s,
                               len: ipp_ctypes::c_int,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCubrt_32s16s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp16s,
                                Len: ipp_ctypes::c_int,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCubrt_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_16s_ISfs(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32s_ISfs(pSrcDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                           len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLn_16s_ISfs(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLn_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                          len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32s_ISfs(pSrcDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                           scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                          len: ipp_ctypes::c_int,
                          scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSumLn_16s32f(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                            pSum: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsSumLn_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                         pSum: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsSumLn_32f64f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                            pSum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsSumLn_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                         pSum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsArctan_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArctan_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsArctan_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArctan_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_16s_ISfs(pSrcDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int, vSub: Ipp16s,
                                  vDiv: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                 len: ipp_ctypes::c_int, vSub: Ipp16s,
                                 vDiv: ipp_ctypes::c_int,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_16sc_ISfs(pSrcDst: *mut Ipp16sc,
                                   len: ipp_ctypes::c_int, vSub: Ipp16sc,
                                   vDiv: ipp_ctypes::c_int,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                  len: ipp_ctypes::c_int, vSub: Ipp16sc,
                                  vDiv: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                               vSub: Ipp32f, vDiv: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int, vSub: Ipp32f,
                             vDiv: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                                vSub: Ipp32fc, vDiv: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                              len: ipp_ctypes::c_int, vSub: Ipp32fc,
                              vDiv: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                               vSub: Ipp64f, vDiv: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                             len: ipp_ctypes::c_int, vSub: Ipp64f,
                             vDiv: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int,
                                vSub: Ipp64fc, vDiv: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormalize_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                              len: ipp_ctypes::c_int, vSub: Ipp64fc,
                              vDiv: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsSortAscend_8u_I(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortAscend_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortAscend_16u_I(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortAscend_32s_I(pSrcDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortAscend_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortAscend_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortDescend_8u_I(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortDescend_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortDescend_16u_I(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortDescend_32s_I(pSrcDst: *mut Ipp32s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortDescend_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortDescend_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexAscend_8u_I(pSrcDst: *mut Ipp8u,
                                    pDstIdx: *mut ipp_ctypes::c_int,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexAscend_16s_I(pSrcDst: *mut Ipp16s,
                                     pDstIdx: *mut ipp_ctypes::c_int,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexAscend_16u_I(pSrcDst: *mut Ipp16u,
                                     pDstIdx: *mut ipp_ctypes::c_int,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexAscend_32s_I(pSrcDst: *mut Ipp32s,
                                     pDstIdx: *mut ipp_ctypes::c_int,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexAscend_32f_I(pSrcDst: *mut Ipp32f,
                                     pDstIdx: *mut ipp_ctypes::c_int,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexAscend_64f_I(pSrcDst: *mut Ipp64f,
                                     pDstIdx: *mut ipp_ctypes::c_int,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexDescend_8u_I(pSrcDst: *mut Ipp8u,
                                     pDstIdx: *mut ipp_ctypes::c_int,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexDescend_16s_I(pSrcDst: *mut Ipp16s,
                                      pDstIdx: *mut ipp_ctypes::c_int,
                                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexDescend_16u_I(pSrcDst: *mut Ipp16u,
                                      pDstIdx: *mut ipp_ctypes::c_int,
                                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexDescend_32s_I(pSrcDst: *mut Ipp32s,
                                      pDstIdx: *mut ipp_ctypes::c_int,
                                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexDescend_32f_I(pSrcDst: *mut Ipp32f,
                                      pDstIdx: *mut ipp_ctypes::c_int,
                                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortIndexDescend_64f_I(pSrcDst: *mut Ipp64f,
                                      pDstIdx: *mut ipp_ctypes::c_int,
                                      len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixGetBufferSize(len: ipp_ctypes::c_int,
                                      dataType: IppDataType,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexGetBufferSize(len: ipp_ctypes::c_int,
                                           dataType: IppDataType,
                                           pBufferSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_8u_I(pSrcDst: *mut Ipp8u,
                                    len: ipp_ctypes::c_int,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_16u_I(pSrcDst: *mut Ipp16u,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_16s_I(pSrcDst: *mut Ipp16s,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_32u_I(pSrcDst: *mut Ipp32u,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_32s_I(pSrcDst: *mut Ipp32s,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_32f_I(pSrcDst: *mut Ipp32f,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixAscend_64f_I(pSrcDst: *mut Ipp64f,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_8u_I(pSrcDst: *mut Ipp8u,
                                     len: ipp_ctypes::c_int,
                                     pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_16u_I(pSrcDst: *mut Ipp16u,
                                      len: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_16s_I(pSrcDst: *mut Ipp16s,
                                      len: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_32u_I(pSrcDst: *mut Ipp32u,
                                      len: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_32s_I(pSrcDst: *mut Ipp32s,
                                      len: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_32f_I(pSrcDst: *mut Ipp32f,
                                      len: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixDescend_64f_I(pSrcDst: *mut Ipp64f,
                                      len: ipp_ctypes::c_int,
                                      pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_8u(pSrc: *const Ipp8u,
                                       srcStrideBytes: Ipp32s,
                                       pDstIndx: *mut Ipp32s,
                                       len: ipp_ctypes::c_int,
                                       pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_16s(pSrc: *const Ipp16s,
                                        srcStrideBytes: Ipp32s,
                                        pDstIndx: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_16u(pSrc: *const Ipp16u,
                                        srcStrideBytes: Ipp32s,
                                        pDstIndx: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_32s(pSrc: *const Ipp32s,
                                        srcStrideBytes: Ipp32s,
                                        pDstIndx: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_32u(pSrc: *const Ipp32u,
                                        srcStrideBytes: Ipp32s,
                                        pDstIndx: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexAscend_32f(pSrc: *const Ipp32f,
                                        srcStrideBytes: Ipp32s,
                                        pDstIndx: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_8u(pSrc: *const Ipp8u,
                                        srcStrideBytes: Ipp32s,
                                        pDstIndx: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_16s(pSrc: *const Ipp16s,
                                         srcStrideBytes: Ipp32s,
                                         pDstIndx: *mut Ipp32s,
                                         len: ipp_ctypes::c_int,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_16u(pSrc: *const Ipp16u,
                                         srcStrideBytes: Ipp32s,
                                         pDstIndx: *mut Ipp32s,
                                         len: ipp_ctypes::c_int,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_32s(pSrc: *const Ipp32s,
                                         srcStrideBytes: Ipp32s,
                                         pDstIndx: *mut Ipp32s,
                                         len: ipp_ctypes::c_int,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_32u(pSrc: *const Ipp32u,
                                         srcStrideBytes: Ipp32s,
                                         pDstIndx: *mut Ipp32s,
                                         len: ipp_ctypes::c_int,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSortRadixIndexDescend_32f(pSrc: *const Ipp32f,
                                         srcStrideBytes: Ipp32s,
                                         pDstIndx: *mut Ipp32s,
                                         len: ipp_ctypes::c_int,
                                         pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_16u_I(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_16u(pSrc: *const Ipp16u, pDst: *mut Ipp16u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_24u_I(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_24u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_32u_I(pSrcDst: *mut Ipp32u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_32u(pSrc: *const Ipp32u, pDst: *mut Ipp32u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_64u_I(pSrcDst: *mut Ipp64u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSwapBytes_64u(pSrc: *const Ipp64u, pDst: *mut Ipp64u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_8s16s(pSrc: *const Ipp8s, pDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_8s32f(pSrc: *const Ipp8s, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_8u32f(pSrc: *const Ipp8u, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16s8s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp8s,
                                 len: Ipp32u, rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16s32s(pSrc: *const Ipp16s, pDst: *mut Ipp32s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16s16f(pSrc: *const Ipp16s, pDst: *mut Ipp16f,
                              len: ipp_ctypes::c_int, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16s32f(pSrc: *const Ipp16s, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16s32f_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16s64f_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16u32f(pSrc: *const Ipp16u, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_24s32s(pSrc: *const Ipp8u, pDst: *mut Ipp32s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_24s32f(pSrc: *const Ipp8u, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_24u32u(pSrc: *const Ipp8u, pDst: *mut Ipp32u,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_24u32f(pSrc: *const Ipp8u, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s16s(pSrc: *const Ipp32s, pDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s16s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s24s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp8u,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s32f(pSrc: *const Ipp32s, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s32f_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s64f(pSrc: *const Ipp32s, pDst: *mut Ipp64f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32s64f_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32u24u_Sfs(pSrc: *const Ipp32u, pDst: *mut Ipp8u,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64s32s_Sfs(pSrc: *const Ipp64s, pDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64s64f(pSrc: *const Ipp64s, pDst: *mut Ipp64f,
                              len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16f16s_Sfs(pSrc: *const Ipp16f, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_16f32f(pSrc: *const Ipp16f, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f8s_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp8s,
                                 len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f8u_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp8u,
                                 len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f16s_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f16u_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp16u,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f24s_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp8u,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f24u_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp8u,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f32s_Sfs(pSrc: *const Ipp32f, pDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f16f(pSrc: *const Ipp32f, pDst: *mut Ipp16f,
                              len: ipp_ctypes::c_int, rndMode: IppRoundMode)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_32f64f(pSrc: *const Ipp32f, pDst: *mut Ipp64f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f16s_Sfs(pSrc: *const Ipp64f, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f32s_Sfs(pSrc: *const Ipp64f, pDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f64s_Sfs(pSrc: *const Ipp64f, pDst: *mut Ipp64s,
                                  len: Ipp32u, rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f32f(pSrc: *const Ipp64f, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_8s8u(pSrc: *const Ipp8s, pDst: *mut Ipp8u,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_8u8s_Sfs(pSrc: *const Ipp8u, pDst: *mut Ipp8s,
                                len: ipp_ctypes::c_int, rndMode: IppRoundMode,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f8s_Sfs(pSrc: *const Ipp64f, pDst: *mut Ipp8s,
                                 len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f8u_Sfs(pSrc: *const Ipp64f, pDst: *mut Ipp8u,
                                 len: ipp_ctypes::c_int,
                                 rndMode: IppRoundMode,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConvert_64f16u_Sfs(pSrc: *const Ipp64f, pDst: *mut Ipp16u,
                                  len: ipp_ctypes::c_int,
                                  rndMode: IppRoundMode,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConj_16sc_I(pSrcDst: *mut Ipp16sc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConj_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConj_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConj_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConj_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConj_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjFlip_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjFlip_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjFlip_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjCcs_32fc_I(pSrcDst: *mut Ipp32fc,
                              lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjCcs_32fc(pSrc: *const Ipp32f, pDst: *mut Ipp32fc,
                            lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjCcs_64fc_I(pSrcDst: *mut Ipp64fc,
                              lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjCcs_64fc(pSrc: *const Ipp64f, pDst: *mut Ipp64fc,
                            lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPack_32fc_I(pSrcDst: *mut Ipp32fc,
                               lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPack_32fc(pSrc: *const Ipp32f, pDst: *mut Ipp32fc,
                             lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPack_64fc_I(pSrcDst: *mut Ipp64fc,
                               lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPack_64fc(pSrc: *const Ipp64f, pDst: *mut Ipp64fc,
                             lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPerm_32fc_I(pSrcDst: *mut Ipp32fc,
                               lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPerm_32fc(pSrc: *const Ipp32f, pDst: *mut Ipp32fc,
                             lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPerm_64fc_I(pSrcDst: *mut Ipp64fc,
                               lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsConjPerm_64fc(pSrc: *const Ipp64f, pDst: *mut Ipp64fc,
                             lenDst: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_16s_Sfs(pSrcRe: *const Ipp16s, pSrcIm: *const Ipp16s,
                                 pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_16s32f(pSrcRe: *const Ipp16s, pSrcIm: *const Ipp16s,
                                pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_16sc32f(pSrc: *const Ipp16sc, pDst: *mut Ipp32f,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_32sc_Sfs(pSrc: *const Ipp32sc, pDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                             pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                             pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMagnitude_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_16sc32f(pSrc: *const Ipp16sc, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_16s_Sfs(pSrcRe: *const Ipp16s, pSrcIm: *const Ipp16s,
                             pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_16s32f(pSrcRe: *const Ipp16s, pSrcIm: *const Ipp16s,
                            pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                         pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPhase_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                         pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_16s_Sfs(pSrcRe: *const Ipp16s,
                                   pSrcIm: *const Ipp16s, pDst: *mut Ipp16s,
                                   len: ipp_ctypes::c_int,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_16s32f(pSrcRe: *const Ipp16s,
                                  pSrcIm: *const Ipp16s, pDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                               pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                               pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16s,
                                    len: ipp_ctypes::c_int,
                                    scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_16sc32f(pSrc: *const Ipp16sc, pDst: *mut Ipp32f,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32f,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPowerSpectr_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64f,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsReal_64fc(pSrc: *const Ipp64fc, pDstRe: *mut Ipp64f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsReal_32fc(pSrc: *const Ipp32fc, pDstRe: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsReal_16sc(pSrc: *const Ipp16sc, pDstRe: *mut Ipp16s,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsImag_64fc(pSrc: *const Ipp64fc, pDstIm: *mut Ipp64f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsImag_32fc(pSrc: *const Ipp32fc, pDstIm: *mut Ipp32f,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsImag_16sc(pSrc: *const Ipp16sc, pDstIm: *mut Ipp16s,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsRealToCplx_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                              pDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRealToCplx_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                              pDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRealToCplx_16s(pSrcRe: *const Ipp16s, pSrcIm: *const Ipp16s,
                              pDst: *mut Ipp16sc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCplxToReal_64fc(pSrc: *const Ipp64fc, pDstRe: *mut Ipp64f,
                               pDstIm: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCplxToReal_32fc(pSrc: *const Ipp32fc, pDstRe: *mut Ipp32f,
                               pDstIm: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCplxToReal_16sc(pSrc: *const Ipp16sc, pDstRe: *mut Ipp16s,
                               pDstIm: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               level: Ipp16s, relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_16sc_I(pSrcDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                                level: Ipp16s, relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                               level: Ipp32f, relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                                level: Ipp32f, relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                               level: Ipp64f, relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int,
                                level: Ipp64f, relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int, level: Ipp16s,
                             relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                              len: ipp_ctypes::c_int, level: Ipp16s,
                              relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int, level: Ipp32f,
                             relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                              len: ipp_ctypes::c_int, level: Ipp32f,
                              relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                             len: ipp_ctypes::c_int, level: Ipp64f,
                             relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                              len: ipp_ctypes::c_int, level: Ipp64f,
                              relOp: IppCmpOp) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_16s_I(pSrcDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_16sc_I(pSrcDst: *mut Ipp16sc,
                                   len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_32s_I(pSrcDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_32f_I(pSrcDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_32fc_I(pSrcDst: *mut Ipp32fc,
                                   len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_64f_I(pSrcDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_64fc_I(pSrcDst: *mut Ipp64fc,
                                   len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                 len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                                len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                 len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LT_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                 len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_16s_I(pSrcDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_16sc_I(pSrcDst: *mut Ipp16sc,
                                   len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_32s_I(pSrcDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_32f_I(pSrcDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_32fc_I(pSrcDst: *mut Ipp32fc,
                                   len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_64f_I(pSrcDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_64fc_I(pSrcDst: *mut Ipp64fc,
                                   len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                 len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                                len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                 len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GT_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                 len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                   len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                                   len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                   len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                   len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_16s_I(pSrcDst: *mut Ipp16s,
                                     len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_32s_I(pSrcDst: *mut Ipp32s,
                                     len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_32f_I(pSrcDst: *mut Ipp32f,
                                     len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbs_64f_I(pSrcDst: *mut Ipp64f,
                                     len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                   len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                                   len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                   len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                   len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_16s_I(pSrcDst: *mut Ipp16s,
                                     len: ipp_ctypes::c_int, level: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_32s_I(pSrcDst: *mut Ipp32s,
                                     len: ipp_ctypes::c_int, level: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_32f_I(pSrcDst: *mut Ipp32f,
                                     len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTAbs_64f_I(pSrcDst: *mut Ipp64f,
                                     len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                      len: ipp_ctypes::c_int, level: Ipp16s,
                                      value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                                      len: ipp_ctypes::c_int, level: Ipp32s,
                                      value: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                      len: ipp_ctypes::c_int, level: Ipp32f,
                                      value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                      len: ipp_ctypes::c_int, level: Ipp64f,
                                      value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_16s_I(pSrcDst: *mut Ipp16s,
                                        len: ipp_ctypes::c_int, level: Ipp16s,
                                        value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_32s_I(pSrcDst: *mut Ipp32s,
                                        len: ipp_ctypes::c_int, level: Ipp32s,
                                        value: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_32f_I(pSrcDst: *mut Ipp32f,
                                        len: ipp_ctypes::c_int, level: Ipp32f,
                                        value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTAbsVal_64f_I(pSrcDst: *mut Ipp64f,
                                        len: ipp_ctypes::c_int, level: Ipp64f,
                                        value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_16s_I(pSrcDst: *mut Ipp16s,
                                     len: ipp_ctypes::c_int, level: Ipp16s,
                                     value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_16sc_I(pSrcDst: *mut Ipp16sc,
                                      len: ipp_ctypes::c_int, level: Ipp16s,
                                      value: Ipp16sc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_32f_I(pSrcDst: *mut Ipp32f,
                                     len: ipp_ctypes::c_int, level: Ipp32f,
                                     value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_32fc_I(pSrcDst: *mut Ipp32fc,
                                      len: ipp_ctypes::c_int, level: Ipp32f,
                                      value: Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_64f_I(pSrcDst: *mut Ipp64f,
                                     len: ipp_ctypes::c_int, level: Ipp64f,
                                     value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_64fc_I(pSrcDst: *mut Ipp64fc,
                                      len: ipp_ctypes::c_int, level: Ipp64f,
                                      value: Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                   len: ipp_ctypes::c_int, level: Ipp16s,
                                   value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                    len: ipp_ctypes::c_int, level: Ipp16s,
                                    value: Ipp16sc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                   len: ipp_ctypes::c_int, level: Ipp32f,
                                   value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                    len: ipp_ctypes::c_int, level: Ipp32f,
                                    value: Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                   len: ipp_ctypes::c_int, level: Ipp64f,
                                   value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTVal_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                    len: ipp_ctypes::c_int, level: Ipp64f,
                                    value: Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_16s_I(pSrcDst: *mut Ipp16s,
                                     len: ipp_ctypes::c_int, level: Ipp16s,
                                     value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_16sc_I(pSrcDst: *mut Ipp16sc,
                                      len: ipp_ctypes::c_int, level: Ipp16s,
                                      value: Ipp16sc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_32f_I(pSrcDst: *mut Ipp32f,
                                     len: ipp_ctypes::c_int, level: Ipp32f,
                                     value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_32fc_I(pSrcDst: *mut Ipp32fc,
                                      len: ipp_ctypes::c_int, level: Ipp32f,
                                      value: Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_64f_I(pSrcDst: *mut Ipp64f,
                                     len: ipp_ctypes::c_int, level: Ipp64f,
                                     value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_64fc_I(pSrcDst: *mut Ipp64fc,
                                      len: ipp_ctypes::c_int, level: Ipp64f,
                                      value: Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                   len: ipp_ctypes::c_int, level: Ipp16s,
                                   value: Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                    len: ipp_ctypes::c_int, level: Ipp16s,
                                    value: Ipp16sc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                   len: ipp_ctypes::c_int, level: Ipp32f,
                                   value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                    len: ipp_ctypes::c_int, level: Ipp32f,
                                    value: Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                   len: ipp_ctypes::c_int, level: Ipp64f,
                                   value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_GTVal_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                    len: ipp_ctypes::c_int, level: Ipp64f,
                                    value: Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_16s_I(pSrcDst: *mut Ipp16s,
                                          len: ipp_ctypes::c_int,
                                          levelLT: Ipp16s, valueLT: Ipp16s,
                                          levelGT: Ipp16s, valueGT: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_16s(pSrc: *const Ipp16s,
                                        pDst: *mut Ipp16s,
                                        len: ipp_ctypes::c_int,
                                        levelLT: Ipp16s, valueLT: Ipp16s,
                                        levelGT: Ipp16s, valueGT: Ipp16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_32s_I(pSrcDst: *mut Ipp32s,
                                          len: ipp_ctypes::c_int,
                                          levelLT: Ipp32s, valueLT: Ipp32s,
                                          levelGT: Ipp32s, valueGT: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_32s(pSrc: *const Ipp32s,
                                        pDst: *mut Ipp32s,
                                        len: ipp_ctypes::c_int,
                                        levelLT: Ipp32s, valueLT: Ipp32s,
                                        levelGT: Ipp32s, valueGT: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_32f_I(pSrcDst: *mut Ipp32f,
                                          len: ipp_ctypes::c_int,
                                          levelLT: Ipp32f, valueLT: Ipp32f,
                                          levelGT: Ipp32f, valueGT: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_32f(pSrc: *const Ipp32f,
                                        pDst: *mut Ipp32f,
                                        len: ipp_ctypes::c_int,
                                        levelLT: Ipp32f, valueLT: Ipp32f,
                                        levelGT: Ipp32f, valueGT: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_64f_I(pSrcDst: *mut Ipp64f,
                                          len: ipp_ctypes::c_int,
                                          levelLT: Ipp64f, valueLT: Ipp64f,
                                          levelGT: Ipp64f, valueGT: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTValGTVal_64f(pSrc: *const Ipp64f,
                                        pDst: *mut Ipp64f,
                                        len: ipp_ctypes::c_int,
                                        levelLT: Ipp64f, valueLT: Ipp64f,
                                        levelGT: Ipp64f, valueGT: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_32f_I(pSrcDst: *mut Ipp32f,
                                     len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_32fc_I(pSrcDst: *mut Ipp32fc,
                                      len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_64f_I(pSrcDst: *mut Ipp64f,
                                     len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_64fc_I(pSrcDst: *mut Ipp64fc,
                                      len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                   len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                    len: ipp_ctypes::c_int, level: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                   len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsThreshold_LTInv_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                    len: ipp_ctypes::c_int, level: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCartToPolar_32fc(pSrc: *const Ipp32fc, pDstMagn: *mut Ipp32f,
                                pDstPhase: *mut Ipp32f,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCartToPolar_64fc(pSrc: *const Ipp64fc, pDstMagn: *mut Ipp64f,
                                pDstPhase: *mut Ipp64f,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCartToPolar_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                               pDstMagn: *mut Ipp32f, pDstPhase: *mut Ipp32f,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCartToPolar_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                               pDstMagn: *mut Ipp64f, pDstPhase: *mut Ipp64f,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCartToPolar_16sc_Sfs(pSrc: *const Ipp16sc,
                                    pDstMagn: *mut Ipp16s,
                                    pDstPhase: *mut Ipp16s,
                                    len: ipp_ctypes::c_int,
                                    magnScaleFactor: ipp_ctypes::c_int,
                                    phaseScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPolarToCart_32fc(pSrcMagn: *const Ipp32f,
                                pSrcPhase: *const Ipp32f, pDst: *mut Ipp32fc,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPolarToCart_64fc(pSrcMagn: *const Ipp64f,
                                pSrcPhase: *const Ipp64f, pDst: *mut Ipp64fc,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPolarToCart_32f(pSrcMagn: *const Ipp32f,
                               pSrcPhase: *const Ipp32f, pDstRe: *mut Ipp32f,
                               pDstIm: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPolarToCart_64f(pSrcMagn: *const Ipp64f,
                               pSrcPhase: *const Ipp64f, pDstRe: *mut Ipp64f,
                               pDstIm: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPolarToCart_16sc_Sfs(pSrcMagn: *const Ipp16s,
                                    pSrcPhase: *const Ipp16s,
                                    pDst: *mut Ipp16sc,
                                    len: ipp_ctypes::c_int,
                                    magnScaleFactor: ipp_ctypes::c_int,
                                    phaseScaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                       len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_8u_I(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_16u(pSrc: *const Ipp16u, pDst: *mut Ipp16u,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_16u_I(pSrcDst: *mut Ipp16u, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                        len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                         len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFlip_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFindNearestOne_16u(inpVal: Ipp16u, pOutVal: *mut Ipp16u,
                                  pOutIndex: *mut ipp_ctypes::c_int,
                                  pTable: *const Ipp16u,
                                  tblLen: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFindNearest_16u(pVals: *const Ipp16u, pOutVals: *mut Ipp16u,
                               pOutIndexes: *mut ipp_ctypes::c_int,
                               len: ipp_ctypes::c_int, pTable: *const Ipp16u,
                               tblLen: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_16sc_I(pSrcDst: *mut Ipp16sc,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_32fc_I(pSrcDst: *mut Ipp32fc,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_64fc_I(pSrcDst: *mut Ipp64fc,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBartlett_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_16sc_I(pSrcDst: *mut Ipp16sc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                           len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHann_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                            len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_16sc_I(pSrcDst: *mut Ipp16sc,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_32fc_I(pSrcDst: *mut Ipp32fc,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_64fc_I(pSrcDst: *mut Ipp64fc,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinHamming_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                               len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                                 alpha: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                               len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_16sc_I(pSrcDst: *mut Ipp16sc,
                                  len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                                 alpha: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                               len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_32fc_I(pSrcDst: *mut Ipp32fc,
                                  len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                                 alpha: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                               len: ipp_ctypes::c_int, alpha: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_64fc_I(pSrcDst: *mut Ipp64fc,
                                  len: ipp_ctypes::c_int, alpha: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackman_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                len: ipp_ctypes::c_int, alpha: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_16s_I(pSrcDst: *mut Ipp16s,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_16sc_I(pSrcDst: *mut Ipp16sc,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_32f_I(pSrcDst: *mut Ipp32f,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_32fc_I(pSrcDst: *mut Ipp32fc,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_64f_I(pSrcDst: *mut Ipp64f,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_64fc_I(pSrcDst: *mut Ipp64fc,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanStd_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_16s_I(pSrcDst: *mut Ipp16s,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_16sc_I(pSrcDst: *mut Ipp16sc,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_32f_I(pSrcDst: *mut Ipp32f,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_32fc_I(pSrcDst: *mut Ipp32fc,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_64f_I(pSrcDst: *mut Ipp64f,
                                    len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_64fc_I(pSrcDst: *mut Ipp64fc,
                                     len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinBlackmanOpt_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                   len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_16s_I(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               alpha: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                             len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_16sc_I(pSrcDst: *mut Ipp16sc, len: ipp_ctypes::c_int,
                                alpha: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                              len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                               alpha: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                                alpha: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                              len: ipp_ctypes::c_int, alpha: Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                               alpha: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                             len: ipp_ctypes::c_int, alpha: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int,
                                alpha: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsWinKaiser_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                              len: ipp_ctypes::c_int, alpha: Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSum_16s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                           pSum: *mut Ipp16s, scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSum_16sc_Sfs(pSrc: *const Ipp16sc, len: ipp_ctypes::c_int,
                            pSum: *mut Ipp16sc,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSum_16s32s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pSum: *mut Ipp32s,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSum_16sc32sc_Sfs(pSrc: *const Ipp16sc, len: ipp_ctypes::c_int,
                                pSum: *mut Ipp32sc,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSum_32s_Sfs(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                           pSum: *mut Ipp32s, scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSum_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                       pSum: *mut Ipp32f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSum_32fc(pSrc: *const Ipp32fc, len: ipp_ctypes::c_int,
                        pSum: *mut Ipp32fc, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSum_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                       pSum: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsSum_64fc(pSrc: *const Ipp64fc, len: ipp_ctypes::c_int,
                        pSum: *mut Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsMin_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                       pMin: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsMin_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                       pMin: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMin_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                       pMin: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsMin_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                       pMin: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMax_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                       pMax: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsMax_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                       pMax: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMax_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                       pMax: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsMax_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                       pMax: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                         pMin: *mut Ipp8u, pMax: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_16u(pSrc: *const Ipp16u, len: ipp_ctypes::c_int,
                          pMin: *mut Ipp16u, pMax: *mut Ipp16u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                          pMin: *mut Ipp16s, pMax: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_32u(pSrc: *const Ipp32u, len: ipp_ctypes::c_int,
                          pMin: *mut Ipp32u, pMax: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                          pMin: *mut Ipp32s, pMax: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                          pMin: *mut Ipp32f, pMax: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMax_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                          pMin: *mut Ipp64f, pMax: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMinAbs_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                          pMinAbs: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsMinAbs_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                          pMinAbs: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMinAbs_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                          pMinAbs: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsMinAbs_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                          pMinAbs: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxAbs_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                          pMaxAbs: *mut Ipp16s) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxAbs_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                          pMaxAbs: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxAbs_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                          pMaxAbs: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxAbs_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                          pMaxAbs: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMinIndx_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                           pMin: *mut Ipp16s, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMinIndx_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                           pMin: *mut Ipp32s, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMinIndx_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                           pMin: *mut Ipp32f, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMinIndx_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                           pMin: *mut Ipp64f, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMaxIndx_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                           pMax: *mut Ipp16s, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMaxIndx_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                           pMax: *mut Ipp32s, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMaxIndx_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                           pMax: *mut Ipp32f, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMaxIndx_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                           pMax: *mut Ipp64f, pIndx: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_8u(pSrc: *const Ipp8u, len: ipp_ctypes::c_int,
                             pMin: *mut Ipp8u,
                             pMinIndx: *mut ipp_ctypes::c_int,
                             pMax: *mut Ipp8u,
                             pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_16u(pSrc: *const Ipp16u, len: ipp_ctypes::c_int,
                              pMin: *mut Ipp16u,
                              pMinIndx: *mut ipp_ctypes::c_int,
                              pMax: *mut Ipp16u,
                              pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pMin: *mut Ipp16s,
                              pMinIndx: *mut ipp_ctypes::c_int,
                              pMax: *mut Ipp16s,
                              pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_32u(pSrc: *const Ipp32u, len: ipp_ctypes::c_int,
                              pMin: *mut Ipp32u,
                              pMinIndx: *mut ipp_ctypes::c_int,
                              pMax: *mut Ipp32u,
                              pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                              pMin: *mut Ipp32s,
                              pMinIndx: *mut ipp_ctypes::c_int,
                              pMax: *mut Ipp32s,
                              pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                              pMin: *mut Ipp32f,
                              pMinIndx: *mut ipp_ctypes::c_int,
                              pMax: *mut Ipp32f,
                              pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinMaxIndx_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                              pMin: *mut Ipp64f,
                              pMinIndx: *mut ipp_ctypes::c_int,
                              pMax: *mut Ipp64f,
                              pMaxIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinAbsIndx_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pMinAbs: *mut Ipp16s,
                              pIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinAbsIndx_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                              pMinAbs: *mut Ipp32s,
                              pIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxAbsIndx_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pMaxAbs: *mut Ipp16s,
                              pIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxAbsIndx_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                              pMaxAbs: *mut Ipp32s,
                              pIndx: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMean_16s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                            pMean: *mut Ipp16s,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMean_16sc_Sfs(pSrc: *const Ipp16sc, len: ipp_ctypes::c_int,
                             pMean: *mut Ipp16sc,
                             scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMean_32s_Sfs(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                            pMean: *mut Ipp32s,
                            scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMean_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                        pMean: *mut Ipp32f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMean_32fc(pSrc: *const Ipp32fc, len: ipp_ctypes::c_int,
                         pMean: *mut Ipp32fc, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMean_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                        pMean: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMean_64fc(pSrc: *const Ipp64fc, len: ipp_ctypes::c_int,
                         pMean: *mut Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsStdDev_16s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pStdDev: *mut Ipp16s,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsStdDev_16s32s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                                 pStdDev: *mut Ipp32s,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsStdDev_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                          pStdDev: *mut Ipp32f, hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsStdDev_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                          pStdDev: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsMeanStdDev_16s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                                  pMean: *mut Ipp16s, pStdDev: *mut Ipp16s,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMeanStdDev_16s32s_Sfs(pSrc: *const Ipp16s,
                                     len: ipp_ctypes::c_int,
                                     pMean: *mut Ipp32s, pStdDev: *mut Ipp32s,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMeanStdDev_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                              pMean: *mut Ipp32f, pStdDev: *mut Ipp32f,
                              hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsMeanStdDev_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                              pMean: *mut Ipp64f, pStdDev: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_Inf_16s32s_Sfs(pSrc: *const Ipp16s,
                                   len: ipp_ctypes::c_int, pNorm: *mut Ipp32s,
                                   scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_Inf_16s32f(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                               pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_Inf_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                            pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_Inf_32fc32f(pSrc: *const Ipp32fc, len: ipp_ctypes::c_int,
                                pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_Inf_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                            pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_Inf_64fc64f(pSrc: *const Ipp64fc, len: ipp_ctypes::c_int,
                                pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_16s32s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                                  pNorm: *mut Ipp32s,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_16s64s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                                  pNorm: *mut Ipp64s,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_16s32f(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                           pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_32fc64f(pSrc: *const Ipp32fc, len: ipp_ctypes::c_int,
                               pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                           pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L1_64fc64f(pSrc: *const Ipp64fc, len: ipp_ctypes::c_int,
                               pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2_16s32s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                                  pNorm: *mut Ipp32s,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2_16s32f(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                           pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2_32fc64f(pSrc: *const Ipp32fc, len: ipp_ctypes::c_int,
                               pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                           pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2_64fc64f(pSrc: *const Ipp64fc, len: ipp_ctypes::c_int,
                               pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNorm_L2Sqr_16s64s_Sfs(pSrc: *const Ipp16s,
                                     len: ipp_ctypes::c_int,
                                     pNorm: *mut Ipp64s,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_Inf_16s32s_Sfs(pSrc1: *const Ipp16s,
                                       pSrc2: *const Ipp16s,
                                       len: ipp_ctypes::c_int,
                                       pNorm: *mut Ipp32s,
                                       scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_Inf_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                                   len: ipp_ctypes::c_int, pNorm: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_Inf_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                                len: ipp_ctypes::c_int, pNorm: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_Inf_32fc32f(pSrc1: *const Ipp32fc,
                                    pSrc2: *const Ipp32fc,
                                    len: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_Inf_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                                len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_Inf_64fc64f(pSrc1: *const Ipp64fc,
                                    pSrc2: *const Ipp64fc,
                                    len: ipp_ctypes::c_int,
                                    pNorm: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_16s32s_Sfs(pSrc1: *const Ipp16s,
                                      pSrc2: *const Ipp16s,
                                      len: ipp_ctypes::c_int,
                                      pNorm: *mut Ipp32s,
                                      scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_16s64s_Sfs(pSrc1: *const Ipp16s,
                                      pSrc2: *const Ipp16s,
                                      len: ipp_ctypes::c_int,
                                      pNorm: *mut Ipp64s,
                                      scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                                  len: ipp_ctypes::c_int, pNorm: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                               len: ipp_ctypes::c_int, pNorm: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_32fc64f(pSrc1: *const Ipp32fc,
                                   pSrc2: *const Ipp32fc,
                                   len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                               len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L1_64fc64f(pSrc1: *const Ipp64fc,
                                   pSrc2: *const Ipp64fc,
                                   len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2_16s32s_Sfs(pSrc1: *const Ipp16s,
                                      pSrc2: *const Ipp16s,
                                      len: ipp_ctypes::c_int,
                                      pNorm: *mut Ipp32s,
                                      scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                                  len: ipp_ctypes::c_int, pNorm: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                               len: ipp_ctypes::c_int, pNorm: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2_32fc64f(pSrc1: *const Ipp32fc,
                                   pSrc2: *const Ipp32fc,
                                   len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                               len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2_64fc64f(pSrc1: *const Ipp64fc,
                                   pSrc2: *const Ipp64fc,
                                   len: ipp_ctypes::c_int, pNorm: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNormDiff_L2Sqr_16s64s_Sfs(pSrc1: *const Ipp16s,
                                         pSrc2: *const Ipp16s,
                                         len: ipp_ctypes::c_int,
                                         pNorm: *mut Ipp64s,
                                         scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_16s32s_Sfs(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                                  len: ipp_ctypes::c_int, pDp: *mut Ipp32s,
                                  scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_16s64s(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                              len: ipp_ctypes::c_int, pDp: *mut Ipp64s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_16sc64sc(pSrc1: *const Ipp16sc, pSrc2: *const Ipp16sc,
                                len: ipp_ctypes::c_int, pDp: *mut Ipp64sc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_16s16sc64sc(pSrc1: *const Ipp16s,
                                   pSrc2: *const Ipp16sc,
                                   len: ipp_ctypes::c_int, pDp: *mut Ipp64sc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_16s32s32s_Sfs(pSrc1: *const Ipp16s,
                                     pSrc2: *const Ipp32s,
                                     len: ipp_ctypes::c_int, pDp: *mut Ipp32s,
                                     scaleFactor: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_16s32f(pSrc1: *const Ipp16s, pSrc2: *const Ipp16s,
                              len: ipp_ctypes::c_int, pDp: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32s_Sfs(pSrc1: *const Ipp32s, pSrc2: *const Ipp32s,
                               len: ipp_ctypes::c_int, pDp: *mut Ipp32s,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                           len: ipp_ctypes::c_int, pDp: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                            len: ipp_ctypes::c_int, pDp: *mut Ipp32fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32f32fc(pSrc1: *const Ipp32f, pSrc2: *const Ipp32fc,
                               len: ipp_ctypes::c_int, pDp: *mut Ipp32fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32f32fc64fc(pSrc1: *const Ipp32f,
                                   pSrc2: *const Ipp32fc,
                                   len: ipp_ctypes::c_int, pDp: *mut Ipp64fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32f64f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                              len: ipp_ctypes::c_int, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_32fc64fc(pSrc1: *const Ipp32fc, pSrc2: *const Ipp32fc,
                                len: ipp_ctypes::c_int, pDp: *mut Ipp64fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                           len: ipp_ctypes::c_int, pDp: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_64fc(pSrc1: *const Ipp64fc, pSrc2: *const Ipp64fc,
                            len: ipp_ctypes::c_int, pDp: *mut Ipp64fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDotProd_64f64fc(pSrc1: *const Ipp64f, pSrc2: *const Ipp64fc,
                               len: ipp_ctypes::c_int, pDp: *mut Ipp64fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_8u_I(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_16u_I(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_16s_I(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_32s_I(pSrc: *const Ipp32s, pSrcDst: *mut Ipp32s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                              len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                           pDst: *mut Ipp8u, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_16u(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                            pDst: *mut Ipp16u, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                            pDst: *mut Ipp32f, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMinEvery_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                            pDst: *mut Ipp64f, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_8u_I(pSrc: *const Ipp8u, pSrcDst: *mut Ipp8u,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_16u_I(pSrc: *const Ipp16u, pSrcDst: *mut Ipp16u,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_16s_I(pSrc: *const Ipp16s, pSrcDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_32s_I(pSrc: *const Ipp32s, pSrcDst: *mut Ipp32s,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                              len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                              len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_8u(pSrc1: *const Ipp8u, pSrc2: *const Ipp8u,
                           pDst: *mut Ipp8u, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_16u(pSrc1: *const Ipp16u, pSrc2: *const Ipp16u,
                            pDst: *mut Ipp16u, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                            pDst: *mut Ipp32f, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxEvery_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                            pDst: *mut Ipp64f, len: Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxOrder_16s(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                            pOrder: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxOrder_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                            pOrder: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxOrder_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                            pOrder: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMaxOrder_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                            pOrder: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsCountInRange_32s(pSrc: *const Ipp32s, len: ipp_ctypes::c_int,
                                pCounts: *mut ipp_ctypes::c_int,
                                lowerBound: Ipp32s, upperBound: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZeroCrossing_16s32f(pSrc: *const Ipp16s, len: Ipp32u,
                                   pValZCR: *mut Ipp32f, zcType: IppsZCType)
     -> IppStatus;
}
extern "C" {
    pub fn ippsZeroCrossing_32f(pSrc: *const Ipp32f, len: Ipp32u,
                                pValZCR: *mut Ipp32f, zcType: IppsZCType)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSampleUp_16s(pSrc: *const Ipp16s, srcLen: ipp_ctypes::c_int,
                            pDst: *mut Ipp16s,
                            pDstLen: *mut ipp_ctypes::c_int,
                            factor: ipp_ctypes::c_int,
                            pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleUp_16sc(pSrc: *const Ipp16sc, srcLen: ipp_ctypes::c_int,
                             pDst: *mut Ipp16sc,
                             pDstLen: *mut ipp_ctypes::c_int,
                             factor: ipp_ctypes::c_int,
                             pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleUp_32f(pSrc: *const Ipp32f, srcLen: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f,
                            pDstLen: *mut ipp_ctypes::c_int,
                            factor: ipp_ctypes::c_int,
                            pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleUp_32fc(pSrc: *const Ipp32fc, srcLen: ipp_ctypes::c_int,
                             pDst: *mut Ipp32fc,
                             pDstLen: *mut ipp_ctypes::c_int,
                             factor: ipp_ctypes::c_int,
                             pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleUp_64f(pSrc: *const Ipp64f, srcLen: ipp_ctypes::c_int,
                            pDst: *mut Ipp64f,
                            pDstLen: *mut ipp_ctypes::c_int,
                            factor: ipp_ctypes::c_int,
                            pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleUp_64fc(pSrc: *const Ipp64fc, srcLen: ipp_ctypes::c_int,
                             pDst: *mut Ipp64fc,
                             pDstLen: *mut ipp_ctypes::c_int,
                             factor: ipp_ctypes::c_int,
                             pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleDown_16s(pSrc: *const Ipp16s, srcLen: ipp_ctypes::c_int,
                              pDst: *mut Ipp16s,
                              pDstLen: *mut ipp_ctypes::c_int,
                              factor: ipp_ctypes::c_int,
                              pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleDown_16sc(pSrc: *const Ipp16sc,
                               srcLen: ipp_ctypes::c_int, pDst: *mut Ipp16sc,
                               pDstLen: *mut ipp_ctypes::c_int,
                               factor: ipp_ctypes::c_int,
                               pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleDown_32f(pSrc: *const Ipp32f, srcLen: ipp_ctypes::c_int,
                              pDst: *mut Ipp32f,
                              pDstLen: *mut ipp_ctypes::c_int,
                              factor: ipp_ctypes::c_int,
                              pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleDown_32fc(pSrc: *const Ipp32fc,
                               srcLen: ipp_ctypes::c_int, pDst: *mut Ipp32fc,
                               pDstLen: *mut ipp_ctypes::c_int,
                               factor: ipp_ctypes::c_int,
                               pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleDown_64f(pSrc: *const Ipp64f, srcLen: ipp_ctypes::c_int,
                              pDst: *mut Ipp64f,
                              pDstLen: *mut ipp_ctypes::c_int,
                              factor: ipp_ctypes::c_int,
                              pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSampleDown_64fc(pSrc: *const Ipp64fc,
                               srcLen: ipp_ctypes::c_int, pDst: *mut Ipp64fc,
                               pDstLen: *mut ipp_ctypes::c_int,
                               factor: ipp_ctypes::c_int,
                               pPhase: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAutoCorrNormGetBufferSize(srcLen: ipp_ctypes::c_int,
                                         dstLen: ipp_ctypes::c_int,
                                         dataType: IppDataType,
                                         algType: IppEnum,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAutoCorrNorm_32f(pSrc: *const Ipp32f,
                                srcLen: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                                dstLen: ipp_ctypes::c_int, algType: IppEnum,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsAutoCorrNorm_64f(pSrc: *const Ipp64f,
                                srcLen: ipp_ctypes::c_int, pDst: *mut Ipp64f,
                                dstLen: ipp_ctypes::c_int, algType: IppEnum,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsAutoCorrNorm_32fc(pSrc: *const Ipp32fc,
                                 srcLen: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32fc,
                                 dstLen: ipp_ctypes::c_int, algType: IppEnum,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsAutoCorrNorm_64fc(pSrc: *const Ipp64fc,
                                 srcLen: ipp_ctypes::c_int,
                                 pDst: *mut Ipp64fc,
                                 dstLen: ipp_ctypes::c_int, algType: IppEnum,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsCrossCorrNormGetBufferSize(src1Len: ipp_ctypes::c_int,
                                          src2Len: ipp_ctypes::c_int,
                                          dstLen: ipp_ctypes::c_int,
                                          lowLag: ipp_ctypes::c_int,
                                          dataType: IppDataType,
                                          algType: IppEnum,
                                          pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCrossCorrNorm_32f(pSrc1: *const Ipp32f,
                                 src1Len: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp32f,
                                 src2Len: ipp_ctypes::c_int,
                                 pDst: *mut Ipp32f, dstLen: ipp_ctypes::c_int,
                                 lowLag: ipp_ctypes::c_int, algType: IppEnum,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsCrossCorrNorm_64f(pSrc1: *const Ipp64f,
                                 src1Len: ipp_ctypes::c_int,
                                 pSrc2: *const Ipp64f,
                                 src2Len: ipp_ctypes::c_int,
                                 pDst: *mut Ipp64f, dstLen: ipp_ctypes::c_int,
                                 lowLag: ipp_ctypes::c_int, algType: IppEnum,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsCrossCorrNorm_32fc(pSrc1: *const Ipp32fc,
                                  src1Len: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp32fc,
                                  src2Len: ipp_ctypes::c_int,
                                  pDst: *mut Ipp32fc,
                                  dstLen: ipp_ctypes::c_int,
                                  lowLag: ipp_ctypes::c_int, algType: IppEnum,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsCrossCorrNorm_64fc(pSrc1: *const Ipp64fc,
                                  src1Len: ipp_ctypes::c_int,
                                  pSrc2: *const Ipp64fc,
                                  src2Len: ipp_ctypes::c_int,
                                  pDst: *mut Ipp64fc,
                                  dstLen: ipp_ctypes::c_int,
                                  lowLag: ipp_ctypes::c_int, algType: IppEnum,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsConvolveGetBufferSize(src1Len: ipp_ctypes::c_int,
                                     src2Len: ipp_ctypes::c_int,
                                     dataType: IppDataType, algType: IppEnum,
                                     pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConvolve_32f(pSrc1: *const Ipp32f, src1Len: ipp_ctypes::c_int,
                            pSrc2: *const Ipp32f, src2Len: ipp_ctypes::c_int,
                            pDst: *mut Ipp32f, algType: IppEnum,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsConvolve_64f(pSrc1: *const Ipp64f, src1Len: ipp_ctypes::c_int,
                            pSrc2: *const Ipp64f, src2Len: ipp_ctypes::c_int,
                            pDst: *mut Ipp64f, algType: IppEnum,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsConvBiased_32f(pSrc1: *const Ipp32f,
                              src1Len: ipp_ctypes::c_int,
                              pSrc2: *const Ipp32f,
                              src2Len: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                              dstLen: ipp_ctypes::c_int,
                              bias: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSumWindow_8u32f(pSrc: *const Ipp8u, pDst: *mut Ipp32f,
                               len: ipp_ctypes::c_int,
                               maskSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSumWindow_16s32f(pSrc: *const Ipp16s, pDst: *mut Ipp32f,
                                len: ipp_ctypes::c_int,
                                maskSize: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSRGetSize(tapsLen: ipp_ctypes::c_int, tapsType: IppDataType,
                            pSpecSize: *mut ipp_ctypes::c_int,
                            pBufSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSRInit_32f(pTaps: *const Ipp32f, tapsLen: ipp_ctypes::c_int,
                             algType: IppAlgType, pSpec: *mut IppsFIRSpec_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSRInit_64f(pTaps: *const Ipp64f, tapsLen: ipp_ctypes::c_int,
                             algType: IppAlgType, pSpec: *mut IppsFIRSpec_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSRInit_32fc(pTaps: *const Ipp32fc,
                              tapsLen: ipp_ctypes::c_int, algType: IppAlgType,
                              pSpec: *mut IppsFIRSpec_32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSRInit_64fc(pTaps: *const Ipp64fc,
                              tapsLen: ipp_ctypes::c_int, algType: IppAlgType,
                              pSpec: *mut IppsFIRSpec_64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSR_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                         numIters: ipp_ctypes::c_int,
                         pSpec: *mut IppsFIRSpec_32f, pDlySrc: *const Ipp16s,
                         pDlyDst: *mut Ipp16s, pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSR_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                          numIters: ipp_ctypes::c_int,
                          pSpec: *mut IppsFIRSpec_32fc,
                          pDlySrc: *const Ipp16sc, pDlyDst: *mut Ipp16sc,
                          pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                         numIters: ipp_ctypes::c_int,
                         pSpec: *mut IppsFIRSpec_32f, pDlySrc: *const Ipp32f,
                         pDlyDst: *mut Ipp32f, pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                         numIters: ipp_ctypes::c_int,
                         pSpec: *mut IppsFIRSpec_64f, pDlySrc: *const Ipp64f,
                         pDlyDst: *mut Ipp64f, pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSR_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                          numIters: ipp_ctypes::c_int,
                          pSpec: *mut IppsFIRSpec_32fc,
                          pDlySrc: *const Ipp32fc, pDlyDst: *mut Ipp32fc,
                          pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSR_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                          numIters: ipp_ctypes::c_int,
                          pSpec: *mut IppsFIRSpec_64fc,
                          pDlySrc: *const Ipp64fc, pDlyDst: *mut Ipp64fc,
                          pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMRGetSize(tapsLen: ipp_ctypes::c_int,
                            upFactor: ipp_ctypes::c_int,
                            downFactor: ipp_ctypes::c_int,
                            tapsType: IppDataType,
                            pSpecSize: *mut ipp_ctypes::c_int,
                            pBufSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMRInit_32f(pTaps: *const Ipp32f, tapsLen: ipp_ctypes::c_int,
                             upFactor: ipp_ctypes::c_int,
                             upPhase: ipp_ctypes::c_int,
                             downFactor: ipp_ctypes::c_int,
                             downPhase: ipp_ctypes::c_int,
                             pSpec: *mut IppsFIRSpec_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMRInit_64f(pTaps: *const Ipp64f, tapsLen: ipp_ctypes::c_int,
                             upFactor: ipp_ctypes::c_int,
                             upPhase: ipp_ctypes::c_int,
                             downFactor: ipp_ctypes::c_int,
                             downPhase: ipp_ctypes::c_int,
                             pSpec: *mut IppsFIRSpec_64f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMRInit_32fc(pTaps: *const Ipp32fc,
                              tapsLen: ipp_ctypes::c_int,
                              upFactor: ipp_ctypes::c_int,
                              upPhase: ipp_ctypes::c_int,
                              downFactor: ipp_ctypes::c_int,
                              downPhase: ipp_ctypes::c_int,
                              pSpec: *mut IppsFIRSpec_32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMRInit_64fc(pTaps: *const Ipp64fc,
                              tapsLen: ipp_ctypes::c_int,
                              upFactor: ipp_ctypes::c_int,
                              upPhase: ipp_ctypes::c_int,
                              downFactor: ipp_ctypes::c_int,
                              downPhase: ipp_ctypes::c_int,
                              pSpec: *mut IppsFIRSpec_64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMR_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                         numIters: ipp_ctypes::c_int,
                         pSpec: *mut IppsFIRSpec_32f, pDlySrc: *const Ipp16s,
                         pDlyDst: *mut Ipp16s, pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMR_16sc(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                          numIters: ipp_ctypes::c_int,
                          pSpec: *mut IppsFIRSpec_32fc,
                          pDlySrc: *const Ipp16sc, pDlyDst: *mut Ipp16sc,
                          pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                         numIters: ipp_ctypes::c_int,
                         pSpec: *mut IppsFIRSpec_32f, pDlySrc: *const Ipp32f,
                         pDlyDst: *mut Ipp32f, pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                         numIters: ipp_ctypes::c_int,
                         pSpec: *mut IppsFIRSpec_64f, pDlySrc: *const Ipp64f,
                         pDlyDst: *mut Ipp64f, pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMR_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                          numIters: ipp_ctypes::c_int,
                          pSpec: *mut IppsFIRSpec_32fc,
                          pDlySrc: *const Ipp32fc, pDlyDst: *mut Ipp32fc,
                          pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRMR_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                          numIters: ipp_ctypes::c_int,
                          pSpec: *mut IppsFIRSpec_64fc,
                          pDlySrc: *const Ipp64fc, pDlyDst: *mut Ipp64fc,
                          pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSparseGetStateSize_32f(nzTapsLen: ipp_ctypes::c_int,
                                         order: ipp_ctypes::c_int,
                                         pStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSparseInit_32f(ppState: *mut *mut IppsFIRSparseState_32f,
                                 pNZTaps: *const Ipp32f,
                                 pNZTapPos: *const Ipp32s,
                                 nzTapsLen: ipp_ctypes::c_int,
                                 pDlyLine: *const Ipp32f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSparse_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int,
                             pState: *mut IppsFIRSparseState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSparseSetDlyLine_32f(pState: *mut IppsFIRSparseState_32f,
                                       pDlyLine: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRSparseGetDlyLine_32f(pState: *const IppsFIRSparseState_32f,
                                       pDlyLine: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRGenGetBufferSize(tapsLen: ipp_ctypes::c_int,
                                   pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRGenLowpass_64f(rFreq: Ipp64f, pTaps: *mut Ipp64f,
                                 tapsLen: ipp_ctypes::c_int,
                                 winType: IppWinType, doNormal: IppBool,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRGenHighpass_64f(rFreq: Ipp64f, pTaps: *mut Ipp64f,
                                  tapsLen: ipp_ctypes::c_int,
                                  winType: IppWinType, doNormal: IppBool,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRGenBandpass_64f(rLowFreq: Ipp64f, rHighFreq: Ipp64f,
                                  pTaps: *mut Ipp64f,
                                  tapsLen: ipp_ctypes::c_int,
                                  winType: IppWinType, doNormal: IppBool,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRGenBandstop_64f(rLowFreq: Ipp64f, rHighFreq: Ipp64f,
                                  pTaps: *mut Ipp64f,
                                  tapsLen: ipp_ctypes::c_int,
                                  winType: IppWinType, doNormal: IppBool,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSGetStateSize32f_16s(tapsLen: ipp_ctypes::c_int,
                                         dlyIndex: ipp_ctypes::c_int,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSGetStateSize_32f(tapsLen: ipp_ctypes::c_int,
                                      dlyIndex: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSInit32f_16s(ppState: *mut *mut IppsFIRLMSState32f_16s,
                                 pTaps: *const Ipp32f,
                                 tapsLen: ipp_ctypes::c_int,
                                 pDlyLine: *const Ipp16s,
                                 dlyIndex: ipp_ctypes::c_int,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSInit_32f(ppState: *mut *mut IppsFIRLMSState_32f,
                              pTaps: *const Ipp32f,
                              tapsLen: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp32f,
                              dlyIndex: ipp_ctypes::c_int,
                              pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMS32f_16s(pSrc: *const Ipp16s, pRef: *const Ipp16s,
                             pDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                             mu: f32, pState: *mut IppsFIRLMSState32f_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMS_32f(pSrc: *const Ipp32f, pRef: *const Ipp32f,
                          pDst: *mut Ipp32f, len: ipp_ctypes::c_int, mu: f32,
                          pState: *mut IppsFIRLMSState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSGetTaps32f_16s(pState: *const IppsFIRLMSState32f_16s,
                                    pOutTaps: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSGetTaps_32f(pState: *const IppsFIRLMSState_32f,
                                 pOutTaps: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSGetDlyLine32f_16s(pState: *const IppsFIRLMSState32f_16s,
                                       pDlyLine: *mut Ipp16s,
                                       pDlyLineIndex: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSGetDlyLine_32f(pState: *const IppsFIRLMSState_32f,
                                    pDlyLine: *mut Ipp32f,
                                    pDlyLineIndex: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSSetDlyLine32f_16s(pState: *mut IppsFIRLMSState32f_16s,
                                       pDlyLine: *const Ipp16s,
                                       dlyLineIndex: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFIRLMSSetDlyLine_32f(pState: *mut IppsFIRLMSState_32f,
                                    pDlyLine: *const Ipp32f,
                                    dlyLineIndex: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine32f_16s(pState: *const IppsIIRState32f_16s,
                                    pDlyLine: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine32fc_16sc(pState: *const IppsIIRState32fc_16sc,
                                      pDlyLine: *mut Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine_32f(pState: *const IppsIIRState_32f,
                                 pDlyLine: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine_32fc(pState: *const IppsIIRState_32fc,
                                  pDlyLine: *mut Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64f_16s(pState: *const IppsIIRState64f_16s,
                                    pDlyLine: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64fc_16sc(pState: *const IppsIIRState64fc_16sc,
                                      pDlyLine: *mut Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64f_32s(pState: *const IppsIIRState64f_32s,
                                    pDlyLine: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64fc_32sc(pState: *const IppsIIRState64fc_32sc,
                                      pDlyLine: *mut Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64f_DF1_32s(pState: *const IppsIIRState64f_32s,
                                        pDlyLine: *mut Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64f_32f(pState: *const IppsIIRState64f_32f,
                                    pDlyLine: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine64fc_32fc(pState: *const IppsIIRState64fc_32fc,
                                      pDlyLine: *mut Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine_64f(pState: *const IppsIIRState_64f,
                                 pDlyLine: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetDlyLine_64fc(pState: *const IppsIIRState_64fc,
                                  pDlyLine: *mut Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine32f_16s(pState: *mut IppsIIRState32f_16s,
                                    pDlyLine: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine32fc_16sc(pState: *mut IppsIIRState32fc_16sc,
                                      pDlyLine: *const Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine_32f(pState: *mut IppsIIRState_32f,
                                 pDlyLine: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine_32fc(pState: *mut IppsIIRState_32fc,
                                  pDlyLine: *const Ipp32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64f_16s(pState: *mut IppsIIRState64f_16s,
                                    pDlyLine: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64fc_16sc(pState: *mut IppsIIRState64fc_16sc,
                                      pDlyLine: *const Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64f_32s(pState: *mut IppsIIRState64f_32s,
                                    pDlyLine: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64fc_32sc(pState: *mut IppsIIRState64fc_32sc,
                                      pDlyLine: *const Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64f_DF1_32s(pState: *mut IppsIIRState64f_32s,
                                        pDlyLine: *const Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64f_32f(pState: *mut IppsIIRState64f_32f,
                                    pDlyLine: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine64fc_32fc(pState: *mut IppsIIRState64fc_32fc,
                                      pDlyLine: *const Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine_64f(pState: *mut IppsIIRState_64f,
                                 pDlyLine: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSetDlyLine_64fc(pState: *mut IppsIIRState_64fc,
                                  pDlyLine: *const Ipp64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR32f_16s_ISfs(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               pState: *mut IppsIIRState32f_16s,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR32f_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int,
                              pState: *mut IppsIIRState32f_16s,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR32fc_16sc_ISfs(pSrcDst: *mut Ipp16sc,
                                 len: ipp_ctypes::c_int,
                                 pState: *mut IppsIIRState32fc_16sc,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR32fc_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                len: ipp_ctypes::c_int,
                                pState: *mut IppsIIRState32fc_16sc,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                         pState: *mut IppsIIRState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                       len: ipp_ctypes::c_int, pState: *mut IppsIIRState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                          pState: *mut IppsIIRState_32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                        len: ipp_ctypes::c_int,
                        pState: *mut IppsIIRState_32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_16s_ISfs(pSrcDst: *mut Ipp16s, len: ipp_ctypes::c_int,
                               pState: *mut IppsIIRState64f_16s,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_16s_Sfs(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                              len: ipp_ctypes::c_int,
                              pState: *mut IppsIIRState64f_16s,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64fc_16sc_ISfs(pSrcDst: *mut Ipp16sc,
                                 len: ipp_ctypes::c_int,
                                 pState: *mut IppsIIRState64fc_16sc,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64fc_16sc_Sfs(pSrc: *const Ipp16sc, pDst: *mut Ipp16sc,
                                len: ipp_ctypes::c_int,
                                pState: *mut IppsIIRState64fc_16sc,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_32s_ISfs(pSrcDst: *mut Ipp32s, len: ipp_ctypes::c_int,
                               pState: *mut IppsIIRState64f_32s,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_32s_Sfs(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                              len: ipp_ctypes::c_int,
                              pState: *mut IppsIIRState64f_32s,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64fc_32sc_ISfs(pSrcDst: *mut Ipp32sc,
                                 len: ipp_ctypes::c_int,
                                 pState: *mut IppsIIRState64fc_32sc,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64fc_32sc_Sfs(pSrc: *const Ipp32sc, pDst: *mut Ipp32sc,
                                len: ipp_ctypes::c_int,
                                pState: *mut IppsIIRState64fc_32sc,
                                scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                            pState: *mut IppsIIRState64f_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int,
                          pState: *mut IppsIIRState64f_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64fc_32fc_I(pSrcDst: *mut Ipp32fc, len: ipp_ctypes::c_int,
                              pState: *mut IppsIIRState64fc_32fc)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64fc_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                            len: ipp_ctypes::c_int,
                            pState: *mut IppsIIRState64fc_32fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                         pState: *mut IppsIIRState_64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                       len: ipp_ctypes::c_int, pState: *mut IppsIIRState_64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_64fc_I(pSrcDst: *mut Ipp64fc, len: ipp_ctypes::c_int,
                          pState: *mut IppsIIRState_64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                        len: ipp_ctypes::c_int,
                        pState: *mut IppsIIRState_64fc) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_32f_IP(ppSrcDst: *mut *mut Ipp32f, len: ipp_ctypes::c_int,
                          nChannels: ipp_ctypes::c_int,
                          ppState: *mut *mut IppsIIRState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR_32f_P(ppSrc: *mut *const Ipp32f, ppDst: *mut *mut Ipp32f,
                         len: ipp_ctypes::c_int, nChannels: ipp_ctypes::c_int,
                         ppState: *mut *mut IppsIIRState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_32s_IPSfs(ppSrcDst: *mut *mut Ipp32s,
                                len: ipp_ctypes::c_int,
                                nChannels: ipp_ctypes::c_int,
                                ppState: *mut *mut IppsIIRState64f_32s,
                                pScaleFactor: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIR64f_32s_PSfs(ppSrc: *mut *const Ipp32s,
                               ppDst: *mut *mut Ipp32s,
                               len: ipp_ctypes::c_int,
                               nChannels: ipp_ctypes::c_int,
                               ppState: *mut *mut IppsIIRState64f_32s,
                               pScaleFactor: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize32f_16s(order: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize32fc_16sc(order: ipp_ctypes::c_int,
                                        pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_32f(order: ipp_ctypes::c_int,
                                   pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_32fc(order: ipp_ctypes::c_int,
                                    pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_16s(order: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64fc_16sc(order: ipp_ctypes::c_int,
                                        pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_32s(order: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64fc_32sc(order: ipp_ctypes::c_int,
                                        pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_32f(order: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64fc_32fc(order: ipp_ctypes::c_int,
                                        pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_64f(order: ipp_ctypes::c_int,
                                   pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_64fc(order: ipp_ctypes::c_int,
                                    pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize32f_BiQuad_16s(numBq: ipp_ctypes::c_int,
                                             pBufferSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize32fc_BiQuad_16sc(numBq: ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_BiQuad_32f(numBq: ipp_ctypes::c_int,
                                          pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_BiQuad_DF1_32f(numBq: ipp_ctypes::c_int,
                                              pBufferSize:
                                                  *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_BiQuad_32fc(numBq: ipp_ctypes::c_int,
                                           pBufferSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_BiQuad_16s(numBq: ipp_ctypes::c_int,
                                             pBufferSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64fc_BiQuad_16sc(numBq: ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_BiQuad_32s(numBq: ipp_ctypes::c_int,
                                             pBufferSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_BiQuad_DF1_32s(numBq: ipp_ctypes::c_int,
                                                 pBufferSize:
                                                     *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64fc_BiQuad_32sc(numBq: ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64f_BiQuad_32f(numBq: ipp_ctypes::c_int,
                                             pBufferSize:
                                                 *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize64fc_BiQuad_32fc(numBq: ipp_ctypes::c_int,
                                               pBufferSize:
                                                   *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_BiQuad_64f(numBq: ipp_ctypes::c_int,
                                          pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGetStateSize_BiQuad_64fc(numBq: ipp_ctypes::c_int,
                                           pBufferSize:
                                               *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit32f_16s(ppState: *mut *mut IppsIIRState32f_16s,
                              pTaps: *const Ipp32f, order: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp32f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit32fc_16sc(ppState: *mut *mut IppsIIRState32fc_16sc,
                                pTaps: *const Ipp32fc,
                                order: ipp_ctypes::c_int,
                                pDlyLine: *const Ipp32fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_32f(ppState: *mut *mut IppsIIRState_32f,
                           pTaps: *const Ipp32f, order: ipp_ctypes::c_int,
                           pDlyLine: *const Ipp32f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_32fc(ppState: *mut *mut IppsIIRState_32fc,
                            pTaps: *const Ipp32fc, order: ipp_ctypes::c_int,
                            pDlyLine: *const Ipp32fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_16s(ppState: *mut *mut IppsIIRState64f_16s,
                              pTaps: *const Ipp64f, order: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64fc_16sc(ppState: *mut *mut IppsIIRState64fc_16sc,
                                pTaps: *const Ipp64fc,
                                order: ipp_ctypes::c_int,
                                pDlyLine: *const Ipp64fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_32s(ppState: *mut *mut IppsIIRState64f_32s,
                              pTaps: *const Ipp64f, order: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64fc_32sc(ppState: *mut *mut IppsIIRState64fc_32sc,
                                pTaps: *const Ipp64fc,
                                order: ipp_ctypes::c_int,
                                pDlyLine: *const Ipp64fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_32f(ppState: *mut *mut IppsIIRState64f_32f,
                              pTaps: *const Ipp64f, order: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64fc_32fc(ppState: *mut *mut IppsIIRState64fc_32fc,
                                pTaps: *const Ipp64fc,
                                order: ipp_ctypes::c_int,
                                pDlyLine: *const Ipp64fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_64f(ppState: *mut *mut IppsIIRState_64f,
                           pTaps: *const Ipp64f, order: ipp_ctypes::c_int,
                           pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_64fc(ppState: *mut *mut IppsIIRState_64fc,
                            pTaps: *const Ipp64fc, order: ipp_ctypes::c_int,
                            pDlyLine: *const Ipp64fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit32f_BiQuad_16s(ppState: *mut *mut IppsIIRState32f_16s,
                                     pTaps: *const Ipp32f,
                                     numBq: ipp_ctypes::c_int,
                                     pDlyLine: *const Ipp32f,
                                     pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit32fc_BiQuad_16sc(ppState:
                                           *mut *mut IppsIIRState32fc_16sc,
                                       pTaps: *const Ipp32fc,
                                       numBq: ipp_ctypes::c_int,
                                       pDlyLine: *const Ipp32fc,
                                       pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_BiQuad_32f(ppState: *mut *mut IppsIIRState_32f,
                                  pTaps: *const Ipp32f,
                                  numBq: ipp_ctypes::c_int,
                                  pDlyLine: *const Ipp32f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_BiQuad_DF1_32f(ppState: *mut *mut IppsIIRState_32f,
                                      pTaps: *const Ipp32f,
                                      numBq: ipp_ctypes::c_int,
                                      pDlyLine: *const Ipp32f,
                                      pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_BiQuad_32fc(ppState: *mut *mut IppsIIRState_32fc,
                                   pTaps: *const Ipp32fc,
                                   numBq: ipp_ctypes::c_int,
                                   pDlyLine: *const Ipp32fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_BiQuad_16s(ppState: *mut *mut IppsIIRState64f_16s,
                                     pTaps: *const Ipp64f,
                                     numBq: ipp_ctypes::c_int,
                                     pDlyLine: *const Ipp64f,
                                     pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64fc_BiQuad_16sc(ppState:
                                           *mut *mut IppsIIRState64fc_16sc,
                                       pTaps: *const Ipp64fc,
                                       numBq: ipp_ctypes::c_int,
                                       pDlyLine: *const Ipp64fc,
                                       pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_BiQuad_32s(ppState: *mut *mut IppsIIRState64f_32s,
                                     pTaps: *const Ipp64f,
                                     numBq: ipp_ctypes::c_int,
                                     pDlyLine: *const Ipp64f,
                                     pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_BiQuad_DF1_32s(ppState:
                                             *mut *mut IppsIIRState64f_32s,
                                         pTaps: *const Ipp64f,
                                         numBq: ipp_ctypes::c_int,
                                         pDlyLine: *const Ipp32s,
                                         pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64fc_BiQuad_32sc(ppState:
                                           *mut *mut IppsIIRState64fc_32sc,
                                       pTaps: *const Ipp64fc,
                                       numBq: ipp_ctypes::c_int,
                                       pDlyLine: *const Ipp64fc,
                                       pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64f_BiQuad_32f(ppState: *mut *mut IppsIIRState64f_32f,
                                     pTaps: *const Ipp64f,
                                     numBq: ipp_ctypes::c_int,
                                     pDlyLine: *const Ipp64f,
                                     pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit64fc_BiQuad_32fc(ppState:
                                           *mut *mut IppsIIRState64fc_32fc,
                                       pTaps: *const Ipp64fc,
                                       numBq: ipp_ctypes::c_int,
                                       pDlyLine: *const Ipp64fc,
                                       pBuf: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_BiQuad_64f(ppState: *mut *mut IppsIIRState_64f,
                                  pTaps: *const Ipp64f,
                                  numBq: ipp_ctypes::c_int,
                                  pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRInit_BiQuad_64fc(ppState: *mut *mut IppsIIRState_64fc,
                                   pTaps: *const Ipp64fc,
                                   numBq: ipp_ctypes::c_int,
                                   pDlyLine: *const Ipp64fc, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSparseGetStateSize_32f(nzTapsLen1: ipp_ctypes::c_int,
                                         nzTapsLen2: ipp_ctypes::c_int,
                                         order1: ipp_ctypes::c_int,
                                         order2: ipp_ctypes::c_int,
                                         pStateSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSparseInit_32f(ppState: *mut *mut IppsIIRSparseState_32f,
                                 pNZTaps: *const Ipp32f,
                                 pNZTapPos: *const Ipp32s,
                                 nzTapsLen1: ipp_ctypes::c_int,
                                 nzTapsLen2: ipp_ctypes::c_int,
                                 pDlyLine: *const Ipp32f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRSparse_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int,
                             pState: *mut IppsIIRSparseState_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGenLowpass_64f(rFreq: Ipp64f, ripple: Ipp64f,
                                 order: ipp_ctypes::c_int, pTaps: *mut Ipp64f,
                                 filterType: IppsIIRFilterType,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGenHighpass_64f(rFreq: Ipp64f, ripple: Ipp64f,
                                  order: ipp_ctypes::c_int,
                                  pTaps: *mut Ipp64f,
                                  filterType: IppsIIRFilterType,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRGenGetBufferSize(order: ipp_ctypes::c_int,
                                   pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedianGetBufferSize(maskSize: ipp_ctypes::c_int,
                                         dataType: IppDataType,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_8u_I(pSrcDst: *mut Ipp8u, len: ipp_ctypes::c_int,
                                 maskSize: ipp_ctypes::c_int,
                                 pDlySrc: *const Ipp8u, pDlyDst: *mut Ipp8u,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_8u(pSrc: *const Ipp8u, pDst: *mut Ipp8u,
                               len: ipp_ctypes::c_int,
                               maskSize: ipp_ctypes::c_int,
                               pDlySrc: *const Ipp8u, pDlyDst: *mut Ipp8u,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_16s_I(pSrcDst: *mut Ipp16s,
                                  len: ipp_ctypes::c_int,
                                  maskSize: ipp_ctypes::c_int,
                                  pDlySrc: *const Ipp16s,
                                  pDlyDst: *mut Ipp16s, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_16s(pSrc: *const Ipp16s, pDst: *mut Ipp16s,
                                len: ipp_ctypes::c_int,
                                maskSize: ipp_ctypes::c_int,
                                pDlySrc: *const Ipp16s, pDlyDst: *mut Ipp16s,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_32s_I(pSrcDst: *mut Ipp32s,
                                  len: ipp_ctypes::c_int,
                                  maskSize: ipp_ctypes::c_int,
                                  pDlySrc: *const Ipp32s,
                                  pDlyDst: *mut Ipp32s, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_32s(pSrc: *const Ipp32s, pDst: *mut Ipp32s,
                                len: ipp_ctypes::c_int,
                                maskSize: ipp_ctypes::c_int,
                                pDlySrc: *const Ipp32s, pDlyDst: *mut Ipp32s,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_32f_I(pSrcDst: *mut Ipp32f,
                                  len: ipp_ctypes::c_int,
                                  maskSize: ipp_ctypes::c_int,
                                  pDlySrc: *const Ipp32f,
                                  pDlyDst: *mut Ipp32f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                len: ipp_ctypes::c_int,
                                maskSize: ipp_ctypes::c_int,
                                pDlySrc: *const Ipp32f, pDlyDst: *mut Ipp32f,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_64f_I(pSrcDst: *mut Ipp64f,
                                  len: ipp_ctypes::c_int,
                                  maskSize: ipp_ctypes::c_int,
                                  pDlySrc: *const Ipp64f,
                                  pDlyDst: *mut Ipp64f, pBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFilterMedian_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                len: ipp_ctypes::c_int,
                                maskSize: ipp_ctypes::c_int,
                                pDlySrc: *const Ipp64f, pDlyDst: *mut Ipp64f,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphase_16s(pSrc: *const Ipp16s,
                                     len: ipp_ctypes::c_int,
                                     pDst: *mut Ipp16s, factor: Ipp64f,
                                     norm: Ipp32f, pTime: *mut Ipp64f,
                                     pOutlen: *mut ipp_ctypes::c_int,
                                     pSpec:
                                         *const IppsResamplingPolyphase_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphase_32f(pSrc: *const Ipp32f,
                                     len: ipp_ctypes::c_int,
                                     pDst: *mut Ipp32f, factor: Ipp64f,
                                     norm: Ipp32f, pTime: *mut Ipp64f,
                                     pOutlen: *mut ipp_ctypes::c_int,
                                     pSpec:
                                         *const IppsResamplingPolyphase_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseFixed_16s(pSrc: *const Ipp16s,
                                          len: ipp_ctypes::c_int,
                                          pDst: *mut Ipp16s, norm: Ipp32f,
                                          pTime: *mut Ipp64f,
                                          pOutlen: *mut ipp_ctypes::c_int,
                                          pSpec:
                                              *const IppsResamplingPolyphaseFixed_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseFixed_32f(pSrc: *const Ipp32f,
                                          len: ipp_ctypes::c_int,
                                          pDst: *mut Ipp32f, norm: Ipp32f,
                                          pTime: *mut Ipp64f,
                                          pOutlen: *mut ipp_ctypes::c_int,
                                          pSpec:
                                              *const IppsResamplingPolyphaseFixed_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseGetSize_16s(window: Ipp32f,
                                            nStep: ipp_ctypes::c_int,
                                            pSize: *mut ipp_ctypes::c_int,
                                            hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseGetSize_32f(window: Ipp32f,
                                            nStep: ipp_ctypes::c_int,
                                            pSize: *mut ipp_ctypes::c_int,
                                            hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseFixedGetSize_16s(inRate: ipp_ctypes::c_int,
                                                 outRate: ipp_ctypes::c_int,
                                                 len: ipp_ctypes::c_int,
                                                 pSize:
                                                     *mut ipp_ctypes::c_int,
                                                 pLen: *mut ipp_ctypes::c_int,
                                                 pHeight:
                                                     *mut ipp_ctypes::c_int,
                                                 hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseFixedGetSize_32f(inRate: ipp_ctypes::c_int,
                                                 outRate: ipp_ctypes::c_int,
                                                 len: ipp_ctypes::c_int,
                                                 pSize:
                                                     *mut ipp_ctypes::c_int,
                                                 pLen: *mut ipp_ctypes::c_int,
                                                 pHeight:
                                                     *mut ipp_ctypes::c_int,
                                                 hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseInit_16s(window: Ipp32f,
                                         nStep: ipp_ctypes::c_int,
                                         rollf: Ipp32f, alpha: Ipp32f,
                                         pSpec:
                                             *mut IppsResamplingPolyphase_16s,
                                         hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseInit_32f(window: Ipp32f,
                                         nStep: ipp_ctypes::c_int,
                                         rollf: Ipp32f, alpha: Ipp32f,
                                         pSpec:
                                             *mut IppsResamplingPolyphase_32f,
                                         hint: IppHintAlgorithm) -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseFixedInit_16s(inRate: ipp_ctypes::c_int,
                                              outRate: ipp_ctypes::c_int,
                                              len: ipp_ctypes::c_int,
                                              rollf: Ipp32f, alpha: Ipp32f,
                                              pSpec:
                                                  *mut IppsResamplingPolyphaseFixed_16s,
                                              hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseFixedInit_32f(inRate: ipp_ctypes::c_int,
                                              outRate: ipp_ctypes::c_int,
                                              len: ipp_ctypes::c_int,
                                              rollf: Ipp32f, alpha: Ipp32f,
                                              pSpec:
                                                  *mut IppsResamplingPolyphaseFixed_32f,
                                              hint: IppHintAlgorithm)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseSetFixedFilter_16s(pSrc: *const Ipp16s,
                                                   step: ipp_ctypes::c_int,
                                                   height: ipp_ctypes::c_int,
                                                   pSpec:
                                                       *mut IppsResamplingPolyphaseFixed_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseSetFixedFilter_32f(pSrc: *const Ipp32f,
                                                   step: ipp_ctypes::c_int,
                                                   height: ipp_ctypes::c_int,
                                                   pSpec:
                                                       *mut IppsResamplingPolyphaseFixed_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseGetFixedFilter_16s(pDst: *mut Ipp16s,
                                                   step: ipp_ctypes::c_int,
                                                   height: ipp_ctypes::c_int,
                                                   pSpec:
                                                       *const IppsResamplingPolyphaseFixed_16s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsResamplePolyphaseGetFixedFilter_32f(pDst: *mut Ipp32f,
                                                   step: ipp_ctypes::c_int,
                                                   height: ipp_ctypes::c_int,
                                                   pSpec:
                                                       *const IppsResamplingPolyphaseFixed_32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRGetStateSize_32f(order: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRGetStateSize64f_32f(order: ipp_ctypes::c_int,
                                         pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRGetStateSize_64f(order: ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRInit64f_32f(ppState: *mut *mut IppsIIRState64f_32f,
                                 pTaps: *const Ipp64f,
                                 order: ipp_ctypes::c_int,
                                 pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRInit_32f(ppState: *mut *mut IppsIIRState_32f,
                              pTaps: *const Ipp32f, order: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp32f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRInit_64f(ppState: *mut *mut IppsIIRState_64f,
                              pTaps: *const Ipp64f, order: ipp_ctypes::c_int,
                              pDlyLine: *const Ipp64f, pBuf: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIR_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                            pState: *mut IppsIIRState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                          len: ipp_ctypes::c_int,
                          pState: *mut IppsIIRState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIR64f_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                               pState: *mut IppsIIRState64f_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIR64f_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int,
                             pState: *mut IppsIIRState64f_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIR_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                            pState: *mut IppsIIRState_64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                          len: ipp_ctypes::c_int,
                          pState: *mut IppsIIRState_64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRGetDlyLine64f_32f(pState: *const IppsIIRState64f_32f,
                                       pDlyLine: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRSetDlyLine64f_32f(pState: *mut IppsIIRState64f_32f,
                                       pDlyLine: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRGetDlyLine_32f(pState: *const IppsIIRState_32f,
                                    pDlyLine: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRSetDlyLine_32f(pState: *mut IppsIIRState_32f,
                                    pDlyLine: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRGetDlyLine_64f(pState: *const IppsIIRState_64f,
                                    pDlyLine: *mut Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsIIRIIRSetDlyLine_64f(pState: *mut IppsIIRState_64f,
                                    pDlyLine: *const Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTGetSize_C_32f(order: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pSpecBufferSize: *mut ipp_ctypes::c_int,
                                pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTGetSize_R_32f(order: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pSpecBufferSize: *mut ipp_ctypes::c_int,
                                pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTGetSize_C_32fc(order: ipp_ctypes::c_int,
                                 flag: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pSpecBufferSize: *mut ipp_ctypes::c_int,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTGetSize_C_64f(order: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pSpecBufferSize: *mut ipp_ctypes::c_int,
                                pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTGetSize_R_64f(order: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSpecSize: *mut ipp_ctypes::c_int,
                                pSpecBufferSize: *mut ipp_ctypes::c_int,
                                pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTGetSize_C_64fc(order: ipp_ctypes::c_int,
                                 flag: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pSpecBufferSize: *mut ipp_ctypes::c_int,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInit_C_32f(ppFFTSpec: *mut *mut IppsFFTSpec_C_32f,
                             order: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInit_R_32f(ppFFTSpec: *mut *mut IppsFFTSpec_R_32f,
                             order: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInit_C_32fc(ppFFTSpec: *mut *mut IppsFFTSpec_C_32fc,
                              order: ipp_ctypes::c_int,
                              flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInit_C_64f(ppFFTSpec: *mut *mut IppsFFTSpec_C_64f,
                             order: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInit_R_64f(ppFFTSpec: *mut *mut IppsFFTSpec_R_64f,
                             order: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInit_C_64fc(ppFFTSpec: *mut *mut IppsFFTSpec_C_64fc,
                              order: ipp_ctypes::c_int,
                              flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                pFFTSpec: *const IppsFFTSpec_C_32fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                pFFTSpec: *const IppsFFTSpec_C_32fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                pFFTSpec: *const IppsFFTSpec_C_64fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                pFFTSpec: *const IppsFFTSpec_C_64fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_32fc_I(pSrcDst: *mut Ipp32fc,
                                  pFFTSpec: *const IppsFFTSpec_C_32fc,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_32fc_I(pSrcDst: *mut Ipp32fc,
                                  pFFTSpec: *const IppsFFTSpec_C_32fc,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_64fc_I(pSrcDst: *mut Ipp64fc,
                                  pFFTSpec: *const IppsFFTSpec_C_64fc,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_64fc_I(pSrcDst: *mut Ipp64fc,
                                  pFFTSpec: *const IppsFFTSpec_C_64fc,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_32f_I(pSrcDstRe: *mut Ipp32f,
                                 pSrcDstIm: *mut Ipp32f,
                                 pFFTSpec: *const IppsFFTSpec_C_32f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_32f_I(pSrcDstRe: *mut Ipp32f,
                                 pSrcDstIm: *mut Ipp32f,
                                 pFFTSpec: *const IppsFFTSpec_C_32f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_64f_I(pSrcDstRe: *mut Ipp64f,
                                 pSrcDstIm: *mut Ipp64f,
                                 pFFTSpec: *const IppsFFTSpec_C_64f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_64f_I(pSrcDstRe: *mut Ipp64f,
                                 pSrcDstIm: *mut Ipp64f,
                                 pFFTSpec: *const IppsFFTSpec_C_64f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                               pDstRe: *mut Ipp32f, pDstIm: *mut Ipp32f,
                               pFFTSpec: *const IppsFFTSpec_C_32f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                               pDstRe: *mut Ipp32f, pDstIm: *mut Ipp32f,
                               pFFTSpec: *const IppsFFTSpec_C_32f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_CToC_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                               pDstRe: *mut Ipp64f, pDstIm: *mut Ipp64f,
                               pFFTSpec: *const IppsFFTSpec_C_64f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CToC_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                               pDstRe: *mut Ipp64f, pDstIm: *mut Ipp64f,
                               pFFTSpec: *const IppsFFTSpec_C_64f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPerm_32f_I(pSrcDst: *mut Ipp32f,
                                    pFFTSpec: *const IppsFFTSpec_R_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPack_32f_I(pSrcDst: *mut Ipp32f,
                                    pFFTSpec: *const IppsFFTSpec_R_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToCCS_32f_I(pSrcDst: *mut Ipp32f,
                                   pFFTSpec: *const IppsFFTSpec_R_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PermToR_32f_I(pSrcDst: *mut Ipp32f,
                                    pFFTSpec: *const IppsFFTSpec_R_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PackToR_32f_I(pSrcDst: *mut Ipp32f,
                                    pFFTSpec: *const IppsFFTSpec_R_32f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CCSToR_32f_I(pSrcDst: *mut Ipp32f,
                                   pFFTSpec: *const IppsFFTSpec_R_32f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPerm_64f_I(pSrcDst: *mut Ipp64f,
                                    pFFTSpec: *const IppsFFTSpec_R_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPack_64f_I(pSrcDst: *mut Ipp64f,
                                    pFFTSpec: *const IppsFFTSpec_R_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToCCS_64f_I(pSrcDst: *mut Ipp64f,
                                   pFFTSpec: *const IppsFFTSpec_R_64f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PermToR_64f_I(pSrcDst: *mut Ipp64f,
                                    pFFTSpec: *const IppsFFTSpec_R_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PackToR_64f_I(pSrcDst: *mut Ipp64f,
                                    pFFTSpec: *const IppsFFTSpec_R_64f,
                                    pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CCSToR_64f_I(pSrcDst: *mut Ipp64f,
                                   pFFTSpec: *const IppsFFTSpec_R_64f,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPerm_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pFFTSpec: *const IppsFFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPack_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pFFTSpec: *const IppsFFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToCCS_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                 pFFTSpec: *const IppsFFTSpec_R_32f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PermToR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pFFTSpec: *const IppsFFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PackToR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pFFTSpec: *const IppsFFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CCSToR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                 pFFTSpec: *const IppsFFTSpec_R_32f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPerm_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pFFTSpec: *const IppsFFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToPack_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pFFTSpec: *const IppsFFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTFwd_RToCCS_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                 pFFTSpec: *const IppsFFTSpec_R_64f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PermToR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pFFTSpec: *const IppsFFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_PackToR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pFFTSpec: *const IppsFFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsFFTInv_CCSToR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                 pFFTSpec: *const IppsFFTSpec_R_64f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTGetSize_C_32f(length: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSizeSpec: *mut ipp_ctypes::c_int,
                                pSizeInit: *mut ipp_ctypes::c_int,
                                pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDFTGetSize_R_32f(length: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSizeSpec: *mut ipp_ctypes::c_int,
                                pSizeInit: *mut ipp_ctypes::c_int,
                                pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDFTGetSize_C_32fc(length: ipp_ctypes::c_int,
                                 flag: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSizeSpec: *mut ipp_ctypes::c_int,
                                 pSizeInit: *mut ipp_ctypes::c_int,
                                 pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDFTGetSize_C_64f(length: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSizeSpec: *mut ipp_ctypes::c_int,
                                pSizeInit: *mut ipp_ctypes::c_int,
                                pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDFTGetSize_R_64f(length: ipp_ctypes::c_int,
                                flag: ipp_ctypes::c_int,
                                hint: IppHintAlgorithm,
                                pSizeSpec: *mut ipp_ctypes::c_int,
                                pSizeInit: *mut ipp_ctypes::c_int,
                                pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDFTGetSize_C_64fc(length: ipp_ctypes::c_int,
                                 flag: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSizeSpec: *mut ipp_ctypes::c_int,
                                 pSizeInit: *mut ipp_ctypes::c_int,
                                 pSizeBuf: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInit_C_32f(length: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pDFTSpec: *mut IppsDFTSpec_C_32f,
                             pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInit_R_32f(length: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pDFTSpec: *mut IppsDFTSpec_R_32f,
                             pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInit_C_32fc(length: ipp_ctypes::c_int,
                              flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pDFTSpec: *mut IppsDFTSpec_C_32fc,
                              pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInit_C_64f(length: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pDFTSpec: *mut IppsDFTSpec_C_64f,
                             pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInit_R_64f(length: ipp_ctypes::c_int,
                             flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                             pDFTSpec: *mut IppsDFTSpec_R_64f,
                             pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInit_C_64fc(length: ipp_ctypes::c_int,
                              flag: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pDFTSpec: *mut IppsDFTSpec_C_64fc,
                              pMemInit: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_CToC_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                pDFTSpec: *const IppsDFTSpec_C_32fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_CToC_32fc(pSrc: *const Ipp32fc, pDst: *mut Ipp32fc,
                                pDFTSpec: *const IppsDFTSpec_C_32fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_CToC_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                pDFTSpec: *const IppsDFTSpec_C_64fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_CToC_64fc(pSrc: *const Ipp64fc, pDst: *mut Ipp64fc,
                                pDFTSpec: *const IppsDFTSpec_C_64fc,
                                pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_CToC_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                               pDstRe: *mut Ipp32f, pDstIm: *mut Ipp32f,
                               pDFTSpec: *const IppsDFTSpec_C_32f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_CToC_32f(pSrcRe: *const Ipp32f, pSrcIm: *const Ipp32f,
                               pDstRe: *mut Ipp32f, pDstIm: *mut Ipp32f,
                               pDFTSpec: *const IppsDFTSpec_C_32f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_CToC_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                               pDstRe: *mut Ipp64f, pDstIm: *mut Ipp64f,
                               pDFTSpec: *const IppsDFTSpec_C_64f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_CToC_64f(pSrcRe: *const Ipp64f, pSrcIm: *const Ipp64f,
                               pDstRe: *mut Ipp64f, pDstIm: *mut Ipp64f,
                               pDFTSpec: *const IppsDFTSpec_C_64f,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_RToPerm_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pDFTSpec: *const IppsDFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_RToPack_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pDFTSpec: *const IppsDFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_RToCCS_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                 pDFTSpec: *const IppsDFTSpec_R_32f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_PermToR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pDFTSpec: *const IppsDFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_PackToR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                  pDFTSpec: *const IppsDFTSpec_R_32f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_CCSToR_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                                 pDFTSpec: *const IppsDFTSpec_R_32f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_RToPerm_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pDFTSpec: *const IppsDFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_RToPack_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pDFTSpec: *const IppsDFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTFwd_RToCCS_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                 pDFTSpec: *const IppsDFTSpec_R_64f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_PermToR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pDFTSpec: *const IppsDFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_PackToR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                  pDFTSpec: *const IppsDFTSpec_R_64f,
                                  pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDFTInv_CCSToR_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                                 pDFTSpec: *const IppsDFTSpec_R_64f,
                                 pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsMulPack_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulPerm_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulPack_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                           pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulPerm_32f(pSrc1: *const Ipp32f, pSrc2: *const Ipp32f,
                           pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulPack_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulPerm_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                             len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulPack_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                           pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulPerm_64f(pSrc1: *const Ipp64f, pSrc2: *const Ipp64f,
                           pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulPackConj_32f_I(pSrc: *const Ipp32f, pSrcDst: *mut Ipp32f,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMulPackConj_64f_I(pSrc: *const Ipp64f, pSrcDst: *mut Ipp64f,
                                 len: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsGoertz_16s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                              pVal: *mut Ipp16sc, rFreq: Ipp32f,
                              scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsGoertz_16sc_Sfs(pSrc: *const Ipp16sc, len: ipp_ctypes::c_int,
                               pVal: *mut Ipp16sc, rFreq: Ipp32f,
                               scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsGoertz_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                          pVal: *mut Ipp32fc, rFreq: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsGoertz_32fc(pSrc: *const Ipp32fc, len: ipp_ctypes::c_int,
                           pVal: *mut Ipp32fc, rFreq: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsGoertz_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                          pVal: *mut Ipp64fc, rFreq: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsGoertz_64fc(pSrc: *const Ipp64fc, len: ipp_ctypes::c_int,
                           pVal: *mut Ipp64fc, rFreq: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwdGetSize_32f(len: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pSpecBufferSize: *mut ipp_ctypes::c_int,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInvGetSize_32f(len: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pSpecBufferSize: *mut ipp_ctypes::c_int,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwdGetSize_64f(len: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pSpecBufferSize: *mut ipp_ctypes::c_int,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInvGetSize_64f(len: ipp_ctypes::c_int,
                                 hint: IppHintAlgorithm,
                                 pSpecSize: *mut ipp_ctypes::c_int,
                                 pSpecBufferSize: *mut ipp_ctypes::c_int,
                                 pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwdInit_32f(ppDCTSpec: *mut *mut IppsDCTFwdSpec_32f,
                              len: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInvInit_32f(ppDCTSpec: *mut *mut IppsDCTInvSpec_32f,
                              len: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwdInit_64f(ppDCTSpec: *mut *mut IppsDCTFwdSpec_64f,
                              len: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInvInit_64f(ppDCTSpec: *mut *mut IppsDCTInvSpec_64f,
                              len: ipp_ctypes::c_int, hint: IppHintAlgorithm,
                              pSpec: *mut Ipp8u, pSpecBuffer: *mut Ipp8u)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwd_32f_I(pSrcDst: *mut Ipp32f,
                            pDCTSpec: *const IppsDCTFwdSpec_32f,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInv_32f_I(pSrcDst: *mut Ipp32f,
                            pDCTSpec: *const IppsDCTInvSpec_32f,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwd_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                          pDCTSpec: *const IppsDCTFwdSpec_32f,
                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInv_32f(pSrc: *const Ipp32f, pDst: *mut Ipp32f,
                          pDCTSpec: *const IppsDCTInvSpec_32f,
                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwd_64f_I(pSrcDst: *mut Ipp64f,
                            pDCTSpec: *const IppsDCTFwdSpec_64f,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInv_64f_I(pSrcDst: *mut Ipp64f,
                            pDCTSpec: *const IppsDCTInvSpec_64f,
                            pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTFwd_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                          pDCTSpec: *const IppsDCTFwdSpec_64f,
                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDCTInv_64f(pSrc: *const Ipp64f, pDst: *mut Ipp64f,
                          pDCTSpec: *const IppsDCTInvSpec_64f,
                          pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsHilbertGetSize_32f32fc(length: ipp_ctypes::c_int,
                                      hint: IppHintAlgorithm,
                                      pSpecSize: *mut ipp_ctypes::c_int,
                                      pBufferSize: *mut ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsHilbertInit_32f32fc(length: ipp_ctypes::c_int,
                                   hint: IppHintAlgorithm,
                                   pSpec: *mut IppsHilbertSpec,
                                   pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsHilbert_32f32fc(pSrc: *const Ipp32f, pDst: *mut Ipp32fc,
                               pSpec: *mut IppsHilbertSpec,
                               pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsWTHaarFwd_16s_Sfs(pSrc: *const Ipp16s, len: ipp_ctypes::c_int,
                                 pDstLow: *mut Ipp16s, pDstHigh: *mut Ipp16s,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTHaarFwd_32f(pSrc: *const Ipp32f, len: ipp_ctypes::c_int,
                             pDstLow: *mut Ipp32f, pDstHigh: *mut Ipp32f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWTHaarFwd_64f(pSrc: *const Ipp64f, len: ipp_ctypes::c_int,
                             pDstLow: *mut Ipp64f, pDstHigh: *mut Ipp64f)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWTHaarInv_16s_Sfs(pSrcLow: *const Ipp16s,
                                 pSrcHigh: *const Ipp16s, pDst: *mut Ipp16s,
                                 len: ipp_ctypes::c_int,
                                 scaleFactor: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTHaarInv_32f(pSrcLow: *const Ipp32f, pSrcHigh: *const Ipp32f,
                             pDst: *mut Ipp32f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWTHaarInv_64f(pSrcLow: *const Ipp64f, pSrcHigh: *const Ipp64f,
                             pDst: *mut Ipp64f, len: ipp_ctypes::c_int)
     -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdGetSize(srcType: IppDataType, lenLow: ipp_ctypes::c_int,
                            offsLow: ipp_ctypes::c_int,
                            lenHigh: ipp_ctypes::c_int,
                            offsHigh: ipp_ctypes::c_int,
                            pStateSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdInit_8u32f(pState: *mut IppsWTFwdState_8u32f,
                               pTapsLow: *const Ipp32f,
                               lenLow: ipp_ctypes::c_int,
                               offsLow: ipp_ctypes::c_int,
                               pTapsHigh: *const Ipp32f,
                               lenHigh: ipp_ctypes::c_int,
                               offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdInit_16s32f(pState: *mut IppsWTFwdState_16s32f,
                                pTapsLow: *const Ipp32f,
                                lenLow: ipp_ctypes::c_int,
                                offsLow: ipp_ctypes::c_int,
                                pTapsHigh: *const Ipp32f,
                                lenHigh: ipp_ctypes::c_int,
                                offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdInit_16u32f(pState: *mut IppsWTFwdState_16u32f,
                                pTapsLow: *const Ipp32f,
                                lenLow: ipp_ctypes::c_int,
                                offsLow: ipp_ctypes::c_int,
                                pTapsHigh: *const Ipp32f,
                                lenHigh: ipp_ctypes::c_int,
                                offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdInit_32f(pState: *mut IppsWTFwdState_32f,
                             pTapsLow: *const Ipp32f,
                             lenLow: ipp_ctypes::c_int,
                             offsLow: ipp_ctypes::c_int,
                             pTapsHigh: *const Ipp32f,
                             lenHigh: ipp_ctypes::c_int,
                             offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdSetDlyLine_8u32f(pState: *mut IppsWTFwdState_8u32f,
                                     pDlyLow: *const Ipp32f,
                                     pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdSetDlyLine_16s32f(pState: *mut IppsWTFwdState_16s32f,
                                      pDlyLow: *const Ipp32f,
                                      pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdSetDlyLine_16u32f(pState: *mut IppsWTFwdState_16u32f,
                                      pDlyLow: *const Ipp32f,
                                      pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdSetDlyLine_32f(pState: *mut IppsWTFwdState_32f,
                                   pDlyLow: *const Ipp32f,
                                   pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdGetDlyLine_8u32f(pState: *mut IppsWTFwdState_8u32f,
                                     pDlyLow: *mut Ipp32f,
                                     pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdGetDlyLine_16s32f(pState: *mut IppsWTFwdState_16s32f,
                                      pDlyLow: *mut Ipp32f,
                                      pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdGetDlyLine_16u32f(pState: *mut IppsWTFwdState_16u32f,
                                      pDlyLow: *mut Ipp32f,
                                      pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwdGetDlyLine_32f(pState: *mut IppsWTFwdState_32f,
                                   pDlyLow: *mut Ipp32f,
                                   pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwd_8u32f(pSrc: *const Ipp8u, pDstLow: *mut Ipp32f,
                           pDstHigh: *mut Ipp32f, dstLen: ipp_ctypes::c_int,
                           pState: *mut IppsWTFwdState_8u32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwd_16s32f(pSrc: *const Ipp16s, pDstLow: *mut Ipp32f,
                            pDstHigh: *mut Ipp32f, dstLen: ipp_ctypes::c_int,
                            pState: *mut IppsWTFwdState_16s32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwd_16u32f(pSrc: *const Ipp16u, pDstLow: *mut Ipp32f,
                            pDstHigh: *mut Ipp32f, dstLen: ipp_ctypes::c_int,
                            pState: *mut IppsWTFwdState_16u32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTFwd_32f(pSrc: *const Ipp32f, pDstLow: *mut Ipp32f,
                         pDstHigh: *mut Ipp32f, dstLen: ipp_ctypes::c_int,
                         pState: *mut IppsWTFwdState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvGetSize(dstType: IppDataType, lenLow: ipp_ctypes::c_int,
                            offsLow: ipp_ctypes::c_int,
                            lenHigh: ipp_ctypes::c_int,
                            offsHigh: ipp_ctypes::c_int,
                            pStateSize: *mut ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvInit_32f8u(pState: *mut IppsWTInvState_32f8u,
                               pTapsLow: *const Ipp32f,
                               lenLow: ipp_ctypes::c_int,
                               offsLow: ipp_ctypes::c_int,
                               pTapsHigh: *const Ipp32f,
                               lenHigh: ipp_ctypes::c_int,
                               offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvInit_32f16u(pState: *mut IppsWTInvState_32f16u,
                                pTapsLow: *const Ipp32f,
                                lenLow: ipp_ctypes::c_int,
                                offsLow: ipp_ctypes::c_int,
                                pTapsHigh: *const Ipp32f,
                                lenHigh: ipp_ctypes::c_int,
                                offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvInit_32f16s(pState: *mut IppsWTInvState_32f16s,
                                pTapsLow: *const Ipp32f,
                                lenLow: ipp_ctypes::c_int,
                                offsLow: ipp_ctypes::c_int,
                                pTapsHigh: *const Ipp32f,
                                lenHigh: ipp_ctypes::c_int,
                                offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvInit_32f(pState: *mut IppsWTInvState_32f,
                             pTapsLow: *const Ipp32f,
                             lenLow: ipp_ctypes::c_int,
                             offsLow: ipp_ctypes::c_int,
                             pTapsHigh: *const Ipp32f,
                             lenHigh: ipp_ctypes::c_int,
                             offsHigh: ipp_ctypes::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvSetDlyLine_32f8u(pState: *mut IppsWTInvState_32f8u,
                                     pDlyLow: *const Ipp32f,
                                     pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvSetDlyLine_32f16s(pState: *mut IppsWTInvState_32f16s,
                                      pDlyLow: *const Ipp32f,
                                      pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvSetDlyLine_32f16u(pState: *mut IppsWTInvState_32f16u,
                                      pDlyLow: *const Ipp32f,
                                      pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvSetDlyLine_32f(pState: *mut IppsWTInvState_32f,
                                   pDlyLow: *const Ipp32f,
                                   pDlyHigh: *const Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvGetDlyLine_32f8u(pState: *mut IppsWTInvState_32f8u,
                                     pDlyLow: *mut Ipp32f,
                                     pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvGetDlyLine_32f16s(pState: *mut IppsWTInvState_32f16s,
                                      pDlyLow: *mut Ipp32f,
                                      pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvGetDlyLine_32f16u(pState: *mut IppsWTInvState_32f16u,
                                      pDlyLow: *mut Ipp32f,
                                      pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInvGetDlyLine_32f(pState: *mut IppsWTInvState_32f,
                                   pDlyLow: *mut Ipp32f,
                                   pDlyHigh: *mut Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInv_32f8u(pSrcLow: *const Ipp32f, pSrcHigh: *const Ipp32f,
                           srcLen: ipp_ctypes::c_int, pDst: *mut Ipp8u,
                           pState: *mut IppsWTInvState_32f8u) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInv_32f16s(pSrcLow: *const Ipp32f, pSrcHigh: *const Ipp32f,
                            srcLen: ipp_ctypes::c_int, pDst: *mut Ipp16s,
                            pState: *mut IppsWTInvState_32f16s) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInv_32f16u(pSrcLow: *const Ipp32f, pSrcHigh: *const Ipp32f,
                            srcLen: ipp_ctypes::c_int, pDst: *mut Ipp16u,
                            pState: *mut IppsWTInvState_32f16u) -> IppStatus;
}
extern "C" {
    pub fn ippsWTInv_32f(pSrcLow: *const Ipp32f, pSrcHigh: *const Ipp32f,
                         srcLen: ipp_ctypes::c_int, pDst: *mut Ipp32f,
                         pState: *mut IppsWTInvState_32f) -> IppStatus;
}
extern "C" {
    pub fn ippsReplaceNAN_32f_I(pSrcDst: *mut Ipp32f, len: ipp_ctypes::c_int,
                                value: Ipp32f) -> IppStatus;
}
extern "C" {
    pub fn ippsReplaceNAN_64f_I(pSrcDst: *mut Ipp64f, len: ipp_ctypes::c_int,
                                value: Ipp64f) -> IppStatus;
}
extern "C" {
    pub fn ippvmGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippsAbs_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32f_A24(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64f_A53(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32f_A24(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_64f_A53(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32f_A24(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64f_A53(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsInv_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInv_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInv_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInv_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInv_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInv_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32f_A11(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32f_A21(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32f_A24(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64f_A26(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64f_A50(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64f_A53(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvSqrt_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvSqrt_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvSqrt_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvSqrt_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvSqrt_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvSqrt_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCbrt_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCbrt_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCbrt_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCbrt_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCbrt_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCbrt_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvCbrt_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvCbrt_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvCbrt_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvCbrt_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvCbrt_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsInvCbrt_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow_32f_A11(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_32f_A21(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_32f_A24(a: *const Ipp32f, b: *const Ipp32f, r: *mut Ipp32f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_64f_A26(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_64f_A50(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_64f_A53(a: *const Ipp64f, b: *const Ipp64f, r: *mut Ipp64f,
                           n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow2o3_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow2o3_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow2o3_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow2o3_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow2o3_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow2o3_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow3o2_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow3o2_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow3o2_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow3o2_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow3o2_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow3o2_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqr_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_32f_A11(a: *const Ipp32f, b: Ipp32f, r: *mut Ipp32f,
                            n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_32f_A21(a: *const Ipp32f, b: Ipp32f, r: *mut Ipp32f,
                            n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_32f_A24(a: *const Ipp32f, b: Ipp32f, r: *mut Ipp32f,
                            n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_64f_A26(a: *const Ipp64f, b: Ipp64f, r: *mut Ipp64f,
                            n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_64f_A50(a: *const Ipp64f, b: Ipp64f, r: *mut Ipp64f,
                            n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_64f_A53(a: *const Ipp64f, b: Ipp64f, r: *mut Ipp64f,
                            n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpm1_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpm1_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpm1_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpm1_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpm1_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExpm1_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog1p_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog1p_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog1p_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog1p_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog1p_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog1p_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinCos_32f_A11(a: *const Ipp32f, r1: *mut Ipp32f,
                              r2: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSinCos_32f_A21(a: *const Ipp32f, r1: *mut Ipp32f,
                              r2: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSinCos_32f_A24(a: *const Ipp32f, r1: *mut Ipp32f,
                              r2: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSinCos_64f_A26(a: *const Ipp64f, r1: *mut Ipp64f,
                              r2: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSinCos_64f_A50(a: *const Ipp64f, r1: *mut Ipp64f,
                              r2: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSinCos_64f_A53(a: *const Ipp64f, r1: *mut Ipp64f,
                              r2: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsTan_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan2_32f_A11(a: *const Ipp32f, b: *const Ipp32f,
                             r: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAtan2_32f_A21(a: *const Ipp32f, b: *const Ipp32f,
                             r: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAtan2_32f_A24(a: *const Ipp32f, b: *const Ipp32f,
                             r: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAtan2_64f_A26(a: *const Ipp64f, b: *const Ipp64f,
                             r: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAtan2_64f_A50(a: *const Ipp64f, b: *const Ipp64f,
                             r: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAtan2_64f_A53(a: *const Ipp64f, b: *const Ipp64f,
                             r: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErf_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErf_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErf_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErf_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErf_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErf_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfInv_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfInv_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfInv_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfInv_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfInv_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfInv_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfc_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfc_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfc_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfc_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfc_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfc_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfcInv_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfcInv_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfcInv_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfcInv_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfcInv_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsErfcInv_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNorm_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNorm_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNorm_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNorm_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNorm_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNorm_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNormInv_32f_A11(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNormInv_32f_A21(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNormInv_32f_A24(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNormInv_64f_A26(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNormInv_64f_A50(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCdfNormInv_64f_A53(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsHypot_32f_A11(a: *const Ipp32f, b: *const Ipp32f,
                             r: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsHypot_32f_A21(a: *const Ipp32f, b: *const Ipp32f,
                             r: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsHypot_32f_A24(a: *const Ipp32f, b: *const Ipp32f,
                             r: *mut Ipp32f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsHypot_64f_A26(a: *const Ipp64f, b: *const Ipp64f,
                             r: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsHypot_64f_A50(a: *const Ipp64f, b: *const Ipp64f,
                             r: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsHypot_64f_A53(a: *const Ipp64f, b: *const Ipp64f,
                             r: *mut Ipp64f, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAbs_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArg_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArg_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArg_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArg_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArg_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsArg_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_32fc_A24(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_64fc_A53(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_32fc_A24(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_64fc_A53(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32fc_A11(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32fc_A21(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_32fc_A24(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64fc_A26(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64fc_A50(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_64fc_A53(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32fc_A11(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32fc_A21(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_32fc_A24(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64fc_A26(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64fc_A50(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_64fc_A53(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsCIS_32fc_A11(a: *const Ipp32f, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCIS_32fc_A21(a: *const Ipp32f, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCIS_32fc_A24(a: *const Ipp32f, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCIS_64fc_A26(a: *const Ipp64f, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCIS_64fc_A50(a: *const Ipp64f, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCIS_64fc_A53(a: *const Ipp64f, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConj_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsConj_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsMulByConj_32fc_A11(a: *const Ipp32fc, b: *const Ipp32fc,
                                  r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMulByConj_32fc_A21(a: *const Ipp32fc, b: *const Ipp32fc,
                                  r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMulByConj_32fc_A24(a: *const Ipp32fc, b: *const Ipp32fc,
                                  r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMulByConj_64fc_A26(a: *const Ipp64fc, b: *const Ipp64fc,
                                  r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMulByConj_64fc_A50(a: *const Ipp64fc, b: *const Ipp64fc,
                                  r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsMulByConj_64fc_A53(a: *const Ipp64fc, b: *const Ipp64fc,
                                  r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsCos_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCos_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSin_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTan_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCosh_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSinh_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTanh_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcos_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsin_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtan_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAcosh_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAsinh_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsAtanh_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsExp_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLn_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsLog10_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32fc_A11(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32fc_A21(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_32fc_A24(a: *const Ipp32fc, r: *mut Ipp32fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64fc_A26(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64fc_A50(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsSqrt_64fc_A53(a: *const Ipp64fc, r: *mut Ipp64fc, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsPow_32fc_A11(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_32fc_A21(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_32fc_A24(a: *const Ipp32fc, b: *const Ipp32fc,
                            r: *mut Ipp32fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_64fc_A26(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_64fc_A50(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPow_64fc_A53(a: *const Ipp64fc, b: *const Ipp64fc,
                            r: *mut Ipp64fc, n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_32fc_A11(a: *const Ipp32fc, b: Ipp32fc, r: *mut Ipp32fc,
                             n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_32fc_A21(a: *const Ipp32fc, b: Ipp32fc, r: *mut Ipp32fc,
                             n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_32fc_A24(a: *const Ipp32fc, b: Ipp32fc, r: *mut Ipp32fc,
                             n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_64fc_A26(a: *const Ipp64fc, b: Ipp64fc, r: *mut Ipp64fc,
                             n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_64fc_A50(a: *const Ipp64fc, b: Ipp64fc, r: *mut Ipp64fc,
                             n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsPowx_64fc_A53(a: *const Ipp64fc, b: Ipp64fc, r: *mut Ipp64fc,
                             n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsFloor_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFloor_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCeil_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsCeil_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTrunc_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsTrunc_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRound_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRound_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRint_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsRint_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNearbyInt_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsNearbyInt_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsModf_32f(a: *const Ipp32f, r1: *mut Ipp32f, r2: *mut Ipp32f,
                        n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsModf_64f(a: *const Ipp64f, r1: *mut Ipp64f, r2: *mut Ipp64f,
                        n: Ipp32s) -> IppStatus;
}
extern "C" {
    pub fn ippsFrac_32f(a: *const Ipp32f, r: *mut Ipp32f, n: Ipp32s)
     -> IppStatus;
}
extern "C" {
    pub fn ippsFrac_64f(a: *const Ipp64f, r: *mut Ipp64f, n: Ipp32s)
     -> IppStatus;
}
